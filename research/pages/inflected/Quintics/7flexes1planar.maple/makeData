#makeData
#
# Frank Sottile
# 17 March 2002
# Amherst
#
# This file takes the lexicographic Groebner basis in Eqs of the maximally
# inflected quintics with the given flexes and planar point
# and creates the parameterizations.
#
###########################################################################
Digits:=300:
read(Eqs):

#
#    Solves the equations from the lexicographic Groebner basis in Eqs
# Eqs[1] factors into a cubic (EA) and a nonic (EB).
# Eqs[2] = f*EB, so if g is not a root of EB, f=0
# Eqs[3] = f^2*a + EA*G(g) so if g is not a root of EB, f=0
#
 Eq1:=factor(Eqs[1]):
 EA:=op(1,Eq1):
 EB:=op(2,Eq1):
 G:=[solve(EA=0,g)]:
 F:=[0,0,0]:
 for gg in [fsolve(EB=0,g)] do
  G:=[G[],gg,gg]:
  F:=[F[],fsolve(subs(g=gg,Eqs[3])=0,f)]:
 od:
 E:=[]:
 for i from 1 to 21 do
  E:=[E[],fsolve(subs(g=G[i],f=F[i],Eqs[4])=0,e)]: 
 od:
 DD:=[]:
 for i from 1 to 21 do 
  DD:=[DD[],fsolve(subs(g=G[i],Eqs[5])=0,d)]:
 od:
 C:=[]:
 for i from 1 to 21 do
  C:=[C[],fsolve(subs(g=G[i],f=F[i],Eqs[6])=0,c)]:
 od:
 B:=[]:
 for i from 1 to 21 do
  B:=[B[],fsolve(subs(g=G[i],f=F[i],Eqs[7])=0,b)]:
 od:
 A:=[]:
 for i from 1 to 21 do
  A:=[A[],fsolve(subs(g=G[i],f=F[i],Eqs[8])=0,a)]:
  DD[i]:=Re(DD[i]):
  A[i]:=Re(A[i]):
  B[i]:=Re(B[i]):
  C[i]:=Re(C[i]):
  E[i]:=Re(evalf(E[i])):
  F[i]:=Re(evalf(F[i])):
  G[i]:=Re(evalf(G[i])):
 od:

###########################################################################
#
#  The original local parameterization of the Schubet cell & kernel
#
#linalg[kernel](matrix([[1,a,0,0,b,c],
#                       [0,0,1,0,d,e],
#                       [0,0,0,1,f,g]]));
#  {[-a, 1, 0, 0, 0, 0], [-c, 0, -e, -g, 0, 1], [-b, 0, -d, -f, 1, 0]}
#########################################################################

RatNorm:=linalg[vector]([1,s,s^2,s^3,s^4,s^5  ]):

x:=[]:y:=[]:z:=[]:
for i from 1 to 21 do
 x:=[x[],linalg[multiply](linalg[vector]([-C[i],0, -E[i],-G[i],0,1]),RatNorm)]:
 y:=[y[],linalg[multiply](linalg[vector]([-B[i],0,-DD[i],-F[i],1,0]),RatNorm)]:
 z:=[z[],linalg[multiply](linalg[vector]([-A[i],1,   0  ,  0  ,0,0]),RatNorm)]:
od:

Digits:=10:
file := fopen(`data`,WRITE):

fprintf(file,`x :=[\n`):
for j from 1 to 20 do 
 fprintf(file,cat(`     `,convert(evalf(x[j]),string),`,\n`)):
od:
fprintf(file,cat(`     `,convert(evalf(x[21]),string),`]:\n`)):

fprintf(file,`y :=[\n`):
for j from 1 to 20 do 
 fprintf(file,cat(`     `,convert(evalf(y[j]),string),`,\n`)):
# if j mod 2 = 0 then fprintf(file,`\n`): fi:
od:
fprintf(file,cat(`     `,convert(evalf(y[21]),string),`]:\n`)):

fprintf(file,`z :=[\n`):
for j from 1 to 20 do 
 fprintf(file,cat(`     `,convert(evalf(z[j]),string),`,`)):
 if j mod 2 = 0 then fprintf(file,`\n`): fi:
od:
fprintf(file,cat(`     `,convert(evalf(z[21]),string),`]:\n`)):

quit;
