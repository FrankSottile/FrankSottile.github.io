#C3.maple
#
# Frank Sottile
# This draws the moment graph for type C_3
#
interface(quiet=true):
with(plots):
with(plottools):
plotsetup(x11,plotoptions=`width=3in,height=2.5in`):

a:=4+sqrt(2):
b:=2+sqrt(2):
c:=sqrt(2):

makeRot := proc()
# make an orthogonal matrix that rotates (b,c,a) |--> (0,0,1)
 global a,b,c:
 local A,V,W,nV,nA,rR,i,nW:
 A := [b,c,a]:
 V := [-c,b,0]:   W:=[0,-a,c]:
 nV:=sum( V[i]*V[i],i=1..3):
 nA:=sum( A[i]*A[i],i=1..3):
 rR:=solve(sum( (W[i]+r*V[i])*V[i],i=1..3)=0,r):
 W:=[seq(W[i]+rR*V[i],i=1..3)]:
 nW:=simplify(sum( W[i]*W[i],i=1..3)):
 A:=[seq(A[i]/sqrt(nA),i=1..3)]:
 V:=[seq(V[i]/sqrt(nV),i=1..3)]:
 W:=[seq(W[i]/sqrt(nW),i=1..3)]:
 return([V,W,A]):
end proc:

MRot := makeRot():

Rot:=proc(v)
 global MRot:
  local i,j:
 return([seq( evalf(sum(v[i]*MRot[j][i],i=1..3)), j=1..3)])
# return(v)
end proc:

#
#  These points are the vertices of the type B_3 permutahedron inscribed in a cube
#
Vertices:=[[ a, b, c],[ a, c, b],[ a, b,-c],[ a, c,-b],[ a,-b, c],[ a,-c, b],[ a,-b,-c],[ a,-c,-b],
           [-a, b, c],[-a, c, b],[-a, b,-c],[-a, c,-b],[-a,-b, c],[-a,-c, b],[-a,-b,-c],[-a,-c,-b],
	   [ b, a, c],[ c, a, b],[-b, a, c],[-c, a, b],[ b, a,-c],[ c, a,-b],[-b, a,-c],[-c, a,-b],
	   [ b,-a, c],[ c,-a, b],[-b,-a, c],[-c,-a, b],[ b,-a,-c],[ c,-a,-b],[-b,-a,-c],[-c,-a,-b],
	   [ b, c, a],[ c, b, a],[-b, c, a],[-c, b, a],[ b,-c, a],[ c,-b, a],[-b,-c, a],[-c,-b, a],
	   [ b, c,-a],[ c, b,-a],[-b, c,-a],[-c, b,-a],[ b,-c,-a],[ c,-b,-a],[-b,-c,-a],[-c,-b,-a]]:
ED:=[[1,-1,0],[1,0,-1],[0,1,-1],[1,1,0],[1,0,1],[0,1,1],[1,0,0],[0,1,0],[0,0,1]]:
# Normalize the edge directions
for i from 1 to 6 do for j from 1 to 3 do ED[i][j]:=ED[i][j]/sqrt(2): end do: end do:

for i from 1 to 48 do
  Vertices[i] := Rot(Vertices[i]):
#  lprint(i,Vertices[i],evalf(Vertices[i]));
end do:

for i from 1 to 9 do
  ED[i] := Rot(ED[i]):
end do:


Col:=[blue,red,green,magenta,brown,coral,yellow,pink,grey]:
#V:=pointplot3d(Vertices,symbol=point,color=black):
#
V:=[]:
for vert in Vertices do V:=[V[],sphere(vert,0.2,style=patchnogrid,grid=[9,11],color=black)]: end do:


Dir:={}:
Edges:=[]:
for i from 1 to 47 do
 for j from i+1 to 48 do
  vv:=[seq(Vertices[i][ii]-Vertices[j][ii], ii=1..3)]:
  g := sqrt(vv[1]^2+vv[2]^2+vv[3]^2);
  vv := [seq(vv[ii]/g, ii=1..3)]:
  for jj from 1 to 9 do
   if abs(sum(vv[ii]*ED[jj][ii],ii=1..3))>0.99  then
     Edges := [Edges[], line(Vertices[i],Vertices[j],color=Col[jj],thickness=2)]:
   end if:
  end do:
 end do:
end do:

#Dir:= Dir minus {[1,-1,0], [1,0,-1], [0,1,-1],[1,1,0],[1,0,1],[0,1,1]};

plotsetup(gif,plotoutput="A.gif",plotoptions=`height=700,width=650`):
#plotsetup(ps,plotoutput=`A.eps`,plotoptions=`color,portrait,width=600pt,height=600pt,noborder`):
display3d(V,Edges,orientation=[32,56],scaling=constrained);

F:= th -> display(V,Edges,orientation=[th,66],style=patchnogrid):
#NFr:=180: plotsetup(gif,plotoutput="movie.gif",plotoptions=`height=800,width=700`): 
#
NFr:=180: plotsetup(gif,plotoutput="Cmovie.gif",plotoptions=`height=275,width=275`): 
NFr:=180: plotsetup(gif,plotoutput="Cmovie.gif",plotoptions=`height=400,width=400`): 
animate(F,[th],th=0..360*(1-1/NFr),scaling=constrained,axes=none,frames=NFr);
 



