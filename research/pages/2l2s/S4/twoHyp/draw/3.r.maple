#3.r.maple
#
#  DRaws hyperbolae from the third family
#
interface(quiet=true):
with(plots):
plotsetup(x11,plotoptions=`width=3in,height=2.5in`):

############################################
#
Sphere := (a,b,c,r) ->
  linalg[matrix]([
   [a^2+b^2+c^2-r^2, -a, -b, -c],
   [      -a     , 1 , 0 , 0 ],
   [      -b     , 0 , 1 , 0 ],
   [      -c     , 0 , 0 , 1 ]]):

Wedge := proc(Sph)
local Pairs, i, j, wedge:
 wedge := linalg[matrix](6, 6, 0):
 Pairs := combinat[choose]([1,2,3,4],2):
 for i from 1 to 6 do
  for j from 1 to 6 do
   wedge[i,j] := linalg[det](linalg[submatrix](Sph,Pairs[i],Pairs[j])):
  od:
 od:
 evalm(wedge)
end:

Equation := proc(a,b,c,r)
local  plucker:
 plucker:=linalg[vector]([p01,p02,p03,p12,p13,p23]):
 linalg[innerprod](plucker,Wedge(Sphere(a,b,c,r)),plucker)
end:

Quadric := (a,b,c,d,e,f,g,h,x,y) ->
  linalg[matrix]([
   [ a , b , c , d ],
   [ b , e , f , g ],
   [ c , f , h , x ],
   [ d , g , x , y ]]):

##########################################
#  We assume that A = b = 1.
#  a is the function a(B) stored in aSOLS
#
TanPoint := proc(Q,B,a)
local Point, plugin, touch:
 Point:=linalg[vector]([1,B,t*a,t]):
 plugin:=linalg[innerprod](Point,Q,Point):
 touch:= expand(-coeff(plugin,t)/2/coeff(plugin,t^2)):
 [B, simplify(touch*a), touch]
end:
# [1,B,1,b]
#  B is the function B(b) stored in aSOLS
TanPointb := proc(Q,B,b)
local Point, plugin, touch:
 Point:=linalg[vector]([1,B,t,t*b]):
 plugin:=linalg[innerprod](Point,Q,Point):
 touch:= expand(-coeff(plugin,t)/2/coeff(plugin,t^2)):
 [B, simplify(touch), simplify(touch*b)]
end:

Coords:=linalg[vector]([1,X,Y,Z]):
plucker:=linalg[vector]([p01,p02,p03,p12,p13,p23]):

s2:=2^(1/2):

##################################################################

F:=subs(p02=a*A,p03=b*A,p12=a*B,p13=b*B,p01=0,p23=0,
    linalg[innerprod](plucker,Wedge(Quadric(-1,0,-1,0,1,0,0,1,0,-1)),plucker)):

aSOLS:=[solve(subs(b=1,A=1,F)=0,a)]:
bSOLS:=[solve(subs(a=1,A=1,F)=0,B)]: 
#########################################################
# Initial hyperbola
#
Hyp:=plot3d([s2*cos(th)+t*sin(th),
              (-s2*sin(th)+t*cos(th)-1),t]
              ,t=-8..8,th=-Pi..Pi,color=coral):

#########################################################
#Ideal3:= [x,h+2*y,g,e*y+f^2,d,c,b,a+e]:
Family3:=Quadric(-1,0,0,0,1,f,0,2*f^2,0,-f^2):
#F;f:=1:
#subs(p02=a*A,p03=b*A,p12=a*B,p13=b*B,p01=0,p23=0,
#    linalg[innerprod](plucker,Wedge(Family3),plucker));quit;

linalg[innerprod](Coords,Family3,Coords)-
expand((X+f*Y)^2+(f*Y)^2-(f*Z)^2-1):
simplify(subs(X=cos(th)+sin(th)+t*sin(th)-t*cos(th),
         Y=(-sin(th)+t*cos(th))/f,Z=-t/f,
          (X+f*Y)^2+(f*Y)^2-(f*Z)^2-1)):
f:=-1:
##########################################################

NFR:=180:

Eps:=0.08:

tC1:=TanPoint(Family3,B,aSOLS[1]):
tC2:=TanPoint(Family3,B,aSOLS[2]):
tC3:=TanPointb(Family3,bSOLS[1],b):
tC4:=TanPointb(Family3,bSOLS[2],b):
tC1[1]:=tC1[1]+Eps*sin(th):
tC2[1]:=tC2[1]+Eps*sin(th):
tC3[1]:=tC3[1]+Eps*sin(th):
tC4[1]:=tC4[1]+Eps*sin(th):
tC1[2]:=tC1[2]+Eps*cos(th):
tC2[2]:=tC2[2]+Eps*cos(th):
tC3[2]:=tC3[2]+Eps*cos(th):
tC4[2]:=tC4[2]+Eps*cos(th):

TC1:=[tC1[1]*cos(T) + tC1[2]*sin(T), 
      tC1[2]*cos(T) - tC1[1]*sin(T), tC1[3]]:
TC2:=[tC2[1]*cos(T) + tC2[2]*sin(T), 
      tC2[2]*cos(T) - tC2[1]*sin(T), tC2[3]]:
TC3:=[tC3[1]*cos(T) + tC3[2]*sin(T), 
      tC3[2]*cos(T) - tC3[1]*sin(T), tC3[3]]:
TC4:=[tC4[1]*cos(T) + tC4[2]*sin(T), 
      tC4[2]*cos(T) - tC4[1]*sin(T), tC4[3]]:
######################################################
eps:=0.08: 
Axis:=[X*cos(ph) + eps*cos(th)*sin(ph),
       eps*cos(th)*cos(ph) - X*sin(ph), eps*sin(th)]:
plotsetup(gif,plotoutput=`3.r.gif`,plotoptions=`height=230,width=250`):

display([
animate3d([TC1[]],B=-1..-0.01,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC1[]],B=0.01..1,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC2[]],B=-1..-0.01,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC2[]],B=0.01..1,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC3[]],b=-1..-0.01,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC3[]],b=0.1..1,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC4[]],b=-1..-0.01,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC4[]],b=0.01..1,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
#  X-axis
animate3d(Axis,X=-8..8,th=-Pi..Pi,ph=-Pi..Pi,color=magenta,grid=[2,5],frames=NFR)
,animate3d([(cos(th)+sin(th)+t*sin(th)-t*cos(th))*cos(T)
         +sin(T)*((-sin(th)+t*cos(th))/f),
             -(cos(th)+sin(th)+t*sin(th)-t*cos(th))*sin(T)
         +cos(T)*((-sin(th)+t*cos(th))/f),-t/f]
              ,t=-8*abs(f)..8*abs(f),th=-Pi..Pi,T=-Pi..Pi,
              color=tan,grid=[30,40],frames=NFR)
], insequence=false, view=[-8..8,-8..8,-5..5],
  orientation=[0,75],scaling = CONSTRAINED);

time();