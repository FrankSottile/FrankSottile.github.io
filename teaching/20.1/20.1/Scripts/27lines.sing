// 27lines.sing
//
//  This file studies the lines on a cubic surface in 3-space.
//
//
//    redSB computes a reduced Groebner basis
option(redSB);
//    We need some extra functionality provided by this library
LIB "random.lib";
//
//  This sets the random seed so that this script is repeatable.
//
system("random",210);
//
//   Make a ring of characteristic zero
ring R = 0, (x,z,y), dp;
//
//  Create a random cubic polynomial
//
poly F = randomid(maxideal(3),1,19)[1] + randomid(maxideal(2),1,19)[1]
       + randomid(maxideal(1),1,19)[1] + random(-20,20);
//
// Now make a ring whose coordinates parametrize lines in space
//
ring S = 0, (a,b,c,d,l), dp;
//
// A line in 3-space is spanned a point  p = [a, b, 0] 
//  in the x-y plane and a direction     v = [c, d, 1] 
// It is parametrised by  p + l*v
//  We substitute a parametrization of the line into our cubic
//
map CubicOnLine = R, a+l*c, b+l*d, l;
poly G = CubicOnLine(F);
//
//  Extracts the coefficients of powers of l in G; these must vanish 
//   for the line to lie in the cubic, and they will be equations for 
//   the general line to lie on our specific cubic.  
//  This is a matrix and the call to 'minor' is a hack to create
//   an ideal of its entries.
//
ideal LoC = minor(coeffs(G, l), 1);
//
// Now we create the coordinate ring for lines, with variables a,b,c,d 
//
ring T = 0, (a,b,c,d), dp;
ideal Lines = imap(S,LoC);
//
// std computes a Groebner basis for Lines
//
Lines = std(Lines);
//
//  It may be interesting to look at the ideal
//Lines;
dim(Lines);
mult(Lines);
