with(plots):           
plotsetup(x11,plotoptions=`width=3in,height=2.5in`):
#
# This file will find a polynomial  approximation to the
# solutions of the problem with parameters
#
#
interface(quiet=true):
with(plots):
with(stats):
plotsetup(x11,plotoptions=`width=3in,height=4in`):
Digits:=8:

RatNorm:=linalg[vector]([t^4,t^3*s,t^2*s^2,t*s^3,s^4]):
Ifl:=[-3,-1,1,S]:

############################################################################
#  Inflection points at 0 and infinity and at Infl.
#
A:=256*a^5+(-256*s+768)*a^4+(64*s^2-672*s+480)*a^3+(144*s^2-368*s-192)*a^2+(73*s^2+90*s-63)*a+(-3*s^2+6*s+9):
B:=(144*s+48)*b^5+(-32*s^2+240*s-288)*b^4+(-48*s^3+56*s^2-408*s-144)*b^3+(-24*s^3+72*s^2-216*s)*b^2+(81*s^3+27*s^2)*b+(27*s^3):
C:=16*c^5+(-48*s+144)*c^4+(48*s^2-360*s+408)*c^3+(-16*s^3+288*s^2-824*s+312)*c^2+(-72*s^3+497*s^2-510*s-135)*c+(-81*s^3+207*s^2+105*s+9):
DD:=d^5+(9*s+3)*d^4+(-8*s^2+24*s-72)*d^3+(-48*s^3+56*s^2-408*s-144)*d^2+(-96*s^3+720*s^2-864*s)*d+(1296*s^3+432*s^2):
AB:=(9*s+3)*b-64*a^4+(32*s-96)*a^3+(36*s+12)*a^2+(-4*s+12)*a+(3*s):
AC:=c+2*a+(-s+3):
AD:=d-16*a^2+(8*s-24)*a+(9*s+3):
#
#
#plotsetup(gif,plotoutput=`d.vs.s-inv.gif`,plotoptions=`height=400,width=400`):
#F:=simplify(c^5*t^3*subs(d=1/c,s=1/t,G[1]));
#implicitplot(G[1],s=-4..4,d=-15..10,grid=[50,50],axes=boxed);
#implicitplot(F,t=-2/5..3/5,c=-2..3/10,grid=[200,200],axes=boxed);

#
#  This part sorts the solutions for s from -4 .. 4
#

epsilon:=.00001:
Steps:=20:
Svals:=[]:Dsols:=[]:Csols:=[]:Bsols:=[]:Asols:=[]:
for S from -85 to 85 do 
 As:=sort([fsolve(subs(s=S/Steps+epsilon,A)=0,a)]):
 Bs:=sort([fsolve(subs(s=S/Steps+epsilon,B)=0,b)]):
 Cs:=sort([fsolve(subs(s=S/Steps+epsilon,C)=0,c)]):
 Ds:=sort([fsolve(subs(s=S/Steps+epsilon,DD)=0,d)]):
 if (S/Steps<=-1/3) then 
  AS:=[As[1],As[2],As[3],As[4],As[5]]:
  BS:=[Bs[1],Bs[5],Bs[4],Bs[2],Bs[3]]:
  CS:=[Cs[5],Cs[4],Cs[3],Cs[2],Cs[1]]:
  DS:=[Ds[3],Ds[2],Ds[1],Ds[4],Ds[5]]:
 fi:
 if (S/Steps>=-1/3) and (S<=0) then 
  AS:=[As[1],As[2],As[3],As[4],As[5]]:
  BS:=[Bs[5],Bs[4],Bs[3],Bs[1],Bs[2]]:
  CS:=[Cs[5],Cs[4],Cs[3],Cs[2],Cs[1]]:
  DS:=[Ds[3],Ds[2],Ds[1],Ds[4],Ds[5]]:
 fi:
 if (S>0) and (S/Steps<1/3) then 
  AS:=[As[1],As[2],As[3],As[4],As[5]]:
  BS:=[Bs[5],Bs[2],Bs[3],Bs[1],Bs[4]]:
  CS:=[Cs[5],Cs[4],Cs[3],Cs[2],Cs[1]]:
  DS:=[Ds[4],Ds[2],Ds[1],Ds[3],Ds[5]]:
 fi:
 if (S/Steps>=1/3) and (S/Steps<3) then 
  AS:=[As[1],As[2],As[3],As[4],As[5]]:
  BS:=[Bs[5],Bs[1],Bs[3],Bs[2],Bs[4]]:
  CS:=[Cs[5],Cs[4],Cs[3],Cs[2],Cs[1]]:
  DS:=[Ds[4],Ds[3],Ds[1],Ds[2],Ds[5]]:
 fi:
 if (S/Steps>=3) then 
  AS:=[As[1],As[2],As[3],As[4],As[5]]:
  CS:=[Cs[5],Cs[4],Cs[3],Cs[2],Cs[1]]:
  BS:=[Bs[4],Bs[2],Bs[3],Bs[1],Bs[5]]:
  DS:=[Ds[5],Ds[2],Ds[1],Ds[3],Ds[4]]:
 fi:
 Svals:=[Svals[],S/Steps]:
 Dsols:=[Dsols[],DS]:#[S/Steps,DS]]:
 Csols:=[Csols[],CS]:#[S/Steps,CS]]:
 Bsols:=[Bsols[],BS]:#[S/Steps,BS]]:
 Asols:=[Asols[],AS]:#[S/Steps,AS]]:
od:

#points:=[[],[],[],[],[]]:
#for i from 1 to 5 do
# PP[i]:=[]:    
# for Sext in Dsols do
#  PP[i]:=[PP[i][],[Sext[1],Sext[2][i]]]:
# od:
#od:

#P[1]:=pointplot({PP[1][]},symbol=circle,color=black):
#P[2]:=pointplot({PP[2][]},symbol=circle,color=blue):
#P[3]:=pointplot({PP[3][]},symbol=circle,color=red):
#P[4]:=pointplot({PP[4][]},symbol=circle,color=green):
#P[5]:=pointplot({PP[5][]},symbol=cross,color=black):
#display(P[1],P[2],P[3],P[4],P[5]);

lprint(`Svals:=`,Svals,`:`);
lprint(`Asols:=`,Asols,`:`);
lprint(`Bsols:=`,Bsols,`:`);
lprint(`Csols:=`,Csols,`:`);
lprint(`Dsols:=`,Dsols,`:`);

