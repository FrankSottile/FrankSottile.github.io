#makeClasses.maple
#
#   This prolongs valid words, checking if the prolonged word is valid.
#
interface(quiet=true):
read("procedures.maple"):
#
#  The data are stored in Equivalence_Classes[n][k], in files data/Classes.n.
#      This is a list of equivalence classes of chains of length n 
#      in which the numbers 1..k occur
#
#    Needs to have initialized a file Equivalence_Classes/Classes.1,
# which consists of the single line:
#
# Equivalence_Classes[1][2]:=[[[1,2]]]:  numberLetters:=[2]:
#
###################################################
verbose:=false:
#verbose:=true:
n:=5:
oldDataFile:=sprintf("Equivalence_Classes/Classes.%d",n-1):
newDataFile:=sprintf("Equivalence_Classes/Classes.%d",n):
statsFile:=sprintf("statistics.%d",n):
file:=fopen(newDataFile,WRITE):
fprintf(file,"# chains for n=%d. \n",n):
fclose(file):

file:=fopen(statsFile,WRITE):
fprintf(file,"#### Statistics for chains of length %d. ####\n",n):
fclose(file):
#   
#    
#  This loads the lists of equivalence classes of length n-1 sorted by 
#    the numbers 1..k which appear in them, Equivalence_Classes[n][k].
# It also reads the which numbers of letters k which occur.
#             
read(oldDataFile):
newNumberLetters:=[]:
for oldNumLett in numberLetters do 
 for oldClass in Equivalence_Classes[n-1][oldNumLett] do 
  for C in oldClass do
   for placea from 1 to 2*max(C[])+1 do
    #
    #  First find all possibilities for a
    #
    if type(placea, odd) then
      a:= trunc( (placea+1)/2 ):
      Ca:=map(promote, C, a): 
      numLetta := oldNumLett + 1:
     else
      a:=placea/2:
      Ca:=[ C[]]:
      numLetta := oldNumLett:
    end if:
    #
    #  Now find all possibilities for b
    #
    for placeb from 1 to 2*(numLetta-a)+1 do
     if type(placeb,odd) then
       b:=a+trunc( (placeb+1)/2 ):
       Cab := [ a,b, map(promote, Ca, b)[]]:
       numLetters := numLetta + 1:
      else
       b:= a + placeb/2:
       Cab:=[a,b,Ca[]]:
       numLetters := numLetta:
     end if:
     if verbose then  printf(" a=%d, b=%d, number of letters = %d \n",a,b,numLetters): end if:
     if verbose then  printf(" %a  %a\n",testEquivZero(Cab), Cab): end if:
     #
     #  We have the new chain, but do not yet know if it is equivalent to zero
     #  Only process further if the number of letters is less than 2*n, for we may separately 
     #  create all chains with k=2n number of letters
     #
     if numLetters<2*n then
      #
      # Check if the numLetters has been seen before
      #
      if member(numLetters,newNumberLetters) then
        #       
        #   We've seen this number of letters before.  Test for membership    
        #       
        if not member(Cab,NewChains[numLetters]) then
         pr := testEquivZero(Cab):
         if pr[1] then
          NewChains[numLetters] := NewChains[numLetters] union pr[2]:  
          New_Equivalence_Classes[numLetters] :=  New_Equivalence_Classes[numLetters] union {pr[2]}:
         end if:
        end if:
       else
        #   
        #  This is a new number of letters.  See if the chain is not zero 
        #   
        pr := testEquivZero(Cab):
        if pr[1] then
          NewChains[numLetters]:= pr[2]:      
          New_Equivalence_Classes[numLetters] := {pr[2]}:
          newNumberLetters:=[newNumberLetters[],numLetters]:
        end if:
      end if:
      #
      # Close the conditional on length < 2*n
      #
     end if:
     #
     #  Close the loop over all b
     #
    end do:
    if verbose then printf(" =============================== \n"): end if:
    #
    #  Close the loop over all a
    #
   end do:
   if verbose then printf(" %a \n",C): end if:
   #
   #  Close the loop over chains C on oldClass
   #
  end do: 
   #
   #  Close the loop over oldClass in Equivalence_Classes[n-1][oldNumLett]
   #
 end do: 
 #
 #  Print out all equivalence classes in chains in New_Equivalence_Classes[oldNumLett] if there are any.
 #
 if member(oldNumLett, newNumberLetters) then
  file:=fopen(newDataFile,APPEND):
  fprintf(file, "Equivalence_Classes[%d][%d]:=[\n",n,oldNumLett):
  for class in New_Equivalence_Classes[oldNumLett] do 
   fprintf(file,"["):
   for ind from 1 to nops(class)-1 do
    ch := op(ind,class):
    fprintf(file," %s,",wordPrint(ch)):
   end do:
   fprintf(file, " %s ],\n",wordPrint(op(nops(class),class))):
  end do:
  fprintf(file,"NULL]:\n"):
  fclose(file):
 end if: 
 #
 #  Statistics for chain generation
 #
 file:=fopen(statsFile,APPEND):
 if member(oldNumLett, newNumberLetters) then
   fprintf(file," There are %d chains and %d equivalence classes with %d letters.  This took %7.2f seconds\n",
     nops(NewChains[oldNumLett]), nops(New_Equivalence_Classes[oldNumLett]), oldNumLett, time()):
  else
   fprintf(file," number of Letters = %d time=%7.2f\n", oldNumLett,time()):
 end if:
 fclose(file):
 #
 #  Close the loop over oldNumLett in numberLetters
 #
end do:

New_Equivalence_Classes[2*n] := makeLong(n):
newNumberLetters:=[newNumberLetters[],2*n]:

newNumberLetters:=sort(newNumberLetters):

if verbose then printf("new numbers of letters = %a \n",newNumberLetters): end if:
for numLett in newNumberLetters do
 if verbose then printf(" new number of letters = %d\n",numLett): end if:
 
 if (not member(numLett, numberLetters)) then 
  file:=fopen(newDataFile,APPEND):
  fprintf(file, "Equivalence_Classes[%d][%d]:=[\n",n,numLett):
  for class in New_Equivalence_Classes[numLett] do 
   fprintf(file,"["):
   for ind from 1 to nops(class)-1 do
    fprintf(file," %s,",wordPrint(op(ind,class))):
   end do:
  fprintf(file, " %s ],\n",wordPrint(op(nops(class),class))):
  end do:
  fprintf(file,"NULL]:\n"):
  fclose(file):
 end if:
end do:

file:=fopen(newDataFile,APPEND):
fprintf(file,"numberLetters:=%a:\n",newNumberLetters):
fclose(file):

file:=fopen(statsFile,APPEND):
num:=0:
for numLett in newNumberLetters do
 if (numLett=2*n) then
   numCh:=n!*nops(New_Equivalence_Classes[2*n]): 
  else
   numCh:=nops(NewChains[numLett]):
  end if:
  if (not member(numLett, numberLetters)) then 
   fprintf(file," There are %d chains and %d equivalence classes with %d letters.\n",
       numCh, nops(New_Equivalence_Classes[numLett]), numLett):
  end if:
 num:=num+numCh:
end do:

fprintf(file,"There are %d chains of length %d.\n",num,n):
fprintf(file,"This computation took %4.2f seconds.\n",time()):
fprintf(file,"########################################################\n"):
fclose(file):
