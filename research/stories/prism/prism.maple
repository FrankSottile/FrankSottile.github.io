#prism.maple
#
# Tara Holm
# Frank Sottile
# 
# 26 October 2004
# College Station
#
############################################################ 
#
#  Here, we draw the chamber complex for the prism
#
#############################################################
interface(quiet=true):
with(plots):
with(plottools):
plotsetup(x11,plotoptions="width=3in,height=2.5in"):
macro(skyblue = COLOR(RGB, 0.200, 0.400, 1.00)):
###########################################################################
#
#  Rotates a list L through angle th
#
ROTATE := proc(L,th)
  local TH:
  TH:=th*Pi/180:
  return([cos(TH)*L[1]+sin(TH)*L[2],
         -sin(TH)*L[1]+cos(TH)*L[2],
          L[3]])
end proc:
##############################################################################
Rot:=proc(V,P,th)
#
#  Rotates the lists
#
 return([[ROTATE(V[1],th),ROTATE(V[2],th),ROTATE(V[3],th),
          ROTATE(V[4],th),ROTATE(V[5],th),ROTATE(V[6],th)],
         [ROTATE(P[1],th),ROTATE(P[2],th),ROTATE(P[3],th),
          ROTATE(P[4],th),ROTATE(P[5],th)]])
end proc:
##############################################################################
Tri:=proc(A,B,C,facecolor)
 local s,t,E:
 E:=[t*(s*A[1]+(1-s)*B[1])+(1-t)*C[1], 
     t*(s*A[2]+(1-s)*B[2])+(1-t)*C[2], 
     t*(s*A[3]+(1-s)*B[3])+(1-t)*C[3]]:
 return(plot3d(E, s=0..1, t=0..1, grid=[40,40], color=facecolor,style=PATCHNOGRID))
end proc:
##############################################################################
V:=[   #List of Vertices
 [0,-3,0],
 [6,-3,0],
 [0,-3,6],
 [0, 3,0],
 [6, 3,0],
 [0, 3,6]]:
P:=[    #list of internal points
 [2,-1,2],
 [3, 0,3],
 [0, 0,3],
 [3, 0,0],
 [2, 1,2]]:

for i from 1 to nops(V) do 
 V[i]:=[V[i][1]+V[i][3]/2-3, V[i][3]*sqrt(3)/2-sqrt(3), V[i][2]*3/2]:
end do:
for i from 1 to nops(P) do 
 P[i]:=[P[i][1]+P[i][3]/2-3, P[i][3]*sqrt(3)/2-sqrt(3), P[i][2]*3/2]:
end do:

#evalf(V[1]),evalf(V[2]),evalf(V[3]);quit;


Skeleton:=proc(V,P,th)
#
#   Makes the skeleton, rotating it through angle th
#
 local Pr, Vv, Pp:
 Pr:=Rot(V,P,th):
 Vv:=Pr[1]:  Pp:=Pr[2]:
 return([
  line(Vv[1], Vv[2], color=red, thickness=2, numpoints=2),
  line(Vv[2], Vv[3], color=red, thickness=2, numpoints=2),
  line(Vv[3], Vv[1], color=red, thickness=2, numpoints=2),
  line(Vv[4], Vv[5], color=red, thickness=2, numpoints=2),
  line(Vv[5], Vv[6], color=red, thickness=2, numpoints=2),
  line(Vv[6], Vv[4], color=red, thickness=2, numpoints=2),
  line(Vv[1], Vv[4], color=red, thickness=2, numpoints=2),
  line(Vv[2], Vv[5], color=red, thickness=2, numpoints=2),
  line(Vv[3], Vv[6], color=red, thickness=2, numpoints=2),
#
  line(Vv[1], Vv[5], color=black, thickness=1, numpoints=2),
  line(Vv[1], Vv[6], color=black, thickness=1, numpoints=2),
  line(Vv[2], Vv[4], color=black, thickness=1, numpoints=2),
  line(Vv[2], Vv[6], color=black, thickness=1, numpoints=2),
  line(Vv[3], Vv[5], color=black, thickness=1, numpoints=2),
  line(Vv[3], Vv[4], color=black, thickness=1, numpoints=2),
#
  line(Vv[1], Pp[2], color=black, thickness=1, numpoints=2),
  line(Vv[2], Pp[3], color=black, thickness=1, numpoints=2),
  line(Vv[3], Pp[4], color=black, thickness=1, numpoints=2),
  line(Vv[4], Pp[2], color=black, thickness=1, numpoints=2),
  line(Vv[5], Pp[3], color=black, thickness=1, numpoints=2),
  line(Vv[6], Pp[4], color=black, thickness=1, numpoints=2),

  line(Pp[2], Pp[3], color=black, thickness=1, numpoints=2),
  line(Pp[4], Pp[3], color=black, thickness=1, numpoints=2),
  line(Pp[2], Pp[4], color=black, thickness=1, numpoints=2)
#
#    The central polytope, a bipyramid
#
 ,polygon([Pp[1], Pp[2], Pp[3]], color=yellow, thickness=0)
 ,polygon([Pp[1], Pp[4], Pp[3]], color=yellow, thickness=0)
 ,polygon([Pp[1], Pp[4], Pp[2]], color=yellow, thickness=0)
 ,polygon([Pp[5], Pp[2], Pp[3]], color=yellow, thickness=0)
 ,polygon([Pp[5], Pp[4], Pp[3]], color=yellow, thickness=0)
 ,polygon([Pp[5], Pp[4], Pp[2]], color=yellow, thickness=0)
#
#    Some other ones
#
 ,polygon([Pp[1], Pp[2], Vv[3]], color=green, thickness=0)
 ,polygon([Pp[1], Pp[2], Vv[2]], color=green, thickness=0)
# ,polygon([Pp[1], Vv[3], Vv[2]], color=green, thickness=0)
 ,Tri(Pp[2], Vv[3], Vv[2],pink)

 ,polygon([Pp[1], Pp[3], Vv[3]], color=green, thickness=0)
 ,polygon([Pp[1], Pp[3], Vv[1]], color=green, thickness=0)
# ,polygon([Pp[1], Vv[3], Vv[1]], color=green, thickness=0)
 ,Tri(Pp[3], Vv[3], Vv[1],pink)

 ,polygon([Pp[1], Pp[4], Vv[2]], color=green, thickness=0)
 ,polygon([Pp[1], Pp[4], Vv[1]], color=green, thickness=0)
# ,polygon([Pp[1], Vv[2], Vv[1]], color=green, thickness=0)
 ,Tri(Pp[4], Vv[2], Vv[1],pink)
#
#    The top Tetrahedron
#
 ,polygon([Pp[5], Vv[4], Vv[5]], color=skyblue, thickness=0)
 ,polygon([Pp[5], Vv[6], Vv[5]], color=skyblue, thickness=0)
 ,polygon([Pp[5], Vv[4], Vv[6]], color=skyblue, thickness=0)
 ,polygon([Vv[5], Vv[4], Vv[6]], color=skyblue, thickness=0)
])
end proc:

DSeq:=[]:
N:=21:
for TH from 0 to (N-1) by 1 do 
 th:=120*TH/N:
 DSeq:=[op(DSeq),[Skeleton(V,P,th)]]:
end do:

#plotsetup(gif,plotoutput="A.gif",plotoptions=`height=800,width=520`):
plotsetup(gif,plotoutput="A.gif",plotoptions=`height=180,width=150`):

display(seq(display(op(DSeq[k]),scaling=CONSTRAINED),
   k=1..nops(DSeq)),scaling=CONSTRAINED,insequence=true
       ,orientation=[0,70]);
