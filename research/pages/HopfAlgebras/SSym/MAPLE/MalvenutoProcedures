#MalvenutoProcedures
#
# Frank Sottile
# Marcelo Aguiar
# 3 May 2001
# Amherst, MASS
#
########################################################################
#
#  This file contains procedures for computations in the 
#  Malvenuto-Reutentauer Hopf algebra, beginning with the known formulae
#  for the Fundamental basis.
#
#    Here, w is the input permutation in these procedures.
#  The basic data structure is a list of permutations, or of pairs consisting
#  of a coefficient and a permutation.   
#  This list of Lists represents a formal sum.
#
#########################################################################
#
#  Shuffle := This computes the shuffle product, returning a list of 
#              shuffles of 2 permutations
#  Ell := This computes the length of a permutation.
#  Covers := creates the set of covers above a permutation w
#  W0 := makes the longest element in the symmetric group of w
#  Interval := Creates the interval above w as a list of elements at different
#               ranks 
#  MakeMu := Given w, computes Mu[u], the Moebius function of the interval
#               [w,u] for all u above w in the symmetric group.
#  MakeMonom := Constructs the `monomial' function associated to a permutation
#                w, as a list of  [coeff, perm]
#  Combine := takes a long list of pairs of [coefficient, permutation], and 
#              `adds' them
#  MakeSum(L,X) := Converts a list L of pairs [coefficient, permutation] into a
#              formal sum of coeff*X_[perm]
#  Prod := Makes the shuffle product of two Monomial functions (w,v),
#           returning the answer in the F-basis
#  FtoM := Converts a list of pairs [coefficient, permutation] representing a
#            formal sum of F-functions into a list of pairs representing a
#            formal sum of M-functions.  This runs the subduction algorithm
#  Sort := sorts a list L of pairs [coeff,perm] by the length of the
#          permutation, and then lexicographgically within a rank
###########################################################################
# For the coproduct
#
#  The data structure for coproducts is a triple:
#     [ coefficient, permutation #1, permutation #2 ]
#
#  Split(w,k) := This procedure splits a permutation w at k and flattens the
#                   result. 
#  CombineCoprod(L) := Combines the terms in a coproduct and deletes terms
#                      with coefficient zero
#  Coproduct(w) := Computes the coproduct of RM_w in the RM-basis
#
######################################################################
Shuffle := proc(w,v)
 local n,m,shuffles,S,newperm,iw,iv,i;
 n:=nops(w):
 m:=nops(v):
 shuffles:=[]:
 for S in combinat[choose](n+m,m) do 
  newperm:=[]:
  iw:=0:
  iv:=0:
  for i from 1 to n+m do
   if member(i,S) then 
    iv:=iv+1:
    newperm:=[newperm[],n+v[iv]]:
   else
    iw:=iw+1:
    newperm:=[newperm[],w[iw]]:
   fi:
  od:
  shuffles:=[shuffles[],newperm]:
 od:
 shuffles
end:
#################################################
Ell := proc(w)
 local ell,n,i,j ;
 ell:=0:
 n := nops(w):
 if n<>1 then
  for i from 1 to n-1 do
   for j from i+1 to n do
    if w[i]>w[j] then ell:=ell+1 fi:
   od:
  od:
 fi:
 ell
end:
#################################################
Covers := proc(w)
 local covers,n,i,j,iw,ipw,perm ;
 covers:={}:
 n:=nops(w):
 for i from 1 to n-1 do
 #   This loop looks for covers
 #   The next loop checks where i, i+1 occur
  for j from 1 to n do
   if w[j]=i then iw:=j fi:
   if w[j]=i+1 then ipw:=j fi:
  od:
  #   Checks if we have a cover and adds it to the list
  if iw<ipw then 
   perm:=eval(w):
   perm[iw]:=i+1:
   perm[ipw]:=i:
   covers:=covers union {perm}:
  fi:
 od:
 covers
end:
#################################################
W0 := proc(w)
local n,w0,i;
 n:=nops(w):
 w0:=[]:
 for i from n to 1 by -1 do
  w0:=[w0[],i]:
 od:
 w0
end:
#################################################
Interval := proc(w)
#
# interval := i-th element is the set of elements in the interval of 
#             above w at rank i.
#
 local interval,n,l,lw,S,level,perm;
 interval :=[{w}]:
  n:=nops(w):
  lw:=Ell(w):
  l:=lw+1:
  while l<n*(n-1)/2 do
   S:=interval[l-lw]:
   level:={}:
   for perm in S do
    level := level union Covers(perm):
   od:
   interval:=[interval[],level]:
   l:=l+1:
  od:
 if w<>W0(w) then 
  interval:=[interval[],{W0(w)}]:
 fi:
 interval
end:
#################################################
MakeMu := proc(w)
#
# interval := i-th element is the set of elements in the interval of 
#             above w at rank i.
# below := Table recording what is below a given permutation in the interval
#           above w
#
 local interval,n,l,lw,S,level,perm,covers,below,u,w0,wtou,mu,j,Mu;
 interval :=[{w}]:
 n:=nops(w):
 lw:=Ell(w):
 l:=lw+1:
 while l<n*(n-1)/2 do
  S:=interval[l-lw]:
  level:={}:
  # Creates the next level in the interval
  for perm in S do
   covers := Covers(perm):
   # Fills in the table of permutations below
   for u in covers do
    if type(below[u],set) then 
     below[u]:=below[u] union {perm}:
    else
     below[u]:= {perm}:
    fi:
   od:
   level := level union covers:
  od:
  interval:=[interval[],level]:
  l:=l+1:
 od:
 w0:=W0(w):
#
 if w <> w0 then
  below[w0]:=interval[nops(interval)]:
  interval:= [interval[],{w0}]:
 fi:
 #
 #   Now we have created the interval and the table below
 #   Next Task: Compute the Moebius function
 Mu[w]:=1:
 for l from 2 to nops(interval) do
  for u in interval[l] do
   wtou:=below[u]:
   # Creates the set of permutations in [w,u)
   for j from l-1 to 2 by -1 do 
    for perm in (wtou intersect interval[j]) do
     wtou := wtou union below[perm]:
    od:
   od:
   mu:=0:
   for perm in wtou do
    mu:=mu-Mu[perm]:
   od:
   Mu[u]:=mu:
  od:
 od:
 Mu
end:
############################################
MakeMonom := proc(w)
 local mu,S,monom,u;
 monom :=[]:
 mu:=MakeMu(w):
 for S in Interval(w) do
  for u in S do
   if mu[u]<>0 then monom := [monom[],[mu[u],u]]: fi:
  od:
 od:
 monom
end:
############################################
Combine := proc(L)
local S,pair,collect,perm,collected;
 S:={}:
 for pair in L do
  S:= S union {pair[2]}:
 od:
 for perm in S do
  collect[perm]:=0:
 od:
 for pair in L do
  collect[pair[2]]:=collect[pair[2]]+pair[1]:
 od:
 collected:=[]:
 for perm in S do
  if collect[perm]<>0 then 
   collected:=[collected[],[collect[perm],perm]]:
  fi:
 od:
 collected
end:
########################################################################
MakeSum := proc(L,F)
local M, Msum, term;
 M := Sort(L):
 Msum:=0:
 for term in L do 
  Msum := Msum + term[1]*F[term[2][]]:
 od:
 Msum
end:
##########################################################
Prod :=proc(w,v)
local Monw, Monv, Lsum, termw, termv, L, perm; 
 Monw:=MakeMonom(w);
 Monv:=MakeMonom(v);
 if w=[] or v=[] then 
  if w=[] then Lsum:=Monv: fi:
  if v=[] then Lsum:=Monw: fi:
 else 
 #   Lsum will be the list recording the shuffle product of the monomial functions
  Lsum:=[]:
  for termw in Monw do
   for termv in Monv do
    L:=Shuffle(termw[2],termv[2]):
    for perm in L do
     Lsum:=[Lsum[],[termw[1]*termv[1],perm]]:
    od:
   od:
  od:
 fi:
 Lsum
end:
##############################################
FtoM := proc(L)
local N,n, minEll, i, place, M, New;
#
#  Find the term in L of least length = minEll in position place.
#
 n:=nops(L[1][2]):
 N:=eval(L):
 New:=[]:
 while N<>[] do
  minEll:=n*(n-1)/2+1:
  for i from 1 to nops(N) do
   if Ell(N[i][2])<minEll then 
    minEll := Ell(N[i][2]):
    place := i:
   fi:
  od:
  New := [New[],N[place]]:
  M := MakeMonom(N[place][2]):
  for i from 1 to nops(M) do
   M[i][1]:=-N[place][1]*M[i][1]:
  od:
  N:=Combine([N[],M[]]):
 od:
 New
end:
#################################################
Sort := proc(L)
local sorted, ells, j, Try, ell, Fit, snug, i, A, b;
 sorted:=[L[1]]:
 ells:=[Ell(L[1][2])]:
 for j from 2 to nops(L) do
  Try:=L[j]:
  ell:=Ell(Try[2]):
  Fit:=j:
  snug:=evalb(false):
  while not(snug) do
   if ells[Fit-1]>ell then
     Fit:=Fit-1:
    elif ells[Fit-1]<ell then snug:=true:
    else
     i:=1:
     while (Try[2][i]=sorted[Fit-1][2][i] and i<nops(Try[2])) do
      i:=i+1:
     od:
     snug:=evalb(Try[2][i]>sorted[Fit-1][2][i]):
     if not(snug) then Fit:=Fit-1: fi:
   fi:
   if Fit=1 then snug:=evalb(true): fi:
  od:
  for i from Fit to j-1 do 
   A:=sorted[i]:
   sorted[i]:=Try:
   Try:=A:
   b:=ells[i]:
   ells[i]:=ell:
   ell:=b:
  od:
   sorted:=[sorted[],Try]: 
   ells:=[ells[],ell]:
 od:
 sorted
end:
#####################################################################
#
##
###   Coproducts !!!!!!!!!!
##
#
##################################################
Split := proc(w,k)
local v1,v2,x,i,j,Eq:
 v1:=w[1..k]:
 v2:=w[(k+1)..nops(w)]:
 x:=sort(v1):
 for i from 1 to k do
  Eq:=false:
  j:=1:
  while Eq=false do
   if v1[i]=x[j] then 
    Eq:=true:
    v1[i]:=j:
   fi:
   j:=j+1:
  od:
 od:
 x:=sort(v2):
 for i from 1 to nops(w)-k do
  Eq:=false:
  j:=1:
  while Eq=false do
   if v2[i]=x[j] then 
    Eq:=true:
    v2[i]:=j:
   fi:
   j:=j+1:
  od:
 od:
 [v1,v2]
end:
#####################################
CombineCoprod := proc(L)
local S,triple,pair,Coeffs,collected;
 S:={}:
 for triple in L do
  S:= S union {[triple[2],triple[3]]}:
 od:
 for pair in S do
  Coeffs[pair]:=0:
 od:
 for triple in L do
  Coeffs[[triple[2],triple[3]]]:=Coeffs[[triple[2],triple[3]]]+triple[1]:
 od:
 collected:=[]:
 for pair in S do
  if Coeffs[pair]<>0 then 
   collected:=[collected[],[Coeffs[pair],pair[]]]:
  fi:
 od:
 collected
end:
#############################################
Coproduct := proc(w)
local L, coprod, k, Lk, pair, minEll, i, place, ML, term1, term2; 
 L:=MakeMonom(w):
 coprod:=[[1,[],w]]:
 for k from 1 to nops(w)-1 do 
  ####          Creates the k, n-k piece of the coproduct, as a list
  Lk:=[]:
  for pair in L do
   Lk:=[Lk[],[pair[1],Split(pair[2],k)[]]]:
  od:
  Lk:=CombineCoprod(Lk):
  ####         Need to apply the subduction algorithm
  while Lk<>[] do
   ####   Step 1: find a leading term
   minEll:=nops(w)^2:
   for i from 1 to nops(Lk) do
    if minEll>(Ell(Lk[i][2])+Ell(Lk[i][3])) then 
     minEll:=Ell(Lk[i][2])+Ell(Lk[i][3]):
     place := i:
    fi:
   od:
   #########################   Put the new term in the sum
   coprod:=[coprod[],Lk[place]]:
   #########################   Write out the new term as a tensor in the F-basis
   ML:=[]:
   for term1 in MakeMonom(Lk[place][2]) do
    for term2 in MakeMonom(Lk[place][3]) do
     ML:=[ML[],[-Lk[place][1]*term1[1]*term2[1],term1[2],term2[2]]]:
    od:
   od:
   #########    Subtract the resulting pair of monomial functions
   Lk:=CombineCoprod([Lk[],ML[]]):
  od:
 od: 
 [coprod[],[1,w,[]]]
end:
#################################################################
