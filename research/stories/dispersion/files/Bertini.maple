#Bertini.maple
#
# This maple file creates the input file for the two Bertini computations
#   that show the discriminant variety in the P^8 of edge parameters is a
#   hypersurface.
#
#  The weights (coupling constants?) for the edges are a[1]....a[9] 
#  We use t for the eigenvalue, and z[1], z[2] for the variables
#
#############################################################################
with(LinearAlgebra):

#
#  The equations are homogeneous in the coupling constants
#
#  We may optionally deghomogenize them.  
#a[5]:=1:
#  alpha_5 is the constant for the edge betwen the two vertices.
#
# This the transition matrix
#
Aa := Matrix([
   [2*a[1]+a[2]+a[3]+2*a[4]+a[5]+a[6]+a[9] - a[1]*(z[2]+z[2]^(-1)) - a[4]*(z[1]+z[1]^(-1)),
   -(a[2]*z[2] + a[6]*z[2]^(-1) + a[3]*z[1] + a[9]*z[1]^(-1) + a[5])],
  [-(a[2]*z[2]^(-1) + a[6]*z[2] + a[3]*z[1]^(-1) + a[9]*z[1] + a[5]), 
   a[2]+a[3]+a[5]+a[6]+2*a[7]+2*a[8]+a[9] - a[7]*(z[2]+z[2]^(-1)) - a[8]*(z[1]+z[1]^(-1))]]):
#
#  As well as its trace and Determinant
#
TA:=Trace(Aa):
DA:=Determinant(Aa):
#
#  Because the variables z[i] occur to integer powers, we need to capture the numerators
#
#  This is the numertor of the characteristic polynomial, defining the eigenvalues t
#
sCP:=numer(t^2 - t*TA + DA):

#
#  We need the partial derivatives of the determinant
#
DA1:=expand(simplify(diff(DA,z[1]))):
DA2:=expand(simplify(diff(DA,z[2]))):
#
#  If we take the partial derivative of the eigenvalue using implicit partial derivative
#   of the characteristic polynomial, the numerator of those partial derivatives are
#   the expressions below
#
sN1:=numer(t*diff(TA,z[1]) - DA1):
sN2:=numer(t*diff(TA,z[2]) - DA2):
#
#  Finally, we compute the entries of the hessian matrix
#
DA11:=expand(simplify(diff(DA,z[1],z[1]))):
DA21:=expand(simplify(diff(DA,z[2],z[1]))):
DA22:=expand(simplify(diff(DA,z[2],z[2]))):
#
#  ....then the numerator of the Hessian determininat
#
Hess:=(numer(t*diff(TA,z[1],z[1])-DA11)*numer(t*diff(TA,z[2],z[2])-DA22)
         -  numer(t*diff(TA,z[1],z[2])-DA21)^2):

##########################################################################################
#
#   This creates the input file for the Bertini Computation.
#   TrackType = 1 means compute a numerical irreducible decomposition
#   We later will need to tune parameters to get a good run in the two cases of
#     homogeneous in a[i] and dehomogenized.
# 
VARS:=convert(indets(sCP),list):
#
#   This file will need to be renamed before running Bertini on it.
#
file:=fopen("Bertini_input",WRITE):
fprintf(file,"%% Bertini input file for project about degenerate eigenvalues with Ngoc Do and Peter Kuchment\n\n"):
fprintf(file,"CONFIG\n"):
fprintf(file,"  TrackType:1;\n"):
fprintf(file,"END;\n"):

fprintf(file,"INPUT\n"):
fprintf(file,"   variable_group %A",VARS[1]):
 for i from 2 to nops(VARS) do fprintf(file,",%A",VARS[i]): end do:
fprintf(file,";\n"):
fprintf(file,"   function f1,f2,f3,f4;\n"):
#
#  We use subfunctions for the entries of the Hessian matrix to keep the input file
#    reasonably-sized.
#
fprintf(file,"\n%%%% SubFunctions \n\n"):
fprintf(file,"  S11 = %A;\n",numer(t*diff(TA,z[1],z[1])-DA11)):
fprintf(file,"  S22 = %A;\n",numer(t*diff(TA,z[2],z[2])-DA22)):
fprintf(file,"  S21 = %A;\n",numer(t*diff(TA,z[2],z[1])-DA21)):
fprintf(file,"\n%%%% Functions\n\n"):
fprintf(file,"  f1 = %A;\n",sCP):
fprintf(file,"  f2 = %A;\n",sN1):
fprintf(file,"  f3 = %A;\n",sN2):
fprintf(file,"  f4 = S11*S22 - S21*S21;\n"):
fprintf(file,"END;\n"):




fclose(file):
quit;
