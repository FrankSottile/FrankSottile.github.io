#compilation.maple
#		Contains data from Spring 1997 search for reality of
#		feedback laws.
interface(quiet=true): 
#
#	This Maple script contains the data from a search done to 
#	attempt to determine how common it is for a 
#	`transfer function to be not controllable by real data'
#	
#	It is written up more fully in Search.description
#
#	In short, we generated many (500) different transfer functions
#	with integral polynomial entries for the m=2, p=4 case, and for
#	each, determined the number of real and complex feedback laws for 
#	a number (25 or 50) of different 8-tuples of real (integral) poles.
#	In all 15,000 tests were made.
#
#	This was accomplished by computing an elimination Gr\"obner basis
#	for each of the resulting 15,000 polynomial systems.   Then, for 
#	each eliminant, the real root routine of Maple determined the 
#	number of real roots, hence the number of real feedback laws.
#
#	The results are displayed below in 8-tuples whose (i+1)st component
#	is the frequency of the systems with 2*i real feedback laws.
#
#     Total          
#                 [23, 804, 3370, 5345, 3854, 1325, 272, 7]
#
#	Frequency, (%)
#
#                [.15, 5.4, 22.5, 35.6, 25.7, 8.8, 1.8, .047]
#
#            
#	We may conclude from this that it is quite unlikely to find
#	a system that is not controllable by real data, or one for which
#	all feedback laws are real.
#
#	- Frank Sottile
#	  MSRI
#	  26 May, 1997.
#
#########################################################################

with(linalg): 
Total:=vector([0,0,0,0,0,0,0,0]):
###################################################
#
#	First 50 transfer functions x 25 pole sets
#
###################################################
numroots:= matrix([
[4,6,10,6,12,6,6,4,4,4,8,10,4,6,6,8,4,4,4,6,4,8,6,10,4],
[6,8,10,10,6,8,4,10,6,4,6,6,10,10,8,6,6,8,6,10,10,10,10,6,6],
[2,2,4,2,2,4,6,8,8,4,8,2,6,2,6,4,8,2,6,8,6,4,4,2,4],
[10,8,8,4,8,4,10,8,6,8,8,4,8,6,4,8,12,10,6,6,8,8,4,8,6],
[4,8,2,8,8,8,8,8,10,4,8,8,8,8,8,2,6,8,8,8,8,4,6,6,10],
[4,4,8,6,4,4,8,6,6,4,4,4,4,4,4,4,4,2,6,6,4,4,4,6,4],
[8,14,6,8,10,6,6,8,6,8,6,6,6,12,6,6,6,10,6,6,6,8,6,8,8],
[4,8,6,6,8,8,4,8,4,4,6,6,6,6,8,6,6,8,4,8,6,6,6,6,6],
[8,4,6,8,8,10,6,8,10,6,8,4,8,10,6,4,12,12,4,6,6,6,8,10,10],
[4,8,4,4,4,6,4,4,4,4,4,4,4,6,4,6,6,4,6,4,6,4,4,6,4],
[4,4,2,6,4,6,2,6,4,6,6,4,4,2,2,2,6,4,4,2,4,6,4,2,6],
[6,4,6,6,6,8,6,6,6,6,6,6,6,6,6,8,8,6,6,6,6,6,8,6,6],
[8,4,8,12,6,6,8,8,10,8,8,8,10,10,6,8,4,8,8,8,8,8,8,8,6],
[4,6,8,4,4,4,6,6,4,6,4,4,6,6,4,6,12,4,4,6,6,4,4,6,6],
[4,6,2,4,6,4,2,8,4,4,6,2,2,6,6,2,6,4,8,6,2,4,8,4,8],
[6,6,8,8,8,6,6,6,8,6,6,8,6,6,6,6,8,6,6,6,6,6,6,10,6],
[6,8,8,8,8,6,6,8,6,8,8,4,6,8,6,8,10,8,8,8,6,8,6,6,6],
[10,8,14,6,8,8,8,8,8,10,8,10,8,8,8,8,8,10,8,8,10,6,8,8,6],
[4,6,2,4,6,4,2,8,4,4,6,2,2,6,6,2,6,4,8,6,2,4,8,4,8],
[6,10,6,6,8,6,6,10,6,8,8,4,6,6,8,4,6,6,6,8,8,6,6,6,6],
[4,6,4,6,4,4,4,6,6,8,6,8,4,4,2,4,4,6,6,6,4,4,4,6,2],
[4,6,4,6,4,4,4,6,6,8,6,8,4,4,2,4,4,6,6,6,4,4,4,6,2],
[8,8,12,8,6,8,6,8,6,2,10,8,4,4,8,8,6,10,8,6,10,6,8,4,4],
[6,4,4,4,6,2,4,4,6,8,6,6,4,6,4,4,4,6,4,6,4,6,6,4,8],
[4,4,10,10,6,6,6,8,8,8,4,8,6,6,8,4,8,8,6,8,8,6,8,4,6],
[8,8,8,8,6,10,8,8,6,4,8,6,4,6,12,8,6,6,8,6,10,6,10,6,6],
[4,2,6,6,4,6,8,4,8,6,4,6,8,6,8,6,4,4,6,8,8,10,2,8,6],
[4,6,4,6,4,6,4,4,6,6,4,4,4,4,4,6,4,4,6,6,6,4,6,6,6],
[8,8,10,10,10,8,6,8,8,8,10,8,8,8,10,10,10,10,8,8,12,8,10,12,10],
[8,8,6,10,8,6,6,10,10,8,8,8,6,8,10,6,6,6,8,8,12,6,6,10,6],
[6,4,4,4,4,6,4,6,6,6,6,4,4,4,6,4,6,6,6,6,4,4,6,8,6],
[6,4,6,8,6,10,8,6,4,8,6,8,6,10,8,6,6,6,8,4,8,8,8,8,6],
[8,8,6,6,6,6,6,6,4,6,4,4,2,6,2,4,6,6,4,4,6,6,6,6,6],
[6,6,6,6,6,6,6,6,8,8,8,8,6,8,8,4,6,4,8,6,8,6,6,6,6],
[10,8,8,6,6,8,6,6,4,6,10,6,4,8,8,6,8,4,4,4,6,8,8,8,8],
[8,6,10,8,8,6,10,10,8,8,8,8,10,10,10,6,4,8,8,8,6,8,8,8,10],
[6,8,10,10,8,8,10,6,10,12,8,6,6,8,8,10,6,8,8,6,8,8,10,8,8],
[4,2,4,2,4,6,4,4,4,4,4,4,2,4,4,4,4,6,2,4,4,4,4,2,4],
[8,8,8,10,8,8,6,8,6,6,6,8,8,6,8,6,6,6,6,6,6,8,10,8,8],
[10,6,10,6,4,8,4,4,6,6,6,8,6,4,4,10,6,6,4,10,4,8,8,8,2],
[6,6,8,8,6,8,6,8,6,6,8,6,6,10,6,4,6,6,6,10,8,10,8,8,8],
[6,6,6,6,6,6,8,6,6,6,6,6,6,8,8,10,6,6,6,6,6,6,8,10,8],
[8,4,4,8,10,8,10,10,6,8,10,8,6,10,8,8,10,6,4,14,10,10,12,6,10],
[6,6,6,4,4,6,6,4,6,6,6,6,4,6,6,6,6,6,6,8,6,6,6,8,4],
[4,6,2,6,4,6,6,6,4,8,4,6,8,4,8,4,4,6,4,6,8,6,6,4,6],
[8,8,4,6,8,6,6,6,6,6,6,8,6,8,6,6,6,6,6,6,6,8,10,8,6],
[8,4,6,8,10,10,4,4,6,8,4,10,6,10,10,10,6,10,8,6,4,10,8,8,10],
[8,4,8,10,10,6,8,12,10,2,8,4,6,4,6,6,12,8,6,6,2,12,8,8,6],
[6,4,2,6,8,2,4,6,8,6,4,8,4,4,6,6,8,6,4,6,8,6,10,6,8],
[6,6,8,8,6,6,12,10,8,6,10,6,6,10,8,8,6,10,6,6,6,8,6,8,8]
]):


num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):
############################################################
#
#	Second 50  transfer functions x 25 pole sets
#
############################################################
numroots:= matrix([
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
[6,6,4,6,6,6,6,6,6,6,6,6,6,6,6,8,6,6,6,6,8,6,6,8,6],
[8,6,6,6,8,8,6,8,6,6,8,6,6,6,8,6,8,4,8,6,4,8,6,6,8],
[4,4,4,4,4,4,6,6,4,4,6,6,6,6,4,4,4,6,4,4,4,4,6,4,4],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[8,8,8,8,10,8,10,6,8,8,8,8,8,8,6,8,10,10,8,8,10,8,6,6,6],
[4,4,6,6,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,6,4,4,4,4,4],
[8,8,8,8,8,6,8,8,6,8,8,8,8,8,6,6,8,8,8,8,8,6,6,8,8],
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
[10,12,10,12,10,12,10,12,10,10,12,10,12,12,12,12,10,12,12,10,10,12,12,12,10],
[6,6,6,8,6,6,8,6,6,8,4,8,6,8,6,8,6,6,8,8,6,4,6,6,4],
[10,8,8,8,8,12,10,8,10,10,8,8,8,8,12,8,10,8,10,8,8,10,8,10,10],
[8,8,8,8,8,8,8,10,10,8,8,8,8,10,8,10,10,8,8,8,8,8,8,8,8],
[8,10,8,10,8,8,10,10,10,8,8,10,10,8,8,8,10,10,8,10,8,12,8,8,10],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,6,6,6,6,4],
[8,4,4,4,4,8,4,8,4,4,8,4,8,8,6,4,4,4,4,8,8,8,6,4,4],
[4,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4,4,4],
[8,8,6,8,8,8,6,8,8,8,6,8,8,8,8,8,6,8,8,8,8,8,8,8,8],
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
[8,8,8,10,10,12,8,10,8,10,8,12,8,8,10,8,8,10,10,8,12,12,10,8,10],
[6,6,6,6,8,6,6,6,6,6,8,6,8,6,6,6,6,8,8,8,8,6,8,8,6],
[6,6,6,8,8,6,6,6,6,4,10,6,10,6,6,10,6,8,10,6,8,6,6,2,6],
[6,6,4,8,6,8,6,6,8,8,8,8,8,8,6,6,6,8,6,6,6,8,8,6,6],
[8,6,8,6,6,6,8,6,6,6,8,6,6,8,6,8,8,6,6,6,6,6,8,6,8],
[10,10,8,8,10,10,8,10,10,12,8,6,10,8,10,10,8,8,8,8,10,10,8,10,6],
[6,4,4,6,4,6,6,6,4,6,6,6,4,6,6,4,4,4,4,4,4,4,4,6,4],
[10,8,10,8,8,6,8,8,10,8,6,8,10,6,8,8,8,10,10,8,8,8,6,8,8],
[6,4,6,6,6,6,6,6,6,6,6,6,4,6,6,6,6,6,6,6,4,6,6,6,6],
[6,8,6,8,8,8,8,8,8,8,8,8,8,8,10,8,10,8,6,8,8,6,8,10,6],
[6,6,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,8,4,8,4,4,6,4,4],
[6,6,6,8,4,6,6,6,4,4,4,4,6,4,6,8,4,10,4,8,6,4,6,6,4],
[6,6,6,6,4,6,6,6,6,6,6,6,6,6,6,4,4,6,6,6,6,4,6,6,6],
[2,2,2,4,2,2,4,6,2,6,2,6,4,4,2,2,2,4,4,2,2,4,2,6,2],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,6,6,6,6,6,6],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,6,8,6,6,6,8,6,6,6,6,6,8,6,6,6,6,6,6,6,6,6,6,6],
[8,6,8,8,6,8,8,6,8,6,8,6,8,6,8,6,8,8,8,8,6,8,6,8,8],
[8,8,8,8,12,8,8,8,8,8,8,8,8,6,10,12,8,8,8,8,8,10,10,8,8],
[4,6,4,4,6,4,6,6,6,6,4,6,4,6,6,4,4,4,6,6,6,4,4,4,4],
[10,10,10,8,10,10,10,10,10,8,10,8,10,10,10,10,10,10,10,10,10,8,10,10,10],
[8,4,8,4,6,6,6,8,4,6,4,6,6,6,8,6,4,4,6,6,6,6,6,6,6],
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
[4,4,6,4,6,4,4,4,4,4,4,4,6,4,6,4,4,4,4,4,4,4,4,4,4],
[2,2,2,2,2,2,2,2,2,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[6,4,6,4,2,4,4,4,4,6,6,2,4,6,4,4,4,4,4,4,4,6,4,4,4],
[8,8,14,8,10,8,10,10,10,10,10,8,10,6,8,6,6,10,10,6,14,10,10,14,10],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[8,8,6,8,6,8,8,6,8,8,8,8,8,8,8,8,6,6,6,8,6,8,6,8,8],
[4,6,4,6,6,4,6,6,4,6,4,6,4,6,4,6,4,4,6,6,4,6,4,4,4]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):
############################################################
#
#	Third 50  transfer functions x 25 pole sets
#
############################################################
numroots:= matrix([
[8,8,8,6,8,6,10,8,8,8,10,8,8,10,6,8,8,10,8,8,8,8,10,6,12],
[8,4,8,8,8,8,8,8,8,10,8,4,8,8,4,4,2,8,8,8,8,4,8,6,4],
[6,4,6,4,6,4,4,4,2,4,4,4,4,4,4,4,6,2,2,4,4,4,4,4,6],
[4,2,4,2,4,2,4,4,2,4,2,6,2,4,6,6,4,2,6,2,2,4,2,6,2],
[8,6,6,6,4,6,6,6,6,4,4,4,6,6,6,8,4,4,4,6,6,6,4,4,4],
[6,2,6,4,4,4,2,8,2,2,4,6,8,2,4,6,4,4,2,4,2,2,6,4,2],
[4,4,6,4,6,4,4,4,4,6,4,6,4,4,8,6,6,4,4,2,6,6,6,6,6],
[8,4,8,4,4,8,10,6,4,6,4,4,6,4,6,8,8,4,4,8,6,4,4,6,4],
[6,6,10,6,6,6,6,6,6,6,8,6,8,6,8,8,8,8,6,6,6,6,8,6,6],
[10,10,10,10,10,10,8,8,10,10,10,6,8,6,6,6,10,10,10,8,10,10,10,4,10],
[8,8,8,6,6,8,6,10,4,6,8,8,8,8,8,6,6,6,6,8,8,8,6,6,8],
[6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,2,6,6,6,6,6,6,6,6,6],
[8,10,8,8,8,8,8,8,8,8,10,8,10,8,8,10,12,12,6,12,6,8,8,8,8],
[8,6,8,4,8,8,8,4,8,8,6,6,4,6,8,4,8,6,6,8,4,8,8,6,8],
[8,8,8,8,8,8,8,10,8,6,6,8,8,8,8,8,6,8,6,8,8,8,8,8,10],
[6,6,4,4,6,6,4,6,6,6,4,6,6,4,4,8,6,6,6,6,4,4,6,4,4],
[10,8,8,8,6,6,8,8,10,6,10,10,8,8,10,6,10,10,8,8,10,8,10,8,8],
[4,6,6,6,8,6,6,6,6,6,4,6,6,6,6,6,6,6,6,6,6,6,6,4,6],
[6,8,8,10,4,6,8,8,8,6,8,10,6,6,6,4,8,8,10,6,6,8,6,8,8],
[2,8,2,6,10,4,6,6,6,6,2,2,6,4,6,10,6,4,4,6,2,6,4,6,6],
[6,4,4,4,4,4,4,2,4,6,4,4,6,4,4,4,4,4,4,8,6,4,4,4,8],
[6,6,6,4,6,4,8,4,6,6,6,6,6,6,6,6,6,4,6,4,6,6,6,6,6],
[8,8,10,8,8,8,10,8,8,8,10,10,6,4,8,10,4,8,10,8,8,6,8,10,6],
[6,6,6,6,6,6,6,4,4,4,6,4,6,6,6,6,6,6,6,6,4,6,6,6,6],
[4,6,6,6,6,4,8,8,4,6,10,4,4,6,4,4,6,6,8,4,6,8,6,6,6],
[6,6,4,6,4,6,6,8,6,4,6,6,4,6,8,6,6,6,6,6,4,6,6,6,8],
[8,6,6,4,6,8,4,4,8,8,6,4,2,8,8,10,6,6,6,4,8,6,2,4,6],
[6,8,6,8,6,6,8,10,10,6,6,6,6,8,8,8,4,8,6,8,10,6,10,8,8],
[6,6,8,6,8,8,10,10,6,6,6,8,6,6,6,10,10,6,8,6,8,8,8,8,6],
[4,4,4,4,4,6,4,6,6,4,6,6,8,6,4,6,6,6,4,8,6,6,6,8,6],
[6,6,6,4,8,8,8,6,8,8,6,10,6,8,4,6,8,8,6,6,6,6,6,8,8],
[8,10,8,8,6,6,10,6,8,10,8,6,4,8,4,4,8,6,6,8,2,6,6,6,8],
[4,6,8,8,4,2,8,4,4,6,8,8,6,6,2,8,4,6,8,6,6,6,8,8,8],
[10,8,10,10,10,10,10,10,10,8,8,8,8,8,10,10,10,10,8,8,8,8,10,8,6],
[6,6,8,8,10,8,10,8,12,8,10,8,8,8,10,6,6,10,8,6,8,8,8,8,6],
[10,4,10,10,6,10,6,6,6,8,6,10,6,6,6,8,8,4,8,6,6,6,4,6,6],
[4,4,8,4,8,10,6,4,6,8,6,8,8,4,6,8,6,6,6,6,6,6,6,12,8],
[8,8,8,8,6,8,8,8,8,8,8,6,6,4,4,8,6,8,8,8,8,6,8,8,6],
[8, 12,6,6,6,10,10,6,6,6,6,12,6,8,4,6,8,10,12,4,6,6,6,6,10],
[8,4,4,6,6,8,8,8,6,6,6,6,4,6,4,6,8,6,4,6,6,6,4,6,6],
[8,8,8,2,8,6,8,6,6,4,6,6,6,4,2,2,4,6,6,6,4,2,6,6,2],
[6,4,4,4,4,2,6,6,4,6,4,2,6,6,6,6,4,6,4,6,6,4,6,6,4],
[12,12,8,8,12,10,12,8,8,10,8,8,12,10,8,10,8,10,12,8,12,8,8,10,10],
[8,10,6,8,8,6,6,10,6,8,2,6,8,10,10,8,6,8,6,10,10,6,10,10,6],
[8,8,6,10,10,2,6,6,8,6,6,4,4,4,4,4,8,10,4,8,10,4,4,10,4],
[6,8,8,8,8,6,4,6,6,6,6,4,8,8,8,8,6,8,6,6,8,8,6,8,8],
[2,2,2,2,4,4,8,2,8,4,4,2,2,4,4,2,2,4,4,2,2,6,4,6,8],
[8,6,4,8,8,8,4,4,6,8,4,4,4,6,8,6,4,8,8,6,6,8,8,10,8],
[4,8,6,6,6,6,6,4,8,6,4,6,6,4,6,8,6,6,6,6,6,6,6,4,6],
[6,6,6,4,6,4,4,6,6,6,6,6,6,6,6,6,4,6,6,6,4,6,6,6,6]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):
##########################################################
#
#	Fourth 50  transfer functions x 25 pole sets
#
##########################################################

numroots:= matrix([
[6,6,6,2,6,4,2,6,2,2,6,6,6,2,4,2,4,6,6,4,2,2,4,6,4],
[8,8,8,6,4,8,8,8,6,6,8,8,6,8,4,8,8,8,8,8,8,8,8,6,8],
[4,4,4,2,4,4,4,2,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4],
[8,8,8,6,6,10,10,6,6,8,8,6,8,8,6,8,6,8,10,8,8,8,8,8,8],
[6,6,4,6,4,8,8,4,6,4,8,6,8,6,6,6,8,4,4,6,6,6,6,8,6],
[4,4,4,6,6,4,4,4,6,6,4,4,6,4,6,6,4,4,4,4,4,4,4,4,4],
[6,6,6,6,6,8,6,6,6,6,8,6,6,6,6,6,4,6,6,6,8,6,6,6,6],
[6,6,6,6,4,6,4,4,4,6,6,4,6,6,6,6,6,6,4,6,6,4,6,6,4],
[2,8,4,6,6,6,6,6,6,2,4,4,4,4,8,2,4,6,6,2,4,4,8,6,6],
[2,6,6,2,6,4,6,4,4,6,8,8,6,4,8,6,4,6,4,4,2,4,6,4,6],
[6,4,6,6,10,8,4,6,6,10,6,4,10,10,10,6,10,6,8,10,8,10,6,10,6],
[4,6,6,6,6,4,4,6,6,6,8,6,4,6,4,6,6,6,6,4,6,6,6,6,6],
[4,6,4,6,4,6,4,6,6,6,8,4,4,4,6,4,4,4,6,6,6,6,4,4,6],
[4,4,6,4,4,8,4,6,8,2,6,6,6,6,4,4,4,4,4,4,4,4,6,6,6],
[4,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,6,4,4],
[6,6,6,6,6,4,4,4,6,6,4,6,6,4,4,4,6,8,4,2,4,8,4,4,6],
[4,4,2,8,2,4,8,2,2,4,2,4,4,6,2,4,8,2,4,2,6,6,2,2,2],
[4,6,6,6,6,6,6,6,4,6,6,6,8,6,6,6,6,6,6,4,6,6,6,6,6],
[8,6,8,8,8,6,8,6,6,6,8,6,4,6,8,6,8,6,6,8,6,6,8,8,6],
[6,6,6,6,8,8,6,8,6,8,6,6,6,8,6,8,8,8,6,6,8,6,6,8,6],
[4,6,6,6,4,6,4,4,6,4,6,6,4,6,6,6,6,4,6,6,4,4,4,4,6],
[10,10,8,10,12,12,12,10,12,10,10,12,12,10,10,12,10,12,10,12,10,12,10,10,10],
[2,6,6,6,6,6,4,8,2,6,8,4,6,6,6,6,6,6,6,6,2,6,4,2,4],
[6,6,6,8,8,8,8,8,8,8,6,10,8,8,8,6,8,6,8,8,8,6,8,6,6],
[4,6,8,4,4,4,6,8,4,4,8,4,4,4,8,8,8,8,8,10,4,6,8,8,6],
[4,2,4,4,4,4,2,2,2,4,2,4,4,4,4,4,4,4,4,4,2,2,2,6,2],
[8,8,10,6,10,10,8,8,8,10,8,10,8,6,8,10,8,8,8,10,10,10,8,8,10],
[8,4,4,6,2,8,4,4,8,2,2,4,8,8,4,2,8,4,6,8,2,8,6,2,6],
[10,2,2,4,8,2,2,2,2,4,4,2,4,10,2,2,2,4,2,4,4,4,4,4,2],
[6,6,6,4,4,4,4,6,6,6,10,6,6,4,4,4,4,6,4,4,6,4,4,8,4],
[6,4,6,6,6,6,6,6,4,6,6,6,6,6,4,4,6,6,6,6,4,4,4,6,4],
[8,6,6,8,8,8,6,6,6,8,8,6,8,6,6,8,6,8,6,6,8,8,8,6,8],
[6,6,8,8,8,8,6,6,8,6,6,6,8,8,6,8,8,8,6,8,6,6,6,8,8],
[6,8,6,6,12,12,4,6,6,4,10,10,6,10,6,6,6,6,8,8,8,8,8,12,8],
[4,6,4,6,6,6,8,4,6,6,4,4,4,6,4,6,4,4,4,4,4,6,6,6,6],
[6,8,8,6,4,6,6,6,8,4,6,6,6,8,6,6,6,8,6,6,8,6,4,6,6],
[6,8,8,8,8,6,6,8,10,4,10,8,6,10,8,6,6,8,6,6,10,8,4,6,8],
[8,4,6,6,6,4,6,6,6,4,4,6,6,6,6,4,8,6,6,4,6,6,6,6,8],
[4,6,4,6,4,4,4,6,4,6,4,4,4,6,4,4,6,6,4,4,4,4,4,4,4],
[8,8,10,6,8,8,8,8,8,8,8,8,8,6,8,10,8,8,8,8,4,8,6,6,8],
[6,8,8,8,6,6,6,6,4,8,6,6,6,6,6,6,6,6,6,8,6,8,8,8,6],
[4,2,2,2,6,6,4,6,6,2,4,2,6,6,6,2,4,4,4,2,2,4,4,2,2],
[0,4,2,0,2,6,2,4,0,6,2,2,2,2,6,0,2,2,2,0,2,2,2,6,2],
[8,10,8,8,6,8,8,8,8,8,8,10,8,8,8,10,8,8,8,6,8,8,6,10,8],
[4,4,6,6,4,4,4,4,6,6,6,4,4,6,6,6,8,4,6,8,6,6,4,6,6],
[6,6,8,4,6,6,8,6,6,6,6,8,8,6,6,8,6,6,8,6,6,6,6,8,6],
[2,2,2,2,6,2,2,4,2,4,4,2,2,0,2,4,4,4,4,2,4,2,4,2,4],
[8,4,2,4,6,8,4,4,6,6,6,8,6,6,2,4,8,8,4,8,6,8,8,8,8],
[2,4,6,0,6,6,6,0,0,0,4,0,4,4,4,0,0,6,0,6,8,8,8,8,0]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):
#############################################################
#
#	 Fifth 50 transfer functions  x  25 pole sets
#
#############################################################
numroots:= matrix([
[8,8,4,6,8,6,10,8,10,4,6,6,6,6,6,8,6,6,6,10,4,8,8,6,4],
[4,6,2,4,6,4,2,4,4,2,4,6,2,6,4,4,6,4,4,4,6,2,4,4,4],
[8,8,8,8,8,4,4,6,4,4,10,8,4,4,10,8,8,10,8,8,4,10,8,6,6],
[6,4,6,4,6,4,4,6,4,6,4,6,4,6,6,6,6,4,4,6,4,4,4,4,4],
[6,8,8,8,8,4,4,8,8,4,4,6,8,6,6,6,8,4,8,2,8,4,6,8,8],
[8,8,6,8,6,10,8,6,8,8,10,8,6,8,8,8,8,8,4,8,8,8,8,8,10],
[4,4,4,6,4,4,4,4,6,4,6,4,4,4,4,4,6,6,4,4,6,6,4,6,6],
[6,6,6,6,4,6,6,4,6,4,6,4,8,4,4,4,6,6,4,4,2,4,4,4,4],
[8,8,10,8,8,8,8,6,10,8,12,6,10,10,8,6,8,8,4,6,10,10,10,6,10],
[6,8,6,6,8,6,6,6,10,6,8,8,6,8,6,6,10,6,8,6,6,10,6,6,10],
[4,2,4,2,4,2,4,6,4,4,4,2,6,2,4,2,4,4,4,4,2,4,6,4,4],
[6,4,6,6,6,6,6,4,8,8,6,4,8,6,6,8,6,4,6,8,4,6,6,6,6],
[10,8,8,8,8,8,10,8,8,8,8,8,8,8,8,8,8,10,8,10,8,8,8,8,8],
[4,8,4,8,8,10,6,6,4,6,4,6,8,6,6,8,6,8,8,6,8,6,4,6,4],
[8,6,6,8,8,10,8,6,8,6,6,8,8,6,6,6,10,8,4,6,6,8,6,8,8],
[4,4,6,6,4,8,8,8,6,4,4,8,8,8,4,4,6,4,4,6,4,4,4,8,6],
[4,6,6,6,4,8,8,8,6,6,6,6,6,6,6,8,6,6,6,6,6,8,6,6,8],
[4,4,4,4,4,4,4,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
[6,8,6,8,6,10,8,8,8,10,8,8,8,8,6,8,8,8,8,10,8,8,6,6,8],
[6,4,4,6,6,6,4,4,4,6,4,4,4,6,4,8,4,6,6,4,4,4,2,4,4],
[2,6,4,6,6,4,6,6,4,6,6,6,4,4,6,6,6,6,4,4,4,4,6,6,8],
[6,6,8,4,8,6,8,4,8,8,8,8,4,6,10,8,6,4,6,10,6,6,8,8,8],
[4,8,4,8,4,6,8,4,8,4,4,8,8,8,4,8,4,8,8,6,6,4,6,6,4],
[8,10,6,10,8,8,8,6,10,8,6,6,8,8,10,10,8,8,8,8,8,8,8,6,10],
[8,6,8,6,6,6,6,6,10,8,6,8,6,6,8,8,8,6,6,8,6,4,8,8,8],
[6,6,8,4,6,4,8,4,6,6,6,8,6,4,6,6,8,6,4,6,6,4,4,4,6],
[4,4,4,6,6,4,4,4,6,6,4,6,6,6,6,6,6,6,4,4,6,6,4,6,4],
[6,8,8,8,6,6,8,8,6,8,6,6,6,4,4,8,8,6,8,6,8,4,8,6,6],
[4,4,4,6,8,4,6,8,8,10,8,6,4,8,4,8,6,8,6,4,8,6,8,8,6],
[10,6,8,6,6,8,6,6,8,6,6,6,6,6,6,8,4,8,8,8,6,8,8,8,8],
[10,6,6,6,6,10,8,8,12,6,10,4,8,8,6,6,6,6,6,6,6,6,8,8,6],
[6,2,4,4,2,4,2,4,4,6,4,4,4,6,4,2,8,2,6,6,6,6,6,6,4],
[4,6,4,4,4,6,6,4,4,4,8,4,6,4,4,4,6,4,6,8,4,6,6,4,4],
[6,8,4,4,8,4,8,2,8,6,4,6,2,4,2,2,2,6,4,2,10,2,6,6,2],
[4,2,2,2,8,6,2,4,2,2,2,6,4,2,4,2,8,2,6,4,6,2,4,4,2],
[2,4,6,6,6,4,6,8,4,4,10,6,6,4,4,8,8,8,6,4,4,6,4,6,4],
[4,4,2,6,2,2,2,6,6,2,6,6,6,4,6,6,2,6,2,6,6,10,4,4,6],
[8,8,4,4,2,4,4,4,4,2,6,6,4,4,4,4,4,6,4,6,4,4,6,6,6],
[4,6,6,6,6,6,4,6,6,4,4,6,6,4,4,6,4,6,4,6,4,6,4,6,6],
[4,4,2,2,4,2,8,2,2,2,6,2,6,4,4,2,2,2,6,4,4,6,6,6,4],
[6,8,10,6,6,8,8,8,8,8,8,6,6,6,8,8,8,8,12,8,6,10,10,8,8],
[8,2,4,4,8,4,6,4,2,8,4,6,4,8,6,4,4,4,2,6,4,8,4,8,4],
[10,10,8,10,10,8,8,8,6,10,8,10,10,10,8,8,8,8,8,10,10,10,8,10,8],
[4,6,4,2,2,6,2,2,4,8,6,8,6,4,4,6,10,8,4,4,2,8,2,6,6],
[4,4,6,4,2,2,2,4,2,2,2,6,2,4,4,2,6,4,8,4,4,2,2,4,2],
[4,2,4,2,6,6,2,2,2,4,2,4,4,2,2,2,2,2,2,4,2,2,4,2,2],
[6,8,6,6,6,6,4,6,8,6,6,4,8,4,6,6,6,6,8,8,4,4,6,6,4],
[2,6,6,4,4,2,4,0,0,8,6,4,8,4,0,6,8,4,4,8,4,8,6,0,4],
[8,6,6,8,4,8,6,6,6,4,6,6,6,4,8,6,8,6,6,8,6,8,6,8,8],
[6,6,8,6,8,6,4,6,6,10,6,8,6,6,6,6,8,8,8,6,6,6,4,6,6]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):
#############################################################
#
#	 sixth 50 transfer functions  x  25 pole sets
#
#############################################################
numroots:= matrix([
[6,6,4,6,6,6,8,8,6,8,6,6,4,6,6,6,8,6,8,6,6,8,6,6,6],
[10,10,10,8,8,8,10,8,8,10,10,10,10,6,10,10,6,6,10,6,8,10,8,10,6],
[4,2,8,4,8,6,6,10,2,6,6,2,4,6,2,2,6,4,4,4,2,4,8,2,8],
[6,6,6,6,6,6,4,4,6,4,6,4,6,8,8,4,6,6,6,4,4,6,6,6,6],
[6,6,6,6,6,6,6,6,6,4,6,6,6,6,8,6,6,4,6,6,6,6,6,8,4],
[8,8,6,6,8,6,6,8,10,6,6,6,6,8,8,6,6,8,6,6,6,6,8,8,8],
[4,6,4,4,4,6,4,4,6,6,2,6,8,6,6,4,4,6,6,6,4,6,2,6,8],
[2,2,6,6,6,6,2,6,2,2,6,6,2,2,6,2,4,2,6,6,8,6,6,2,6],
[6,4,8,4,8,6,4,4,4,4,4,4,4,8,6,6,4,6,10,4,6,8,8,6,4],
[6,8,6,8,8,4,4,8,6,8,10,8,2,8,4,2,8,0,8,8,10,8,2,8,8],  
[6,8,8,8,8,8,8,6,12,8,10,8,8,8,8,8,10,8,8,8,8,10,8,8,8],
[12,6,6,10,12,4,10,10,10,12,8,12,12,12,10,10,12,10,12,12,12,12,12,8,8],
[6,6,6,6,6,8,8,6,6,10,8,8,6,6,6,8,6,8,6,8,6,6,6,6,4],
[4,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6],
[2,6,6,6,4,2,2,6,6,2,2,2,6,2,6,2,2,2,2,2,6,4,2,2,2],
[6,6,4,6,2,6,2,6,6,8,6,6,6,6,4,4,6,6,4,4,4,6,4,4,4],
[4,6,4,6,6,6,6,8,6,6,8,4,4,4,6,6,6,6,8,6,4,4,8,4,6],
[4,2,2,4,4,2,4,4,6,4,4,2,0,4,2,4,4,4,4,4,2,4,4,4,2],
[6,6,8,6,6,4,2,6,6,6,8,8,6,6,8,8,10,8,6,4,8,6,6,6,8],
[4,4,4,4,4,6,4,4,6,6,6,6,6,6,6,4,6,4,6,4,6,4,4,6,6],
[6,4,4,6,6,6,6,4,6,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,4],
[4,4,8,4,10,4,4,4,8,4,6,8,4,8,4,4,4,8,10,4,4,4,4,4,4],
[8,8,8,6,8,8,6,6,8,8,10,8,6,8,8,8,8,8,8,8,8,8,6,8,8],
[6,8,8,8,8,6,8,8,6,8,6,6,6,6,10,8,8,6,8,4,8,6,6,10,6],
[8,8,8,10,10,6,10,12,8,4,10,6,10,6,10,6,8,12,8,10,6,10,4,10,4],
[2,4,6,6,6,4,4,6,6,4,6,4,4,8,2,8,6,2,6,4,2,4,4,6,6],
[8,6,6,6,6,6,6,6,6,6,10,6,6,6,6,8,8,6,6,6,6,6,6,6,6],
[6,4,4,4,6,4,6,8,4,4,4,8,6,4,6,6,8,4,10,4,4,4,4,4,4],
[4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,2,6,4,2,4,4,4,4,6,6],
[6,6,6,4,6,6,4,6,6,6,4,6,6,6,4,6,6,6,6,6,6,6,8,6,6],
[4,6,4,4,4,4,6,4,4,4,4,6,4,8,6,6,4,6,6,6,4,4,4,4,8],
[6,6,6,6,8,6,6,8,6,8,6,8,6,8,6,6,4,6,6,4,4,6,6,6,6],
[6,6,8,6,6,6,6,6,6,6,6,8,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,8,8,6,8,8,8,8,10,10,6,6,6,6,8,6,8,8,8,6,6,6,6,8],
[6,6,6,6,6,6,6,4,6,6,4,4,6,6,6,6,6,6,8,6,6,6,6,6,6],
[6,8,6,6,4,4,8,4,6,6,8,8,6,6,4,6,8,4,4,6,6,6,6,8,6],
[8,8,6,8,4,6,6,8,8,6,6,8,6,6,6,4,6,6,8,4,4,4,6,8,8],
[4,4,4,4,4,6,6,4,4,4,4,4,8,4,4,4,4,2,4,4,4,4,4,4,4],
[6,4,8,6,6,8,6,8,4,4,8,6,6,6,6,4,8,4,8,8,8,4,6,6,6],
[4,6,4,6,4,2,4,4,6,4,6,4,4,4,4,2,4,4,6,4,4,6,4,4,6],
[8,4,8,10,8,8,10,4,4,4,6,4,8,4,4,4,8,4,4,4,8,8,8,8,8],
[8,10,8,10,10,10,10,8,10,8,10,10,8,8,10,10,10,10,8,10,10,8,8,10,10],
[4,2,6,8,6,8,8,2,8,4,8,8,6,4,2,8,4,8,2,10,8,8,8,8,8],
[4,4,6,6,4,4,6,4,6,6,6,6,8,6,4,4,8,4,8,6,10,8,4,6,6],
[4,4,4,4,6,4,4,6,4,4,4,6,6,8,4,4,4,6,4,6,4,8,4,4,4],
[6,6,6,8,6,8,8,10,8,6,4,6,6,6,8,6,8,8,8,8,6,8,6,10,8],
[8,6,6,8,8,6,8,8,6,8,6,6,6,8,6,4,6,6,6,6,6,6,4,6,6],
[8,8,8,8,8,8,8,6,10,10,8,8,8,8,8,8,8,8,8,8,10,8,10,10,8],
[8,4,8,6,8,10,8,10,8,8,6,4,8,4,8,8,8,6,6,8,4,6,6,8,8],
[6,4,6,6,4,6,6,2,6,4,4,6,8,6,2,4,4,6,4,6,6,6,2,6,6]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):

###########################################################
#
#	 Seventh 50 transfer functions x  25 pole sets
#
########################################################
numroots:= matrix([
[8,8,8,8,8,8,8,8,8,6,8,8,8,8,8,6,8,8,8,8,8,8,8,8,8],
[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
[4,6,2,6,4,6,4,4,4,4,4,4,6,4,4,6,4,4,4,6,4,6,4,6,6],
[8,10,4,8,10,6,8,4,4,8,8,4,8,10,8,10,4,8,6,4,4,8,4,10,8],
[6,6,6,6,6,6,4,4,4,4,6,4,6,6,6,6,6,6,6,6,6,6,6,4,4],
[4,4,4,10,6,4,4,4,6,4,8,4,6,4,4,6,4,4,4,4,4,6,4,6,6],
[6,6,6,6,6,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8,10,8,8,8,8,8,8,8],
[8,8,8,8,8,8,8,6,8,8,8,8,8,8,8,8,6,8,8,8,8,8,8,8,8],
[6,8,8,6,6,6,6,8,6,8,8,6,6,8,8,6,6,6,8,6,6,8,8,6,8],
[6,6,8,6,6,6,6,6,8,6,8,8,6,6,6,8,8,6,4,6,6,6,8,8,6],
[8,6,8,8,6,6,8,4,8,6,8,8,6,6,6,8,6,8,8,4,8,6,8,6,8],
[2,4,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,2,4,4,2,2,2,4],
[6,6,6,6,6,8,6,8,8,6,8,8,6,6,6,6,6,6,6,6,6,8,6,6,6],
[4,4,6,4,4,4,4,4,4,4,4,4,6,4,4,4,6,4,6,4,4,4,4,4,4],
[2,4,4,4,2,2,2,4,2,4,4,4,4,4,4,4,4,2,2,4,2,2,4,4,4],
[6,6,4,6,6,6,6,6,4,6,6,6,4,6,6,6,6,6,6,6,6,6,6,6,6],
[6,8,8,8,10,8,6,8,8,8,10,8,8,8,8,8,8,10,6,8,8,10,8,8,8],
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4],
[6,6,6,6,6,6,6,8,6,6,6,6,8,8,6,6,6,8,6,6,6,6,8,8,8],
[6,4,8,8,6,6,8,6,8,6,6,8,8,6,8,6,4,6,8,8,8,4,4,8,6],
[6,6,8,6,8,6,10,8,6,6,8,8,8,8,6,8,8,8,8,8,6,6,8,6,8],
[8,8,8,8,8,6,8,8,8,8,6,8,6,6,8,8,8,8,8,8,8,6,6,8,8],
[6,6,6,6,4,4,6,4,4,6,2,4,6,4,6,6,6,6,4,6,4,6,6,6,4],
[6,2,6,4,4,6,4,6,4,4,6,4,6,6,4,6,6,2,2,4,4,4,4,4,6],
[4,8,4,8,8,8,4,6,8,8,4,6,6,2,6,4,4,4,4,8,8,2,6,4,4],
[4,2,2,2,4,4,2,4,4,2,2,4,4,4,4,2,2,2,4,4,2,2,4,4,4],
[10,10,10,10,10,8,10,10,10,10,8,8,8,10,10,8,8,10,8,10,10,10,10,10,10],
[10,8,10,10,10,10,10,10,10,6,6,6,8,10,10,10,6,10,10,10,8,8,8,10,10],
[4,4,2,4,4,4,4,4,6,4,4,6,2,4,4,4,2,4,4,4,2,2,2,4,4],
[2,2,4,2,4,2,2,2,2,2,2,4,4,2,2,2,4,2,2,2,2,2,2,4,2],
[6,8,6,8,6,8,6,8,6,6,6,8,6,6,8,6,6,6,8,6,8,6,6,6,8],
[4,4,4,8,8,10,8,4,4,2,8,8,4,10,4,8,4,4,4,8,8,8,8,4,10],
[10,10,10,10,12,10,10,10,10,10,8,10,10,8,8,10,10,10,10,10,10,8,10,12,10],
[2,6,6,4,2,6,6,6,2,6,6,6,6,6,4,2,6,4,2,6,2,6,2,2,6],
[8,4,8,8,4,8,8,8,4,8,8,4,8,8,4,4,4,4,4,4,8,4,4,4,8],
[6,6,6,6,6,6,8,6,6,6,6,6,6,6,6,6,6,6,6,6,8,6,6,6,6],
[2,2,2,2,2,2,2,2,2,2,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
[6,8,6,6,6,6,8,6,6,8,6,4,6,6,4,8,8,8,8,6,8,4,6,4,4],
[6,6,6,6,6,8,6,6,6,6,6,6,8,8,8,6,6,8,8,6,6,8,6,6,6],
[6,2,6,4,6,2,6,4,2,4,6,6,6,6,6,6,6,4,4,6,6,6,6,4,2],
[6,4,4,6,4,4,6,4,4,4,6,6,6,4,4,4,4,6,6,4,4,4,4,6,6],
[4,4,6,4,4,4,6,6,4,6,4,4,4,4,6,4,4,4,4,4,4,4,4,6,4],
[6,8,8,10,10,8,8,6,8,8,8,10,8,8,8,8,8,10,10,10,10,8,8,6,8],
[8,8,6,8,6,6,6,8,4,6,2,6,8,4,4,6,8,6,4,6,8,6,4,4,4],
[8,6,8,10,8,8,8,6,8,8,4,6,8,4,6,10,6,8,6,6,6,6,10,8,6],
[6,4,6,6,6,4,4,8,8,4,6,4,8,4,6,6,8,6,8,8,4,8,2,6,8],
[10,10,8,10,6,10,8,6,10,6,10,8,6,10,6,8,10,10,10,10,8,10,10,8,10],
[8,8,8,4,8,8,4,4,8,8,8,8,4,8,8,8,10,4,4,8,8,8,10,8,4],
[8,6,10,4,8,6,4,2,10,6,2,10,10,2,10,6,10,8,10,4,10,8,4,10,10]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):


##########################################################
#
#	 Eigth 50 transfer functions  x  25 pole sets
#
#########################################################
numroots:= matrix([
[4,4,4,8,4,8,4,8,6,4,4,4,4,4,8,4,8,8,8,6,4,6,4,4,4],
[8,8,6,8,10,6,8,6,8,8,8,6,8,6,8,6,8,8,8,6,8,8,8,8,8],
[12,10,10,12,12,10,10,10,10,10,12,10,12,12,10,12,10,
				10,10,10,10,10,12,10,10],
[10,8,10,10,10,10,8,8,10,10,10,8,10,10,8,8,8,8,8,12,12,10,8,8,10],
[8,4,8,6,4,8,4,8,8,8,8,6,8,4,8,8,8,6,4,8,6,8,6,8,4],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,2,4,6,6,2,2,6,6,2,6,4,2,2,6,2,4,6,2,4,6,2,6,6],
[12,8,12,8,6,10,12,8,10,12,12,10,8,12,8,10,10,8,8,12,8,8,6,8,8],
[4,4,6,6,6,6,4,6,6,6,6,6,6,6,6,6,4,4,6,6,6,8,6,6,4],
[6,6,6,6,4,2,8,6,6,6,6,6,6,8,6,4,4,6,6,4,6,8,8,6,2],
[6,6,4,8,2,4,6,4,4,2,6,6,6,4,6,4,4,6,4,4,4,6,2,4,6],
[4,4,4,4,6,4,4,4,4,6,4,4,4,4,6,4,4,4,4,4,4,4,4,4,4],
[4,4,4,4,4,6,4,4,4,6,4,4,4,4,4,4,6,6,6,4,4,6,4,4,4],
[4,4,6,4,6,4,6,6,4,4,6,6,6,6,6,4,6,4,4,4,6,4,4,4,6],
[10,10,8,8,8,10,8,8,8,8,10,8,8,8,8,8,8,10,8,10,10,8,10,10,8],
[6,6,6,6,2,4,4,6,4,6,6,6,4,6,4,6,6,4,6,6,6,6,4,2,4],
[6,8,6,6,8,6,6,6,6,6,6,6,8,6,6,6,6,8,6,6,6,6,6,6,6],
[8,4,6,6,10,6,10,6,4,6,10,6,6,6,6,6,6,6,8,6,6,6,4,6,6],
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],       # All 4's!!!!!!
[8,8,6,8,8,8,8,8,10,8,8,8,6,8,6,6,8,8,6,8,8,8,8,8,8],
[10,4,4,4,4,4,8,4,10,10,4,8,4,4,4,4,10,8,8,6,8,4,8,4,4],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[2,6,2,6,2,6,2,6,2,2,2,6,2,6,2,2,2,6,6,2,6,6,6,2,2],
[4,4,6,8,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,6,8,4,4,4,4],
[8,4,6,6,4,6,8,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[8,4,4,4,4,4,4,8,4,8,4,4,8,8,4,4,4,4,4,4,4,6,4,4,4],
[8,8,8,8,8,8,8,6,8,8,8,8,6,8,6,8,10,8,6,8,8,8,8,6,8],
[4,6,6,6,4,4,6,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4],
[8,8,10,8,8,8,10,8,8,8,10,8,8,8,10,8,8,8,10,8,10,8,8,8,10],
[4,2,2,4,2,4,2,4,4,2,4,6,6,2,4,6,2,6,2,2,4,2,2,4,4],
[6,2,6,8,2,2,8,2,6,8,8,8,4,8,4,6,6,8,2,8,8,4,2,4,8],
[6,4,6,6,4,6,6,6,6,6,4,6,6,6,6,4,4,4,4,6,6,6,6,4,6],
[8,8,8,2,8,2,8,4,8,4,8,4,4,4,4,4,4,4,8,4,8,4,8,8,2],
[6,6,6,2,2,2,2,2,2,2,6,6,2,6,6,6,2,2,6,2,2,2,2,6,6],
[4,4,4,6,4,8,6,6,4,6,6,4,4,4,6,6,6,6,4,6,4,4,6,4,4],
[4,10,10,4,10,10,10,4,10,8,10,10,8,10,10,10,10,10,10,10,4,4,10,10,10],
[6,6,6,6,4,2,6,6,6,6,6,6,4,6,6,6,6,6,4,6,6,6,4,2,6],
[8,8,4,8,4,8,8,6,6,4,8,8,4,4,8,6,4,8,8,8,8,8,4,8,6],
[8,10,8,10,10,6,10,10,10,10,8,10,10,10,10,10,8,10,10,8,10,10,8,10,10],
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4,4,4,6],
[4,4,4,4,4,4,6,4,6,6,6,4,4,6,4,6,6,6,6,6,6,6,6,6,6],
[8,6,8,8,10,8,8,8,8,8,8,8,6,8,8,8,8,8,8,8,8,8,8,8,10],
[8,8,8,8,8,8,8,8,8,10,10,8,10,8,10,10,10,8,8,10,10,8,8,10,10],
[8,6,6,4,4,6,6,8,8,8,8,6,4,4,8,8,8,6,4,4,8,6,8,4,4],
[10,10,8,8,8,12,10,8,6,6,8,8,8,8,8,10,8,8,8,8,8,10,6,8,12],
#
#	An example not controllable by real feedback.
#
[2,2,2,2,2,0,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,4,2,4],
#
[6,6,6,6,8,6,6,6,6,8,6,6,6,8,6,6,6,6,8,8,6,8,8,8,6],
[6,4,4,4,6,4,4,4,4,4,4,2,4,4,4,2,6,2,4,4,2,6,6,4,4],
[6,8,4,4,8,4,4,4,4,4,4,8,4,6,4,4,4,4,4,8,4,4,4,4,4],
[6,6,6,6,6,6,6,6,6,6,6,6,6,8,6,8,6,6,8,8,6,6,6,6,8]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):


###########################################################
#
#	 Ninth 25 transfer functions  x  50 pole sets
#
###########################################################
numroots:= matrix([
[4,6,8,6,4,4,4,6,6,4,6,4,6,6,4,6,6,6,6,6,6,4,4,4,6],
[4,4,6,4,6,4,4,4,4,6,4,8,6,6,6,6,6,6,6,4,6,6,4,6,4],
  [8,2,8,6,8,8,2,8,8,8,2,2,8,8,2,8,6,6,8,2,6,2,6,6,8],
  [6,8,6,2,6,6,6,8,6,8,6,8,6,8,8,6,2,6,2,8,6,2,6,8,8],
[4,6,4,4,6,6,6,4,4,6,4,6,4,6,6,6,6,4,4,6,6,6,6,6,4],
[6,4,4,6,4,6,4,4,6,6,4,6,6,6,6,4,4,6,6,6,6,4,4,6,6],
  [10,8,8,6,10,8,6,10,8,8,10,8,10,6,10,8,10,6,8,6,6,10,10,6,10],
  [10,10,6,10,10,8,6,6,6,6,10,10,6,6,10,6,6,8,10,10,10,10,6,6,6],
[6,4,6,6,4,6,6,4,4,6,6,6,6,4,4,6,6,6,6,6,6,6,4,6,6],
[4,4,6,4,6,6,4,6,6,4,6,6,4,4,4,4,6,4,4,4,4,6,4,8,6],
  [4,4,4,6,4,4,4,6,4,4,4,6,4,6,4,6,4,6,4,4,4,4,4,4,4],
  [4,4,4,4,4,4,4,6,6,4,4,4,4,4,4,4,4,4,4,4,6,6,4,4,6],
[6,4,6,4,6,4,6,4,8,6,6,6,6,4,4,8,4,6,6,8,8,4,4,6,6],
[6,6,6,6,4,4,6,4,6,6,6,4,8,8,6,4,6,4,6,4,4,6,4,6,6],
  [6,6,6,6,4,4,4,6,4,6,4,6,4,6,4,6,4,4,4,6,4,6,4,4,4],
  [6,4,4,4,6,4,6,4,6,4,4,4,4,6,4,6,6,4,4,6,4,6,6,4,4],
[8,8,8,10,10,8,8,10,10,10,10,8,8,8,10,8,10,10,8,8,10,10,10,8,12],
[10,8,8,8,8,8,10,8,10,10,10,8,10,8,8,8,8,8,6,8,10,8,8,10,8],
  [8,10,8,6,6,6,6,10,10,6,6,6,8,6,8,8,10,6,10,6,8,8,8,6,6],
  [6,8,6,6,6,6,6,8,6,6,8,10,6,8,6,6,6,8,6,6,8,6,6,6,6],
[6,6,4,4,4,6,4,4,6,6,6,6,6,6,4,4,4,6,6,6,6,6,6,6,6],
[8,6,6,8,6,6,4,8,6,4,4,4,4,6,6,6,6,4,4,6,6,6,6,6,6],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,6,6,4,6,6,6,6,6,8,8,6,6,10,6,8,10,10,6,10,8,6,6,4],
[6,8,6,6,6,6,6,8,6,8,6,6,6,6,8,6,6,8,4,6,8,4,6,6,6],
  [4,8,8,8,8,8,8,4,4,8,4,8,4,4,8,8,8,6,4,4,8,8,6,8,4],
  [8,8,4,4,4,8,8,4,4,8,4,4,6,8,4,4,8,8,4,4,4,8,8,6,4],
[4,4,4,4,6,4,4,6,6,4,4,4,4,4,4,6,6,4,4,4,4,6,4,4,4],
[4,6,4,4,4,6,4,4,6,4,4,4,6,4,4,4,4,4,6,4,4,4,6,4,4],
  [8,12,12,12,10,10,10,10,8,12,10,10,10,12,8,10,12,10,6,10,12,12,12,12,6],
  [10,10,12,12,10,8,12,10,10,10,10,12,8,12,10,12,10,10,10,10,10,10,8,8,10],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
  [6,6,8,8,8,8,6,8,8,8,8,8,8,8,8,8,6,8,8,8,8,8,10,8,8],
  [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8,8,8,8,8,8,8,8,8],
[4,8,4,6,8,4,8,8,4,8,8,4,6,6,10,8,4,8,6,4,4,6,4,6,6],
[6,8,6,4,4,8,6,4,6,8,8,8,8,8,4,8,4,8,8,6,8,4,4,4,4],
  [6,4,4,2,4,4,2,4,6,2,6,2,6,6,4,4,4,4,6,4,6,6,4,6,2],
  [2,6,4,2,4,2,4,6,4,4,6,4,4,6,4,6,4,6,6,4,6,6,6,6,4],
[4,6,8,6,6,4,4,6,4,4,4,4,4,4,6,4,4,6,4,6,4,6,4,6,4],
[4,6,4,4,4,6,4,4,6,4,4,4,6,4,4,4,8,4,6,4,4,4,4,4,6],
  [4,2,4,2,4,2,6,4,2,4,4,6,6,2,4,2,4,4,4,4,6,4,4,4,2],
  [2,2,2,2,2,2,2,2,2,2,2,2,4,2,4,2,4,2,4,2,4,6,4,2,2],
[6,8,8,8,8,8,6,6,8,8,8,8,6,6,6,8,8,8,8,8,4,6,6,10,8],
[8,8,8,6,8,6,8,6,6,8,8,8,8,6,8,6,8,8,8,8,8,8,8,8,8],
  [6,4,6,6,4,6,6,6,6,6,6,6,8,6,4,8,6,6,6,8,6,6,6,6,6],
  [6,4,6,6,6,6,6,6,4,4,6,8,6,6,8,8,6,4,6,6,4,6,6,6,6],
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):

###########################################################
#
#	tenth 25 transfer functions  x  50 pole sets
#
#############################################################
numroots:= matrix([
[6,2,6,4,6,6,4,6,6,6,6,6,6,6,6,2,6,6,6,2,6,6,6,6,2],
[2,6,6,6,6,6,2,2,6,6,6,6,2,6,2,6,2,6,6,6,6,2,6,6,6],
  [8,8,8,8,8,8,8,8,8,10,6,8,6,10,8,8,8,8,8,8,10,8,8,8,6],
  [8,6,10,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,8,6,8,8,8,6,8],
[6,4,6,6,6,6,6,8,6,4,8,8,4,6,4,4,4,4,4,6,6,6,4,6,8],
[6,6,4,4,6,4,6,4,6,4,8,4,4,8,4,8,6,4,6,8,6,4,4,6,6],
  [8,8,6,6,8,6,6,6,6,6,8,8,8,6,6,6,6,8,8,6,6,8,8,6,8],
  [6,6,6,6,6,6,8,8,8,8,6,10,6,8,6,6,6,6,6,8,6,6,10,6,8],
[8,6,8,10,10,10,6,10,8,10,6,8,8,8,10,8,8,10,10,8,10,8,10,10,6],
[6,10,10,10,8,8,8,10,6,10,10,10,6,10,10,8,10,10,8,10,8,10,8,8,8],
  [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
  [8,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[6,6,6,6,8,8,8,6,6,8,8,6,6,8,8,8,6,8,8,8,6,6,8,8,6],
[6,6,6,8,6,6,8,8,6,6,6,8,6,6,6,8,8,6,10,4,6,6,8,8,8],
  [6,6,8,6,6,8,4,6,8,6,8,6,8,6,6,8,8,6,8,8,6,6,6,8,6],
  [6,6,8,6,6,8,6,6,4,8,6,8,4,6,6,6,6,6,6,6,6,8,8,6,6],
[10,8,12,8,12,10,10,10,12,8,10,10,10,10,10,10,8,8,10,8,10,8,10,8,8],
[10,10,10,10,10,8,10,10,10,12,8,8,10,10,10,10,8,8,10,10,10,10,8,10,10],
  [4,8,4,6,6,8,6,8,6,6,6,6,6,6,8,6,4,8,6,6,6,6,4,6,8],
  [8,8,8,6,6,6,6,6,6,6,8,8,4,6,4,4,6,6,8,8,8,4,8,6,6],
[6,4,6,4,6,6,6,6,6,6,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,6,6,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,6,4,6,6],
  [6,6,2,6,6,4,4,6,6,6,6,6,6,6,6,4,4,6,6,4,6,6,6,6,8],
  [6,6,6,6,6,6,6,6,2,8,6,6,6,6,4,6,6,6,4,4,4,8,6,4,6],
[4,4,4,4,4,4,6,4,4,4,4,4,4,4,4,6,4,4,6,4,4,4,4,4,6],
[4,6,4,6,4,6,6,4,4,6,4,4,4,4,6,4,4,4,4,6,4,4,6,4,4],
  [10,8,8,8,10,10,8,10,8,8,10,10,10,8,10,8,8,8,8,8,8,8,10,10,10],
  [8,8,8,8,8,8,10,10,8,8,8,8,10,8,8,8,8,10,10,10,10,10,8,8,8],
[6,6,6,6,6,6,6,6,6,6,6,2,2,6,6,6,2,6,6,6,6,6,6,6,6],
[6,6,6,6,6,6,6,6,6,2,6,6,2,6,8,6,6,6,6,6,2,6,2,6,6],
  [4,6,6,6,4,4,6,6,6,4,6,6,6,6,6,6,6,6,4,6,6,6,6,6,6],
  [6,6,6,4,6,6,6,6,6,6,6,6,4,6,4,6,4,4,6,6,6,6,6,6,6],
[8,8,8,8,8,8,10,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
  [8,8,6,8,6,8,8,10,6,6,6,8,6,8,6,6,6,6,6,8,6,6,6,6,8],
  [6,6,8,6,6,6,6,8,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,6,6],
[6,6,6,6,6,6,6,6,8,6,6,6,6,6,8,6,6,6,6,6,6,6,6,6,6],
[6,6,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,6,6,6,6,6,6,6],
  [8,8,10,8,10,10,10,8,8,8,8,12,8,12,10,8,12,12,8,8,10,8,8,10,12],
  [12,10,10,10,8,10,10,12,8,8,8,6,10,8,10,10,10,12,8,8,10,10,10,10,10],
[8,8,6,6,8,6,8,6,6,6,6,6,8,6,6,6,6,6,6,8,6,6,8,6,6],
[6,8,6,6,6,8,6,8,8,6,6,6,8,8,6,6,6,6,6,6,8,6,6,8,8],
  [6,6,8,8,6,6,6,6,6,4,6,6,8,6,6,8,6,4,8,6,6,6,6,8,8],
  [6,8,6,6,6,6,6,8,6,8,6,6,6,6,4,6,8,6,6,8,6,6,6,6,4],
[8,8,4,6,10,10,10,10,10,4,8,6,10,8,4,10,8,4,6,4,6,6,4,4,6],
[10,10,6,10,6,10,8,10,8,8,10,10,6,10,4,6,8,6,6,10,10,10,4,10,10],
  [4,4,4,10,4,4,4,4,10,4,4,4,4,4,4,10,4,10,10,4,10,4,4,4,4],
  [4,4,4,4,4,10,4,4,4,4,10,4,10,4,4,10,10,4,4,10,4,4,10,10,10],
[12,12,12,12,12,12,12,12,12,10,12,12,6,12,12,12,12,12,10,12,6,12,12,12,12],
[12,10,12,10,12,12,10,12,12,12,8,12,12,12,10,12,12,12,14,12,12,12,10,12,12]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

Total:= matadd(Total,num):

################################################################
#
#	eleventh 25 transfer functions  x  50 pole sets
#
##################################################################
numroots:= matrix([
[8,8,8,8,8,8,8,8,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[8,8,8,8,8,8,8,8,8,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
 [2,2,4,2,2,2,4,4,2,4,4,4,4,2,2,2,2,4,2,4,4,4,4,2,4],
 [4,4,4,4,4,4,2,4,4,4,2,2,4,4,4,4,4,2,4,4,4,4,4,4,4],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
 [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
 [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
 [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
 [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[10,10,10,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10],
[10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10],
 [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
 [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
 [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
 [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[4,6,6,4,6,4,6,6,4,4,4,4,6,4,4,4,4,6,6,4,6,4,6,4,4],
[4,4,6,6,6,4,4,6,4,6,4,4,4,4,4,6,6,6,6,4,4,4,4,4,6],
 [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
 [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],
[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],
 [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
 [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
 [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
 [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
 [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
 [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
 [6,6,6,6,6,6,8,6,6,6,6,6,6,6,6,6,8,8,8,6,8,6,8,8,6],
 [6,6,8,8,6,8,8,8,6,6,6,8,8,6,8,6,6,8,8,6,6,8,6,6,6],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
 [8,8,8,6,6,8,6,8,8,8,6,8,8,8,6,8,8,8,8,8,8,8,8,8,8],
 [8,8,6,8,6,8,6,8,8,8,8,8,6,8,6,8,6,8,6,6,6,8,8,6,8],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
 [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
 [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

#print(evalm(num));
Total:= matadd(Total,num):

#######################################################################
#
#	twelfth and final 50 transfer functions x 25 pole sets
#
#######################################################################
numroots:= matrix([
[8,8,8,6,8,8,8,8,6,8,8,8,6,8,8,8,8,6,8,6,6,6,8,8,8],
[10,10,10,10,10,8,10,10,10,10,10,10,8,10,10,10,10,10,10,8,10,8,10,10,10],
[6,6,6,6,6,6,6,6,6,6,6,6,8,6,6,6,6,6,6,6,8,8,6,6,6],
[10,10,8,10,10,8,10,10,8,10,10,8,8,10,10,10,10,10,10,8,8,8,10,10,10],
[8,8,8,8,8,8,8,8,8,8,8,6,8,8,8,8,8,8,8,6,8,8,8,8,8],
[10,10,10,10,10,8,10,10,12,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10],
[8,8,4,6,8,6,8,8,4,8,8,4,6,6,8,8,8,6,6,6,6,6,6,6,8],
[10,10,6,10,10,6,10,10,6,10,10,6,10,10,10,10,10,10,10,10,10,10,10,10,10],
[12,12,10,12,12,10,12,12,10,12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12],
[8,8,8,8,8,6,8,8,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[6,6,4,4,4,2,6,6,6,6,6,4,2,4,6,6,6,4,6,4,4,4,4,6,6],
[8,8,4,8,8,4,8,8,4,8,8,4,8,8,8,8,8,8,8,6,8,8,8,8,8],
[10,10,6,8,10,6,10,10,6,10,10,6,8,8,10,10,10,8,10,8,8,8,8,8,10],
[6,6,4,6,6,4,6,6,4,6,6,4,6,6,6,6,6,6,6,6,6,6,6,6,6],
[10,10,6,10,10,6,10,10,6,10,10,6,8,10,10,10,10,10,10,8,10,8,10,10,10],
[6,6,4,8,8,4,8,6,4,8,8,4,8,8,8,8,8,8,8,10,8,8,8,8,8],
[8,8,10,8,8,10,8,8,10,8,8,10,8,8,8,8,8,8,8,8,8,8,8,8,8],
[6,6,6,6,6,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[4,4,6,4,4,6,4,4,6,4,4,6,6,4,4,4,4,6,4,8,6,6,4,4,4],
[6,8,6,8,8,6,8,8,6,8,8,6,8,8,8,6,8,8,8,6,8,8,8,8,8],
[6,6,2,6,6,8,6,6,2,6,6,4,6,6,6,6,6,6,6,4,6,6,6,6,6],
[4,4,8,4,4,4,4,4,8,4,4,8,4,4,4,4,4,4,4,4,4,4,4,4,4],
[6,6,2,6,6,2,6,6,2,6,6,2,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,4,6,6,6,6,6,4,6,6,4,6,6,6,6,6,6,6,4,6,6,6,6,6],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,6,6,4,6,6,6,6,6,6,6,6,4,4,4,6,4,4,4,2,4,4,4,4,4],
[6,6,10,6,6,8,6,6,12,6,6,10,6,6,6,6,6,6,6,6,6,6,6,6,6],
[10,10,8,8,10,10,10,10,8,10,10,8,10,8,10,10,10,8,10,8,8,10,8,10,10],
[8,10,4,10,10,6,10,10,4,10,10,4,6,10,10,10,10,10,10,6,8,6,10,10,10],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[10,10,6,10,10,6,10,10,6,10,10,6,10,10,10,10,10,10,10,8,10,10,10,10,10],
[12,12,8,12,12,8,12,12,8,12,12,8,12,12,12,12,12,12,12,12,12,12,12,12,12],
[6,6,6,6,6,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[6,6,6,4,6,6,6,6,6,6,6,6,2,4,6,6,6,4,4,2,2,2,4,4,4],
[8,8,8,8,8,8,8,8,8,8,8,10,10,8,8,8,8,8,8,10,10,10,8,8,8],
[6,6,8,6,6,8,6,6,8,6,6,8,6,6,6,6,6,6,6,8,6,6,6,6,6],
[8,8,10,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
[6,6,6,6,6,6,6,6,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[8,8,6,8,8,6,8,8,6,8,8,6,8,8,8,8,8,8,8,8,8,8,8,8,8],
[10,10,8,10,10,8,10,10,6,10,10,6,8,10,10,10,10,8,10,8,8,8,10,10,10],
[8,8,8,10,10,6,10,8,8,8,8,8,10,10,10,8,10,10,10,10,10,10,10,10,10],
[10,10,8,10,10,4,10,10,8,10,10,8,10,10,8,8,8,10,8,10,8,8,8,8,8],
[4,4,6,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4],
[8,8,8,8,8,4,8,8,8,8,8,8,6,8,8,8,8,6,8,4,6,6,8,8,8],
[4,4,4,4,4,6,4,4,4,4,4,4,6,4,4,4,4,6,4,6,6,6,4,4,4],
[6,6,4,4,6,4,4,6,4,4,4,4,4,4,4,6,4,4,4,4,4,4,4,4,4],
[4,4,6,4,4,4,4,4,6,4,4,6,6,4,4,4,4,4,4,8,4,4,4,4,4],
[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],
[6,8,2,6,8,2,6,8,2,6,6,2,6,6,6,6,6,6,6,6,6,6,6,6,6]
]):

num:=vector([0,0,0,0,0,0,0,0]):

for ii from 1 to 50 do
for jj from 1 to 25 do
if numroots[ii,jj]=0 then num[1]:=num[1]+1: else
if numroots[ii,jj]=2 then num[2]:=num[2]+1: else
if numroots[ii,jj]=4 then num[3]:=num[3]+1: else
if numroots[ii,jj]=6 then num[4]:=num[4]+1: else
if numroots[ii,jj]=8 then num[5]:=num[5]+1: else
if numroots[ii,jj]=10 then num[6]:=num[6]+1: else
if numroots[ii,jj]=12 then num[7]:=num[7]+1: else
if numroots[ii,jj]=14 then num[8]:=num[8]+1: else
print(`Something Strange`,ii,jj,numroots[ii,jj]);
fi; fi; fi; fi; fi; fi; fi: fi:
od:
od:

Total:= matadd(Total,num):

####################
#
#   End
#
###################
S:=0:
for ii from 1 to 8 do
S:= Total[ii]+S:
od:
Digits:=4:
tot:=vector([0,0,0,0,0,0,0,0]):
for ii from 1 to 8 do
tot[ii]:= 100.0*Total[ii]/S:
od:

print(Total);
print(tot);


quit;

###########################################################################

The 25 8-tuples used in the last run:

-10,-9,-4,-3,-2,5,6,30,
-10,-1,3,-4,-7,7,8,10,
-7,0,3,4,5,7,8,9,
-9,-4,4,5,7,-8,8,10,
-9,-1,1,-3,3,-7,9,10,
-6,0,-1,1,-4,4,9,10,
-10,-2,4,-5,6,7,-8,10,
-9,-1,2,-4,6,-8,9,10,
-19,-17,-16,0,1,16,17,18,
-12,-10,-8,-5,-2,2,10,13,
-15,-11,-8,-2,8,12,15,19,
-17,-5,0,2,3,10,11,20,
-20,-16,-15,1,2,8,19,20,
-30,-13,-12,-11,-3,2,3,20,
-15,-14,-12,-10,-5,9,10,16,
-17,-16,-15,-11,-8,-6,-5,8,
-88,-87,-20,-6,23,24,56,75,
-71,-70,-69,-15,2,5,15,33,
-48,-43,-41,-39,23,38,40,41,
1,2,3,4,5,6,7,8,
-31,-30,-29,-28,-27,2,3,5,
2,3,5,7,11,13,17,19,
23,29,31,37,41,43,47,53,
50,60,80,101,121,138,141,143,
-12,-11,-10,-9,9,10,11,12