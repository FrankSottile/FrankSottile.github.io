#procedures
#
#  Here are procedures to help compute the Galois groups of Schubert problems
# involving mostly simple (codimension 1) conditions---we allow at most 2
# conditions of higher codimension, which are encoded in the local coordinates.
#
#   We work with k planes in n:=l+k space.   The codimension 1 conditions are
# when the general k-plane meets a fixed l-plane.
#
# (make sure to use Maple 10+)
######################################################################################
#
#   PHC and other initialization
#
PHCdir := "bin": #Special binary directory with write priveledges
#PHCdir := "c:/PHCmaple": #Special binary directory with write priveledges
if FileTools[Exists](""||PHCdir||"/phc.module") then
  read ""||PHCdir||"/phc.module":
else
  libname := PHCdir, libname:
fi:
with(phc): setPHCloc(PHCdir, debug = debug_level, phc = software):
with(linalg):
with(LinearAlgebra):
with(group):

################################################################################
#
#  There are some global variables
#
#   ConstantEquations   This is a list of all except one equation.  These are fixed
#                         during the homotopies.
#   Vars                The variables.
#   Coords              Local coordinates for the k-planes
#   k,l                 the parameters of the Grassmannian
#   nSols               The number of solutions
#   (obsolete) nsteps              The number of (macro) steps to take in each homotopy path
#   sol_tolerance       the tolerance that is used, e.g., for comparing solutions
#   T                   the "main" system
#   S                   solutions of T
#   Master              the set of 1st coordinates of the solutions
#                       used for creating permutations
##################################################################################
#
#  Procedures
#
#  PluEq(L)           Given an l-plane, it returns
#                     det( stackmatrix (L, Coords) )
#
#  makeS(L)           Given an l-plane L, it returns the system consisting of the
#                     Constant Equations and the new equation PluEq(L)
#
#  AltmakeS(L)        Makes the new equations,but multiplies them by an arbitrary
#                     complex constant (Frank thinks he made an error in this approach)
#
#  longLoop(vi, ri)   Given the fixed l-plane vi, it makes a loop of
#                     2*l steps to a random l-plane vp and back again.
#                     ri:= seed for the random number generator
#
#  shortLoop(vi, ri)  Given the fixed l-plane vi, it makes a loop of
#                     3 steps to a random l-plane vp and back again.
#                     ri:= seed for the random number generator
#
#  init_halfLoop(vi,i,new_vii)
#                     does one half of the simplest 2-step loop
#                     from the system defined by vi
#                     to the system given by new_vi = vi, except for vi[i]=new_vii
#
#  halfLoop()         completes the simplest loop by ranodmizing the
#                     path when going back to the original system
#
#  goodPath(END)      Checks to see if we obtain the expected number of distinct solutions.
#                     exits if not.
#
#  makePointer(A,B)   returns a pointer  such that A[i]:=B[pointer[i]].
#
#  makePermutation(P) Returns the permutation of a given pointer.
#
#  makeGroup(v,b)     This is the heart of the code.  It makes several homotopy
#                     loops, computes the resulting permutations, and
#                     builds up the permutation group.
#
#  systemtime()       returns the system time is seconds since
#                     midnight Jan 1, 1970
#
#  checkST()          checks whether S are indeed the solutions to T
#
#  --------- Pieri homotopy node (PHN) -------------------------------
#
#  setupPieriHomotopyNodes(SchubertData, {seed})
#                     create a DAG of PHNs using "SchubertData" for the
#                     root node, "seed" is an optional randomization seed
#
#  createPieriHomotopyNode(lambda, mu, num, L)
#
#  trackSchubert(st_sol, A, B)
#                     tracks solutions "st_sol" from makeS(A) to
#                     makeS(B) using first half of the "longloop"
#
#  computeMaster_PHN(f)
#                     computes the "master" of the PHN stored in "f"
#
#  computeGalois_PHN(f)
#                     computes the Galois group for the node "f"
#
#
#
##############################################################################
#
#  phc[track](T,S,L,n,a_const=a):  T is a target system of polynomials
#                        S is a start system
#                        L are some solutions to the start system we will track
#                        n is the number of steps
#
#  This follows the solutions in L along the system  at*T + (1-t)*S from t=0 to t=1.
#
#  It returns a list R with R[1]=L and R[n+1]= the final soluions
#
##############################################################################
PluEq := proc(L)
 global Coords:
 Determinant(convert([convert(Coords,listlist)[],convert(L,listlist)[]],Matrix))
end proc:
##############################################################################
makeEquations := proc(L::list)
 global Vars, Coords:
 return map(PluEq, L);
end proc:
##############################################################################
makeS := proc(L)
 global ConstantEquations, Vars, Coords:
 local Equations:
 Equations:=[ConstantEquations[],PluEq(L)]:
 return(makeSystem(Vars, [], Equations))
end proc:
##############################################################################
makeAltS := proc(L)
 global ConstantEquations, Vars, Coords:
 local Equations, i, alpha:
 alpha:= ((rand() mod 1000) + I*(rand() mod 1000))/1000:
 Equations:=[seq(alpha*ConstantEquations[i],i=1..nops(ConstantEquations)),PluEq(L)]:
 return(makeSystem(Vars, [], Equations))
end proc:
##############################################################################
longLoop := proc(vi, ri::integer:=1, {given_vp:=NULL}, {a::complex:=1.})
#
#   vi   := these are the vectors generating the condition which we are
#             going to vary.
#   ri   := this is the seed for Random Initialization
#
#   given_vp -- if provided then is used as 'vp' and ONLY HALF
#               of the long loop is computed
global Coords, S, T, k, l, step_size, sol_tolerance;
local Sini, Tini, Tfin, Sfin, vp, i, j, AAA, s;
    Sini:=S:
    Tini:=T:

    if given_vp<>NULL then
      vp := given_vp;
    else
      randomize(ri):
      vp := [seq(evalm(1/100*RandomMatrix(1, k+l)+1/100*I*RandomMatrix(1, k+l)), i=1..l)]:
    fi;
    if debug_level >= 2
    then printf("longLoop: vp=%a\n",vp);
    fi;


    for j from 1 to l do
        Tfin:=makeS(stackmatrix(seq(vp[i],i=1..j), seq(vi[i],i=j+1..l))):
        Sfin := track(Tfin, Tini, Sini, 1,
                      hom_parameter_k = 1, max_step_size = step_size,
                      a_const = a)[2];
        # track solutions one by one
        if debug_level>10 then
            for i from 1 to nops(Sini) do
                s := op(1, track(Tfin, Tini, [Sini[i]], 1,
                                 hom_parameter_k = 1, max_step_size = step_size)[2]);
                if abs(s:-coords[1] - Sfin[i]:-coords[1])> sol_tolerance
                then
                    printf("longLoop: failed\n");
                    systemToFile(Tfin,"err.target");
                    systemToFile(Tini,"err.start.all");
                    solutionsAppendToFile(Tini,Sini,"err.start.all");
                    systemToFile(Tini,sprintf("err.start.%d",i));
                    solutionsAppendToFile(Tini,[Sini[i]],sprintf("err.start.%d",i));
                    quit;
                fi;
            od;
        fi;
        Sini:=Sfin:
        Tini:=Tfin:
    end do:

    if given_vp<>NULL then return(Sini); fi; # ONLY HALF is computed

    for j from 1 to l do
        Tfin:=makeS(stackmatrix(seq(vi[i],i=1..j), seq(vp[i],i=j+1..l))):
        Sfin := track(Tfin, Tini, Sini, 1,
                      hom_parameter_k = 1, max_step_size = step_size,
                      a_const = a)[2];
        # track solutions one by one
        if debug_level>10 then
            for i from 1 to nops(Sini) do
                s := op(1, track(Tfin, Tini, [Sini[i]], 1,
                                 hom_parameter_k = 1, max_step_size = step_size)[2]);
                if abs(s:-coords[1] - Sfin[i]:-coords[1])> sol_tolerance
                then
                    printf("longLoop: failed\n");
                    systemToFile(Tfin,"err.target");
                    systemToFile(Tini,"err.start.all");
                    solutionsAppendToFile(Tini,Sini,"err.start.all");
                    systemToFile(Tini,sprintf("err.start.%d",i));
                    solutionsAppendToFile(Tini,[Sini[i]],sprintf("err.start.%d",i));
                    quit;
                fi;
            od;
        fi;
        Sini:=Sfin:
        Tini:=Tfin:
    end do:

    return(Sini)
end proc:
##############################################################################
shortLoop := proc(vi, ri)
#
#   vi   := these are the vectors generating the condition which we are
#             going to vary.
#   ri   := this is the seed for Random Initialization
#
 global Coords, S, T, k, l, step_size:
 local Sini, Tini, Tfin, Sfin, vp, i, j, AAA, kk:
 Sini:=S:
 Tini:=T:

 randomize(ri):
 kk:= 1 + (rand() mod (l-1)):
 vp := [seq(evalm(1/100*RandomMatrix(1, k+l)+1/100*I*RandomMatrix(1, k+l)), i=1..2)]:
 vp := [vp[],evalm(vi[kk])]:
 for j from 1 to 3 do
     Tfin:=makeS(stackmatrix(seq(vi[i],i=1..kk-1), vp[j], seq(vi[i],i=kk+1..l))):
     AAA := track(Tfin, Tini, Sini, 1,
                  hom_parameter_k = 1, max_step_size = step_size):
     Sini := AAA[nops(AAA)];
     Tini:=Tfin:
 end do:
 return(Sini)
end proc:

#############################################################################
init_halfLoop := proc(v)
#
#   v   := these are the vectors generating the condition which we are
#           going to vary.
#
#   sets T2 to the system corresponding to new_vi
#   and S2 to its solutions
global S, T, step_size, S2, T2, halfLoop_mutation_index, k, l:
local AAA,vp,i,new_vi;
    new_vi := evalm(1/100*RandomMatrix(1, k+l)+1/100*I*RandomMatrix(1, k+l)):
    i := halfLoop_mutation_index;
    halfLoop_mutation_index := (i mod nops(v)) + 1;
    T2 := makeS(stackmatrix(seq(v[j],j=1..i-1), new_vi, seq(v[j],j=i+1..l)));
    AAA := track(T2, T, S, 1,
                  hom_parameter_k = 1, max_step_size = step_size):
    S2 := AAA[nops(AAA)];
    if nops(S)<>nops(S2) then
        error "failed to initialize halfLoop";
    fi;
end proc:

halfLoop := proc()
#   returns the solutions of T
global T, step_size, S2, T2;
local a::complex;
    a := RandomTools[Generate](float(range=0..1,method=uniform));
    a := evalf(exp(2*Pi*a*I));
    if debug_level > 2 then
        printf("halfLoop: a = %a\n", a);
    fi;
    return track(T, T2, S2, 1, a_const=a,
                 hom_parameter_k = 1, max_step_size = step_size)[2];
end proc:

##############################################################################
#
#   Group-based procedures
#
##################################################################################
makePointer := proc(A,B)
#
#  This creates a pointer such that A[i]:=B[pointer[i]].
#
 local pointer,p_index,ind,i,j,d:
 global nSols,sol_tolerance:

 if debug_level>=4 then
     printf("makePointer: sorted A = \n");
     print(sort(A,(a,b)->Re(a)<Re(b)));
     printf("makePointer: sorted B = \n");
     print(sort(B,(a,b)->Re(a)<Re(b)));
 fi;

 pointer:=array(1..nSols):
 p_index:=array(1..nSols):
 for i from 1 to nSols do
  j:=1:
# i->j if the corresponding points are within sol_tolerance
  while j<=nops(B) and abs(A[i]-B[j])>sol_tolerance do
      j:=j+1:
  end do:
  if (j>nops(B)) then
      if debug_level>=3
      then printf("makePointer: failed\n");
      fi;
      return NULL;
  fi;
  if debug_level>=3
  then printf("makePointer: %d -> %d, distance = %f\n",
             i,j,abs(A[i]-B[j]))
  fi;
  pointer[i]:=j:
  if p_index[j] = true then
      printf("makePointer: failed\n");
      return NULL;
  else
      p_index[j] := true;
  fi;
 end do:
 return(pointer)
end proc:
##############################################################################
makePermutation := proc(P)
#
#   This takes a permutation in one-line notation (a pointer)
# and converts it into cycle notation.
#
 global nSols:
 local w,c,S,ind:
 w:=[]:
 c:=[]:
 S:={seq(ind,ind=1..nSols)}:
 while S<>{} do
  if c=[] then
    c:=[min(op(S))]:
    S:=S minus {c[1]}:
   else
    if member(P[c[nops(c)]],S) then
     S:=S minus {P[c[nops(c)]]}:
     c:=[c[],P[c[nops(c)]]]:
    else
     if nops(c)<>1 then   w:=[w[],c]: end if:
     c:=[]:
    end if:
  end if:
 end do:
 if nops(c)<>1 then   w:=[w[],c]: end if:
 return(w)
end proc:
##############################################################################
makeGroup := proc(v, {strategy:=half})
local i, vp, newsize, size, fails, redundant, step, perms, newperms,
    End, Stop, P, pi, homotopy,
    st, total_time, grouporder_time, master_time;
global nSols, S, T, nsteps, step_size, Vars, Master,
    halfLoop_mutation_index;

    total_time := systemtime();
    grouporder_time := 0;

    # Make initial system (Called T, with initial solutions, called S)
    master_time := systemtime();
    T := makeS(Matrix([seq(v[i],i=1..l)])):
    S := solve(T):
    S := refine(S, T, error_tol=sol_tolerance*0.1, max_iterations=10):
    S := sort(S,(a,b)->Re(a:-coords[1])<Re(b:-coords[1])):

    if debug_level>0 then
        printf("makeGroup: |Master| = %d\n", nops(S));
    fi;
    if nops(S)<>nSols then
        error "unexpected number of Master solutions";
    fi;

    # This is the first coordinate of original list of solutions
    Master:=[seq(S[ind]:-coords[1],ind=1..nSols)]:

    master_time := systemtime()-master_time;


    if strategy=half then
        halfLoop_mutation_index := 1;
        init_halfLoop(v);
    fi;

    size := 1;
    step := 0;
    fails := 0;
    perms := [];
    newperms := [];
    redundant := 0;

    while step<30 and size<nSols! do
        if strategy=short then
            End := shortLoop(v, step);
        elif strategy=long then
            End := longLoop(v, step);
        elif strategy=half then
         End := halfLoop(step);
        else error "unknown strategy";
        fi;
        End := refine(End, T, error_tol=sol_tolerance*0.1, max_iterations=3):

        Stop:=[seq(End[ind]:-coords[1],ind=1..nSols)]:
        if nops(convert(Stop,set)) = nSols then
            P:=makePointer(Master,Stop);
            if P=NULL then
                fails:=fails+1:
                lprint("We had a failure!");
            else
                pi:=makePermutation(P):
                if pi <> [] then
                    newperms:=[perms[],pi];
                end if:

                # time it
                st := systemtime();
                newsize := grouporder(permgroup(nSols,convert(newperms,set))):
                grouporder_time := grouporder_time + systemtime() - st;
                if debug_level>0 then
                    printf("makeGroup: grouporder took %f so far\n", grouporder_time);
                fi;

                if newsize>size then
                    perms := newperms;
                    size := newsize;
                else
                    redundant := redundant + 1;
                    if debug_level>0 then
                        printf("makeGroup: generated loop is redundant\n");
                    fi;
                    if strategy=half then
                        init_halfLoop(v);
                    fi;
                fi;
            fi;
        else
            fails:=fails+1:
            lprint("We had a failure!");
        end if:
        step := step+1:
        # This is handy to see how the generation of the group progresses
        if debug_level>0 then
            printf("makeGroup(%f far from done): step=%d, fails=%d, redundant=%d.\n",
                   evalf(log(nSols!/size)), step, fails, redundant);
        fi;
    end do:
    total_time := systemtime() - total_time;
    return ['step'=step,'fails'=fails,'groupsize'=size,'perms'=perms,
            'mapletime'=grouporder_time, 'totaltime'=total_time, 'mastertime'=master_time];
end proc:

systemtime := proc()
    return parse(ssystem("date +%s")[2]);
end proc:

makeCoordsVars := proc(lambda, mu, num)
global Coords, Vars, k, l;
local i, j;
    k:=nops(lambda):
    l:=(sum(lambda[i]+mu[i],i=1..k) + num)/k:

    # names of vars: "aibj" where (i,j) is the position in the matrix
    Coords:=Matrix(k,k+l,0):
    for i from 1 to k do
        Coords[i,i+lambda[k+1-i]]:=1:
        for j from i+lambda[k+1-i]+1 to l+i-mu[i] do
            Coords[i,j]:=cat(a,i,b,j):
        end do:
    end do:

    Vars := sort(convert(indets(Coords),list));
end proc:


processSchubertData := proc(SchubertData::list, seed::integer:=1)
global Vars,Indets,nSols,lambda,mu,num,k,l,Coords,ConstantEquations;
local L,i,j;
    randomize(seed):   #
    ###############################################
    nSols:=SchubertData[1]:
    lambda:=SchubertData[2][1]:
    mu:=SchubertData[2][2]:
    num:=SchubertData[2][3]:
    ###############################################
    makeCoordsVars(lambda,mu,num);
    ###############################################
    ConstantEquations := makeEquations( ['RandomMatrix(l,k+l)/100 + I*RandomMatrix(l,k+l)/100'$(num-1)] );
end proc:


###############################################################################
# Launches GAP to see if "perms" generate a full symmetric group
isFullSymmetricViaGAP := proc(f::string,perms::list)
local g, p;
  g := ""||f||".gapjob";
  fopen(g,WRITE);
  fprintf( g, "u := Group(\n" );
  for p in perms do
   if lhs(p) = 'cycle' then
     fprintf( g, "(%q),\n", rhs(p)[] );
   elif lhs(p) = 'plist' then
     fprintf( g, "PermList(%a),\n", rhs(p) );
   else error "uknown type of permutation";
   fi;
  od;
  fprintf( g, "());\n");
  fprintf( g, "if NrMovedPoints(u)=%d and IsNaturalSymmetricGroup(u) then RemoveFile(\"%s\"); fi;\n", nSols, g);
  fprintf( g, "QUIT;\n");
  fclose(g);
  ssystem("gap "||g);
  #print(ssystem("c/gap4r4/bin/gap.bat"||g));
  return evalb(not FileTools[Exists](g));
end proc:

####################################################################
# determines if the Galois group of the "Pieri Homotopy Node" f
# is the full symmetric S_n. Returns n if yes, 0 if undetermined.
computeGalois_PHN := proc(f::string, strategy)::integer;
global PHN_is_full_symmetric, PHN_perms, PHN_p, PHN_children, PHN_master, PHN_L,
       ConstantEquations, Vars, Coords, nSols, S, T, Master, halfLoop_mutation_index;
local is_full_symmetric, lambda, mu, num, v, L, children, master, c, st_sol, pos, diff_row, col, M, rows,
      c_size, perms, shift, i, total_time, step, fails,End,Stop,P,pi;

  if debug_level >= 1 then
      printf("computeGalois: %s, strategy=%a\n", f, strategy);
  fi;
  PHN_is_full_symmetric := false; # means "unknown"
  PHN_perms := []; # the list of permutations
  PHN_children := [];
  PHN_master := [];
  PHN_L := [];
  read f; # input node data from the file
  L := PHN_L;
  children := PHN_children;
  master := PHN_master;
  if nops(master) = 0 then error "no master set"; fi;
  lambda := PHN_lambda;
  mu := PHN_mu;
  num := PHN_num;
  is_full_symmetric := PHN_is_full_symmetric;
  perms := PHN_perms;

  # if already processed...
  if is_full_symmetric then return nops(master); fi;

  # process children and initialize perms
  #c_size := map(c->computeGalois_PHN(c, strategy), children);
  #if nops(perms) = 0 then
  #  shift := 0;
  #  for i from 1 to nops(children) do
  #    if c_size[i] = 0 then return 0; fi; # if a child fails
  #    # throw in two permutations that generate
  #     S_{c_size[i]} for child i
  #    if c_size[i] > 1 then
  #        perms := [ perms[], 'cycle' = [1+shift,2+shift],
  #                   'cycle' = [$(1+shift)..(c_size[i]+shift)] ];
  #    fi;
  #    shift := shift + c_size[i];
  #  od;
  #fi;

  # Initialization
  printf("Computing node "||f||"\n");
  # total_time := systemtime();
  makeCoordsVars(lambda,mu,num);
  ConstantEquations := makeEquations(L[1..num-1]);
  T := makeS(L[num]): # initial system
  S := map(makeSolution, master);        # initial solutions

  v := convert(L[num], listlist); # used for compatibility

  nSols := nops(master);
  if debug_level>0 then
        printf("|master| = %d\n", nSols);
  fi;
  if nSols = 1 then
    perms := ['plist'=[1]];
    is_full_symmetric := true;
  else
      checkST();
  fi;


  # This is the first coordinate of original list of solutions
  Master:=[seq(S[ind]:-coords[1],ind=1..nSols)]:

  if strategy=half then
        halfLoop_mutation_index := 1;
        init_halfLoop(v);
  fi;

  step := 0;
  fails := 0;
  while step<30 and not is_full_symmetric do
        if strategy=short then
            End := shortLoop(v, step);
        elif strategy=long then
            End := longLoop(v, step);
        elif strategy=half then
            End := halfLoop(step);
        else error "unknown strategy";
        fi;
        #End := refine(End, T, error_tol=sol_tolerance*0.1, max_iterations=10):

        Stop:=map(s->s:-coords[1], End):
        if nops(convert(Stop,set)) = nSols then
            if debug_level>1 then
                print(v, Coords, master, map(s->s:-coords,End), Master, Stop);
            fi;
            P:=makePointer(Master,Stop);
            if P=NULL then
                fails:=fails+1:
                lprint("We had a failure!");
            else
                pi:=[seq(P[ind], ind=1..nSols)] :
                if pi <> [] then
                    perms:=['plist' = pi, perms[]];
                end if:
                is_full_symmetric := isFullSymmetricViaGAP(f,perms);
            fi;
        else
            fails:=fails+1:
            lprint("We had a failure!");
        end if:
        step := step+1:
        # This is handy to see how the generation of the group progresses
        if debug_level>0 then
            printf("Galois(%s): step=%d, fails=%d.\n",
                   f, step, fails);
        fi;
    end do:
    # total_time := systemtime() - total_time;
    print('step'=step, 'fails'=fails, 'perms'=perms);

    if is_full_symmetric then
      fopen(f,APPEND);
      fprintf(f, "PHN_perms := %a ;\n", perms);
      fprintf(f, "PHN_is_full_symmetric := true ;\n");
      fclose(f);
      return nops(master);
    fi;
    return 0;
end proc:

computeMaster_PHN := proc(f::string)
global PHN_p, PHN_children, PHN_master, PHN_L, ConstantEquations, k, l, Vars, Coords;
local lambda, mu, num, v, L, children, master, c, st_sol, pos, diff_row, col, M, rows;

  PHN_children := [];
  PHN_master := [];
  PHN_L := [];
  read f; # input node data from the file
  L := PHN_L;
  children := PHN_children;
  master := PHN_master;
  lambda := PHN_lambda;
  mu := PHN_mu;
  num := PHN_num;
  makeCoordsVars(lambda,mu,num);
  v := Vars; # variables of the node

  if nops(master) = 0 then
    if nops(children) = 0 # or num < 4 (to fix old phc bug)
    then
      makeCoordsVars(lambda,mu,num);
      ConstantEquations := makeEquations(L[1..num-1]);
      master := map(s->s:-coords, solve(makeS(L[num])));
    else
        st_sol := [];
            for c in children do
            computeMaster_PHN(c);

            PHN_children := [];
            PHN_master := [];
            PHN_L := [];
            read c; #read data for the child node

            printf("Processing "||f||" <<< "||c||"\n");
            makeCoordsVars(PHN_lambda,PHN_mu,PHN_num);

            st_sol := [st_sol[],
                       map(sol->map(proc(x)
                                        if member(x,Vars,'pos') then return sol[pos]; else return 0; fi;
                                    end proc, v), PHN_master)[]];
        od;

        # make the target system without the last equation
        makeCoordsVars(lambda,mu,num);
        ConstantEquations := makeEquations(L[1..num-1]);

        # make the "start" matrix
        k := nops(lambda):
        l := (sum(lambda[i]+mu[i],i=1..k) + num)/k:
        rows := convert({$1..k+l} minus {seq(l+i-mu[i],i=1..k)}, list);
        M := SubMatrix(IdentityMatrix(k+l), rows, [1..k+l]):

        master :=  map(s->s:-coords, trackSchubert(st_sol, M, L[num]));
    fi;
    master := sort(master,(a,b)->Re(a[1])<Re(b[1])):
    fopen(f,APPEND);
    fprintf(f, "PHN_master := %a ;\n", master);
    fclose(f);
  fi;
end proc:

trackSchubert := proc(st_sol::list, A, B)
global T, S, k, l;
      #initialize globals
      S := map(makeSolution,st_sol); #solutions
      T := makeS(A); # system
      if debug_level>0 then checkST(); fi;
      return longLoop(convert(A,listlist), given_vp=convert(B,listlist), a=evalf(exp(I*rand())));
end proc:

makePieriFilename := proc(lambda, mu, num)
local f::string, i::integer;
global PIERIsubdir;
    f := PIERIsubdir;
    for i from 1 to nops(lambda) do
        f := ""||f||(lambda[i])||(mu[i]);
    od;
    return ""||f||"."||num;
end proc:

createPieriHomotopyNode := proc(lambda, mu, num, L::list)
local k, l, f, i, child_f, new_mu, sys, children;
    k := nops(lambda):
    l := (sum(lambda[i]+mu[i],i=1..k) + num)/k:
    f := makePieriFilename(lambda, mu, num);
    if not FileTools[Exists](f) then
      fopen(f,WRITE);
      print(f);
      fprintf(f,"PHN_lambda := %a; PHN_mu := %a; PHN_num := %a;\nPHN_L := %a ;\n",
              lambda, mu, num, L[1..num]);
      children := [];
      for i from 1 to nops(mu) do
        new_mu := mu;
        new_mu[i] := new_mu[i]+1;
        if num > 1
           and (i=1 or (i>1 and new_mu[i]<=new_mu[i-1]))
           and (i+lambda[k+1-i] <= l+i-new_mu[i])
        then
           child_f := createPieriHomotopyNode(lambda, new_mu, num-1, L);
       children := [children[], child_f];
        fi;
      od;
      fprintf(f,"PHN_children := %a ;\n", children);
      close(f);
    fi;
    return f;
end proc:

setupPieriHomotopyNodes := proc(SchubertData::list,  seed::integer:=1)
global k, l, PIERIsubdir;
local nSols, lambda, mu, num, L, filename;
    randomize(seed):   #
    ###############################################
    nSols:=SchubertData[1]:
    lambda:=SchubertData[2][1]:
    mu:=SchubertData[2][2]:
    num:=SchubertData[2][3]:

    k:=nops(lambda):
    l:=(sum(lambda[i]+mu[i],i=1..k) + num)/k:

    PIERIsubdir := "";
    filename := makePieriFilename(lambda, mu, num);
    PIERIsubdir := "PIERI-"||filename||"/";
    FileTools[MakeDirectory](PIERIsubdir, 'recurse'=true);
    L := ['RandomMatrix(l,k+l)/100 + I*RandomMatrix(l,k+l)/100'$num];
    createPieriHomotopyNode(lambda, mu, num, L);
end proc:

makeSchubertProblem := proc(v, filename::string, {strategy:=half}, {num_nodes:=-1})
local num, mastername, i, vp, newsize, size, fails, redundant, step, perms, newperms,
    End, Stop, P, pi, homotopy, name,
    st, total_time, grouporder_time, master_time;
global nSols, S, T, nsteps, step_size, Vars, Master,
    halfLoop_mutation_index;

    Vars:=convert(indets(Coords),list);

    # Make initial system (Called T, with initial solutions, called S)
    T := makeS(Matrix([seq(v[i],i=1..l)])):
    S := solve(T):
    S := refine(S, T, error_tol=sol_tolerance*0.1, max_iterations=10):
    S := sort(S,(a,b)->Re(a:-coords[1])<Re(b:-coords[1])):

    if debug_level>0 then
        printf("makeGroup: |Master| = %d\n", nops(S));
    fi;
    if nops(S)<>nSols then
        error "unexpected number of Master solutions";
    fi;

    # dump master system
    name := ""||filename||".0";
    systemToFile(T,name);
    solutionsAppendToFile(T,S,name);

    num := num_nodes;

    if strategy=half then
        if num < 0 then num := 1; fi;
        halfLoop_mutation_index := 1;
        for i from 1 to num do
            init_halfLoop(v);
            name := ""||filename||"."||i;
            systemToFile(T2,name);
        od;
    fi;
end proc:

#########################################################################
# checks if solutions S are distinct and satisfy the system T
# (uses "sol_tolerance")
checkST := proc()
global nSols, S, T, sol_tolerance;
local s1,s2,n2check;
    nSols := nops(S);
    n2check := min(nSols, 50);
    computeResiduals(T,S[1..n2check]);
    for s1 from 1 to nSols do
        if s1 <= n2check then
        if S[s1]:-res > sol_tolerance then
            printSystem(T);
            printSolutions(T,[S[s1]]);
            printf("residual = %f\n", S[s1]:-res);
            error "residual of "||s1||" is too large";
        fi;
        for s2 from s1+1 to nSols do
            if abs(sum(S[s1]:-coords[i] - S[s2]:-coords[i], i=1..nops(S[s1]:-coords))) < sol_tolerance
            then
                printSolutions(T,[S[s1],S[s2]]);
                error "solutions "||s1||" and "||s2||" are too close";
            fi;
        od; fi;
    od;
end proc:

