//27lines.sing
//
//  Opening and closing Data every 100 instances cuts data useage in half
//
// This follows a careful approach to computing the 27 lines.
//   It runs a loop, that in each step randomly generates a cubic, then checks if it is nonsingular.
//   If not, it iterates the loop, generating another cubic...
//   If it is nonsingulaar, it uses the quick and optimistic method of simple local coordinates
//    (embodied in the map Lines) and simple elimination of the first variable.
//   If that succeeds (eliminant is square-free of degree 27=numSols), it writes the degrees of the factors
//    to a file.
//   Otherwise, it tries many (topTrials) times to use more complicated, random local coordinates for the Grassmannian
//    (embodied in the map rLine, which changes in each iteration).
//    Once that finds a zero-dimensional radical ideal of degre numSols, it does a hybrid factor elimination based
//      primary decomposition (myDecomposition), makes sure that the degrees of the components add up to numSOls.
//    Any failures are written to Trouble.txt
//
//  One goal of this is to get data from every nonsingular cubic.  Not one is wasted.
//
//
option(redSB); 
LIB "matrix.lib"; 
LIB "linalg.lib";

////////////////////////////////////////////////////////////////////////////////
int myPrime = ;          //  Characteristic of field
int Ntrys = 1000000;      //  Number of Frobenius elements computed in one run of this file
int nOpenClose = 100; int ocCounter=0;   //  Every nOpenClose, Data is closed and then opened.
                                         //   This is a cheap method of garbage collection
//Ntrys = 100;system("--ticks-per-sec", 100);
int topTrials = 300;       //  Number of attempts to find a radical ideal
int numSols = 27;          //  Expected number of solutions
open("lastTime.ascii");          // read the timing from previous runs
execute(read("lastTime.ascii"));
close("lastTime.ascii");
int TT = timer;
////////////////////////////////////////////////////////////////////////////////
//   This computes an eliminant w.r.t. variable i
proc eliminant (ideal G, int i)  
{  
  ideal B = kbase(G);  
  return(charpoly(coeffs(reduce(var(i)*B,G),B), varstr(i)));   
}  
/////////////////////////////////////////////////////////////////////////////////
//
// This computes a primary/comaximal decomposition of the zero-dimensional ideal givenIdeal,
//   using variable-by-variable elimination, and then running primdecSY on the result
// Its output is a list of comaximal ideals.  The reason for this is that Frank
//   first implemented the variable-by-variable elimination, which failed in a few cases,
//   but he was spooked by the disclaimer in the documentation:
// "The procedures are implemented to be used in characteristic 0."
// "They also work in positive characteristic >> 0."
//
proc myDecomposition( ideal givenIdeal)
{
  poly ff;
  list Ideals, newIdeals, Factors;
  int nVar, nIdeal, nFactor;
  //
  Ideals = givenIdeal;
  for (nVar=1; nVar<=nvars(basering); nVar=nVar+1) {
    newIdeals = list();
    for (nIdeal=1; nIdeal<=size(Ideals); nIdeal=nIdeal+1) {
      ff = eliminant( Ideals[nIdeal], nVar );
       Factors = factorize(ff,2);
         for (nFactor=1; nFactor<=size(Factors[1]); nFactor=nFactor+1) {
         newIdeals = insert( newIdeals, std( Ideals[nIdeal] + ideal(Factors[1][nFactor]^(Factors[2][nFactor]) ) ) );       
       }
    }
    Ideals = newIdeals;
  }
  //   Now we run a primary decomposition on the results
  newIdeals = list();
  for (nIdeal=1; nIdeal<=size(Ideals); nIdeal=nIdeal+1) {
    Factors = primdecSY(Ideals[nIdeal]);
    //  There is an issue with the output of primdecSY
    //   If there is only one prime component, then the output is a list of length 1, and its entry is a
    //     list of length 2 containing the primary component and the prime component.  (This is not documented !!!!)
    //   When there are two or more, the output is a list of two lists, one listing the primary components,
    //    and the second listing the prime components.   This is documented.
    if (size(Factors)==1) {                        
      newIdeals = insert( newIdeals, std(Factors[1][1]) );      
    }  else { 
      for (nFactor=1; nFactor<=size(Factors[1]); nFactor=nFactor+1) {
        newIdeals = insert( newIdeals, std(Factors[1][nFactor]) );      
      }
    }
  }
  return(newIdeals);
}
/////////////////////////////////////////////////////////////////////////////////

int i,ii, d,  cycleplace, nSuccess, nTrials, isRadical;
intmat M;
intvec cycles; 
string degMultOut,  Original_Cubic; 
/////////////////////////////////////////////////////////////////////////////////  
open(":a Data");
/////////////////////////////////////////////////////////////////////////////////  
// Set up the rings
//  R is the ring of the homogeneous cubic
ring R = myPrime, (x,y,z,w), dp;
 poly FR;
 ideal rJac;
// StT is the Stiefel ring + variable t
ring StT = myPrime, (x(1..2),y(1..2),t), dp;
 ideal IT;
 //  This uses the standard local coordinates (P_12 <> 0) for the Grassmannian
 map Line  = R, 1, t, x(1)+t*y(1), x(2)+t*y(2);
 map rLine ;
// St is the Stiefel ring
ring St = myPrime, (x(1..2),y(1..2)), dp;
 ideal I, J;
 poly f;
 list L, output;
/////////////////////////////////////////////////////////////////////////////////

nSuccess = 0;
while (nSuccess<Ntrys){
  /////////////////////////////////
  if (ocCounter==nOpenClose) {
    close(": Data");
    ocCounter = 0;
    open(":a Data");
  }
  /////////////////////////////////
  ocCounter=ocCounter+1;
  setring(R);
  // Generate a random cubic
  FR = randomid(maxideal(3),1,myPrime)[1];
  // Save it for further analysis, if the computaiton with it fails
  short=0;
  Original_Cubic = sprintf("%s  FR =  %s;",nSuccess+1, FR);

  // Test that the cubic is nonsingular
  rJac = radical( ideal(jacob(FR)) + ideal(FR) );
  rJac = quotient(rJac, maxideal(1));
  if (1 == rJac[1]) {           //  Only proceed if the cubic is nonsingular.
                                //  This loop computes the ideal of the lines, first using the simple coordinates in Lines()
    setring(StT);
    IT = minor( coeffs( Line(FR) ,t), 1);
    setring(St);
    I = std(fetch(StT,IT));
    // Try to eliminate with the first variable
    f = eliminant(I, 1);
    L= factorize(f,1);
    // Compute the sum of the degrees of (radicals of) the factors
    d = 0;
    for (i=1; i<= size(L[1]); i++) {
      d = d + deg(L[1][i]);
    }
    // This implicitly tests if square-free, and if the degree of the eliminant is numSols
    if (d == numSols) {
      cycles=0; 
      for (i=1; i<=size(L[1]); i++) { 
        cycles[i]= deg(L[1][i]); 
      }
      // Cycles records the degreees of the factors, it sorts them and writes to a file
      write(":a Data",sort(cycles)[1]);
      nSuccess = nSuccess + 1;
    } else {
      // This block is executed if the original optimistic computation fails
      //
      //   If I is not zero dimensional or has multiplicity less than numSols, and have not tried topTrials, we seek a 
      //   different propitious set of local coordinates for which the ideal has the expected dimension and multiplicity
      //
      nTrials=0;
      while ( ((dim(I)!=0 or mult(I)!=numSols) or isRadical==0) and nTrials<topTrials ) {
        nTrials = nTrials + 1;
        setring(StT);
        M = random(myPrime,4,4);
        rLine = R, M[1,1]+M[1,3]*x(1)+M[1,4]*x(2)+t*(M[1,2]+M[1,3]*y(1)+M[1,4]*y(2)),
                   M[2,1]+M[2,3]*x(1)+M[2,4]*x(2)+t*(M[2,2]+M[2,3]*y(1)+M[2,4]*y(2)),
                   M[3,1]+M[3,3]*x(1)+M[3,4]*x(2)+t*(M[3,2]+M[3,3]*y(1)+M[3,4]*y(2)),
                   M[4,1]+M[4,3]*x(1)+M[4,4]*x(2)+t*(M[4,2]+M[4,3]*y(1)+M[4,4]*y(2)) ;
        IT = minor( coeffs( rLine(FR) ,t), 1);
        setring(St);
        I = std(fetch(StT,IT));
        // Check for dimension and multiplicity before computing and checking for radical and then decomposing
        if (dim(I)==0 and mult(I)==numSols) {
          J = quotient(I,radical(I));
          if (J[1]==1) {
            // Compute a decomposition using eliminants	
            L = myDecomposition(I);
            cycles=0; 
            for (i=1; i<=size(L); i++) { 
              cycles[i]= mult(L[i]); 
            }
            // cycles records the degrees of each ideal in the decomposision
            // Double-check that the sum of the degrees/multiplicities is numSls
            if (sum(cycles)==numSols) {
              write(":a Data",sort(cycles)[1]);
             nSuccess = nSuccess + 1;
             isRadical=1;
            } 
          }
        }
      }
      if ( (dim(I)!=0 or mult(I)!=numSols or isRadical==0) and nTrials>=topTrials ) {
        write(":a Trouble.txt",Original_Cubic);
      }
    }  // closes the case that we needed to use a more involved method of elimination
  }    // closes that the cubic is nonsingular
}      // closes the main loop

close(": Data");

write(":w lastTime.ascii", sprintf("int lastTime = %s;",timer-TT+lastTime));
write(":a times",timer-TT+lastTime);
write(":w Time-sec",myPrime);
write(":a Time-sec",timer-TT+lastTime);

quit;
