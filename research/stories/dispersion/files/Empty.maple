#Empty.maple
#
# This maple file shows that when the weights are a[1]....a[9] chosen to be 1,2,3,4,5,6,7,8,1,
#  there are no degenerate critical points of the 'dispersion relation'.
# It also creates plots of the 'dispersion relation'.
#
with(LinearAlgebra):
with(Groebner):

#
#  The specil specialization
# 
for i from 1 to 9 do
 a[i] := i:
 a[9]:=1:
lprint(a[i]);
end do:

Aa := Matrix([
   [2*a[1]+a[2]+a[3]+2*a[4]+a[5]+a[6]+a[9] - a[1]*(z[2]+z[2]^(-1)) - a[4]*(z[1]+z[1]^(-1)),
   -(a[2]*z[2] + a[6]*z[2]^(-1) + a[3]*z[1] + a[9]*z[1]^(-1) + a[5])],
  [-(a[2]*z[2]^(-1) + a[6]*z[2] + a[3]*z[1]^(-1) + a[9]*z[1] + a[5]), 
   a[2]+a[3]+a[5]+a[6]+2*a[7]+2*a[8]+a[9] - a[7]*(z[2]+z[2]^(-1)) - a[8]*(z[1]+z[1]^(-1))]]):

TA:=Trace(Aa):
DA:=Determinant(Aa):

sCP:=numer(lam^2 - lam*TA + DA):

DA1:=expand(simplify(diff(DA,z[1]))):
DA2:=expand(simplify(diff(DA,z[2]))):

sN1:=numer(lam*diff(TA,z[1]) - DA1):
sN2:=numer(lam*diff(TA,z[2]) - DA2):

DA11:=expand(simplify(diff(DA,z[1],z[1]))):
DA21:=expand(simplify(diff(DA,z[2],z[1]))):
DA22:=expand(simplify(diff(DA,z[2],z[2]))):

Hess:=(numer(lam*diff(TA,z[1],z[1])-DA11)*numer(lam*diff(TA,z[2],z[2])-DA22)
-numer(lam*diff(TA,z[1],z[2])-DA21)^2):

##########################################################################################
#
#   This checks that there are no degenerate critical points
#
Eqs:=subs(z[1]=u,z[2]=v,[sCP, Hess, sN1, sN2]):
Groebner[Basis]([Eqs[],u*w-1, v*x-1],tdeg(lam,u,v,w,x));

#################################################################################
#
#  Comment out the 'quit;' to make the plots
#
quit;

#################################################################################
with(plots):
#
#  Change coordinates to the k-variables
#
TAk := simplify(subs(z[1]=exp(I*k[1]), z[2]=exp(I*k[2]), TA)):
DAk := simplify(subs(z[1]=exp(I*k[1]), z[2]=exp(I*k[2]), DA)):
F:= lam^2 - lam*TAk + DAk:

#################################################################################
#
#  The discriminant is always positive
#
#plotsetup(gif,plotoutput="B.gif",plotoptions=`height=1000,width=1500`): 
#G:= TAk^2-4*DAk:
#plot3d( G, k[1]=-Pi/2..3/2*Pi, k[2]=-Pi/2..3/2*Pi);
#
#################################################################################
#
#  The two branches as well as the discriminant is always positive
#
#LAMS :={}:
#for i from 1 to 10 do
# for j from 1 to 10 do
##  Ls := sort([fsolve(subs(k[1]=2.*i*Pi/10, k[2]=2.*j*Pi/10,F)=0)]):
##  LAMS := LAMS union {fsolve(subs(k[1]=2.*i*Pi/10, k[2]=2.*j*Pi/10,F)=0)};
##  lprint(Ls[2]-Ls[1]);
#  LAMS := LAMS union {evalf(subs(k[1]=2.*i*Pi/10, k[2]=2.*j*Pi/10, G))};
# end do;
#end do;
#min(LAMS),max(LAMS);   0., 76.88061302

#
#  These are the two branches of the eigenvalues
#
Npts:=27:
L1:=(TAk/2 - sqrt(TAk^2/4-DAk))/12:
L2:=(TAk/2 + sqrt(TAk^2/4-DAk))/12:
Ze  := plot3d(  0, k[1]=-Pi/2..3/2*Pi, k[2]=-Pi/2..3/2*Pi,grid=[Npts,Npts]):
La1 := plot3d( L1, k[1]=-Pi/2..3/2*Pi, k[2]=-Pi/2..3/2*Pi,grid=[Npts,Npts]):
La2 := plot3d( L2, k[1]=-Pi/2..3/2*Pi, k[2]=-Pi/2..3/2*Pi,grid=[Npts,Npts]):
Edges:=[spacecurve( [k[1],  -Pi/2, subs(k[2]=-Pi/2,L1)],  k[1]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
        spacecurve( [k[1], 3/2*Pi, subs(k[2]=3/2*Pi,L1)], k[1]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
        spacecurve( [ -Pi/2, k[2], subs(k[1]=-Pi/2,L1)],  k[2]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
        spacecurve( [3/2*Pi, k[2], subs(k[1]=3/2*Pi,L1)], k[2]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
	spacecurve( [k[1],  -Pi/2, subs(k[2]=-Pi/2,L2)],  k[1]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
        spacecurve( [k[1], 3/2*Pi, subs(k[2]=3/2*Pi,L2)], k[1]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
        spacecurve( [ -Pi/2, k[2], subs(k[1]=-Pi/2,L2)],  k[2]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
        spacecurve( [3/2*Pi, k[2], subs(k[1]=3/2*Pi,L2)], k[2]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
	spacecurve( [k[1],  -Pi/2, 0],  k[1]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
        spacecurve( [k[1], 3/2*Pi, 0], k[1]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
        spacecurve( [ -Pi/2, k[2], 0],  k[2]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3),
        spacecurve( [3/2*Pi, k[2], 0], k[2]=-Pi/2..3/2*Pi,numpoints=Npts, color=brown, thickness=3)]:
eps:=0.3:
Axes :=[ spacecurve([ 3*Pi/2+eps, -Pi/2-eps, t ], t=-eps..6, numpoints=2, color=black, thickness=2),
         spacecurve([ 3*Pi/2+eps, -Pi/2-eps+t , 0 ], t=-eps..6, numpoints=2, color=black, thickness=2),
         spacecurve([ 3*Pi/2+eps-t, -Pi/2-eps , 0 ], t=-eps..6, numpoints=2, color=black, thickness=2)]:

DR := [La1,La2, Ze, Edges[],Axes[]]:

Pic:= ang -> display(DR,orientation=[ang,70]):

NFr:=180:
plotsetup(gif,plotoutput="movie_sm.gif",plotoptions=`height=600,width=600`):
#
animate(Pic,[ang],ang=135..135+(1-1/NFr)*360,scaling=constrained,axes=none,frames=NFr,paraminfo=false);

plotsetup(gif,plotoutput="A.gif",plotoptions=`height=1000,width=1000`):
#plotsetup(ps,plotoutput=`A.eps`,plotoptions=`color,portrait,width=3in,height=3in,noborder`):
#display(Pic(63),scaling=constrained);
display(Pic(135),scaling=constrained);

