    |\^/|     Maple 18 (X86 64 LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2014
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
#Corollary8.maple
#
#  This computes the multiplicity of the scheme S/I, where I is minimally generated by
# t linear forms raised to the power r+1.   This is used in the simplification of 
# Corollary 8
#
#################################################################################
#interface(quiet=true):
#
#  Hilbert function of S = R[x,y,z]
#
> HPS := d -> (d+2)*(d+1)/2:
#
#  Let I = ideal L_1^{r+1}, ..., L_t^{r+1}, 
#
#  where L_i is linear in x,y and these powers are linearly independent.
#    (t<=r+2, at least)
#
#  Schenck-Stillman describe the Hilbert-Burch resolution of R[x,y]/I,
#   tensoring with S gives the resolution of S/I.
#
#  S(-r-1-a)^{s_1} \oplus S(-r-2-a)^{s_2}  --> S(-r-1)^t --> S --> S/I
#
# where we have:
#
#  a := \floor (r+1)/(t-1) 
#
# and
#
> s1:=(t-1)*a+t-r-2:
> s2:=(t-1)-s1:
#
#  Thus the Hilbert function of S/I is
#
> Mult := s1*HPS(d-(r+1+a))+s2*HPS(d-(r+2+a)) - t*HPS(d-(r+1)) + HPS(d):
#
#  This has a simple form
#
> BNC:= x -> x*(x-1)/2;
                           BNC := x -> 1/2 x (x - 1)

#
> BNC(a+r+2) - t*BNC(a+1);
                     (r + 2 + a) (r + 1 + a)   t (a + 1) a
                     ----------------------- - -----------
                                2                   2

#
> expand(BNC(a+r+2) - t*BNC(a+1)-Mult);
                                       0

#
#  Now let us compute the Hilbert function
#
> HFS:= d ->  piecewise(d<0, 0, d>=0, HPS(d)):
#
#  This is for t=3.
#
> interface(quiet=true):
  r |  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
 ---+------------------------------------------------------------------------------------
  1 |  1   3   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4 
  2 |  1   3   6   7   7   7   7   7   7   7   7   7   7   7   7   7   7   7   7   7   7 
  3 |  1   3   6  10  12  12  12  12  12  12  12  12  12  12  12  12  12  12  12  12  12 
  4 |  1   3   6  10  15  18  19  19  19  19  19  19  19  19  19  19  19  19  19  19  19 
  5 |  1   3   6  10  15  21  25  27  27  27  27  27  27  27  27  27  27  27  27  27  27 
  6 |  1   3   6  10  15  21  28  33  36  37  37  37  37  37  37  37  37  37  37  37  37 
  7 |  1   3   6  10  15  21  28  36  42  46  48  48  48  48  48  48  48  48  48  48  48 
  8 |  1   3   6  10  15  21  28  36  45  52  57  60  61  61  61  61  61  61  61  61  61 
  9 |  1   3   6  10  15  21  28  36  45  55  63  69  73  75  75  75  75  75  75  75  75 
 10 |  1   3   6  10  15  21  28  36  45  55  66  75  82  87  90  91  91  91  91  91  91 
 11 |  1   3   6  10  15  21  28  36  45  55  66  78  88  96 102 106 108 108 108 108 108 
 12 |  1   3   6  10  15  21  28  36  45  55  66  78  91 102 111 118 123 126 127 127 127 
 13 |  1   3   6  10  15  21  28  36  45  55  66  78  91 105 117 127 135 141 145 147 147 
 14 |  1   3   6  10  15  21  28  36  45  55  66  78  91 105 120 133 144 153 160 165 168 
 15 |  1   3   6  10  15  21  28  36  45  55  66  78  91 105 120 136 150 162 172 180 186 
 ---+------------------------------------------------------------------------------------
  r |  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
