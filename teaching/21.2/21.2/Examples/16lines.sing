//16lines.sing
//
//We investigate the lines in 4-space that lie on two quadrics.
////////////////////////////////////////////////////////////////////////////////
option(redSB);
LIB "matrix.lib";
LIB "linalg.lib";
LIB "rootsur.lib";
////////////////////////////////////////////////////////////////////////////////
//   This computes an eliminant w.r.t. variable i
proc eliminant (ideal G, int i)
{
  ideal B = kbase(G);
  return(charpoly(coeffs(reduce(var(i)*B,G),B), varstr(i)));
}
////////////////////////////////////////////////////////////////////////////////
int myPrime = 0;
int myCoeffs = 50;

//  R is the ring of the quadrics
ring R = myPrime, (v,w,x,y,z), dp;
 poly QI,QT;
 ideal rJac;
// StT is the Stiefel ring + variable t
ring StT = myPrime, (x(1..3),y(1..3),t), dp;
 ideal IT;
 //  This uses the standard local coordinates (P_12 <> 0) for the Grassmannian
 map Line  = R, 1, t, x(1)+t*y(1), x(2)+t*y(2), x(3)+t*y(3);
 map rLine ;
// St is the Stiefel ring
ring St = myPrime, (x(1..3),y(1..3)), dp;
 ideal I, J;
 poly f;
 list L, output;
/////////////////////////////////////////////////////////////////////////////////

  setring(R);
  // Generate random quadrics
  QI = randomid(maxideal(2),1,myCoeffs)[1];
  QT = randomid(maxideal(2),1,myCoeffs)[1];

  setring(StT);
  IT = minor( coeffs( Line(QI) ,t), 1);
  IT = IT + minor( coeffs( Line(QT) ,t), 1);
  setring(St);
  I = std(fetch(StT,IT));
  // Try to eliminate with the first variable
  f = eliminant(I, 1);

  mult(I), dim(I);
  deg(f);

