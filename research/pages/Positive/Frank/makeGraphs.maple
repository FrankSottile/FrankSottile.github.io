#makeGraphs.maple
#
#  Second file in Frank Sottile's package of files.
#
#   This reads a file "Equivalence_Classes/Classes.n" which contains tables
# Equivalence_Classes[n][k], with each a list of all equivalence classes of
# flattened chains of length n in the Grassmannian-Bruhat order whose indices 
# contain k distinct numbers.
# (These equivalence classes are all the chains in an interval of length n in the 
#  Grassmannian-Bruhat order in the symmetric group S_k.)
#
# It computes all connected components of the dual equivalence graphs, and stores
#    the graphs, sorted by cardinality into files Graphs.n/g.card, which will be
#    used for further analysis.
#
interface(quiet=true):
read("procedures.maple"):
##############################################################
n:=6:
verbose:=false:
read(sprintf("Equivalence_Classes/Classes.%d",n)):
##############################################################
statsFile:=sprintf("statistics.%d",n):
dir:=sprintf("Graphs.%d",n):
system(sprintf("mkdir %s",dir)):

#
#   This is the list of sizes of graphs; this enables the creation of the files in 
#        Graphs.n
#
Sizes[2]:= {1}:
Sizes[3]:= {1, 2}:
Sizes[4]:= {1, 2, 3, 5}:
Sizes[5]:= {1, 4, 5, 6, 9, 11, 16, 20}:
Sizes[6]:= {1,5,9,10,14,16,19,21,26,35,37,40,42,45,47,54,56,59,61,66,75,80,91,96}:

####################################################################################
#
# Initialize files in Graphs.n/
#
for k in Sizes[n] do
 file:=fopen(sprintf("%s/g.%d",dir,k),WRITE):
 fprintf(file, "G:={\n"):
 fclose(file):
end do:

for numLett in numberLetters do
 for Cl in Equivalence_Classes[n][numLett] do 
  #
  #  Compute all the edges in graphs supported on this class
  #
  Edges:=computeEdges(Cl):
  #
  ########################################################
  #
  #  We divide the equivalence class into connected graphs
  #
  ########################################################
  #
  # allV will be indices of those chains (vertices) not yet sorted into classes
  #
  allV:={seq(ii,ii=1..nops(Cl))}:
  G:=[]:
  while allV<>{} do 
   #
   #  Find the connected component of a single chain (now a vertex, v).
   #
   v:=min(op(allV));
   allV := allV minus {v}:
   V:={v}: E:={}:
   Recent:={v}:
   while Recent<>{} do
    w:=min(op(Recent)):
    Recent:=Recent minus {w}:
    for i from 2 to n-1 do 
     Edi:=Edges[i]:
     for pr in Edi do 
      if (w=pr[1] or w=pr[2]) then 
       newv := {pr[]} minus {w}:
       E := E union {[i,pr[]]}:
       Edges[i] := Edges[i] minus {pr}:
       V := V union newv:
       Recent := Recent union newv:
       allV := allV minus newv:
      end if:
     end do:
    end do:
   end do:
   ###########################################################
   #
   #    Make a list of the words that are in the connected component  G, 
   # and have the edges point to positions in that list.
   #
   Vind:=sort([op(V)]):
   Vwords:=[]:
   for j from 1 to nops(Vind) do
    Vwords:=[Vwords[],Cl[Vind[j]]]:
    fmp[Vind[j]]:=j:
   end do:
   FlEdge:={}:
   for ed in E do 
    FlEdge:=FlEdge union {[ed[1],fmp[ed[2]],fmp[ed[3]]]}:
   end do:
   #
   ################################################
   #
   #  Now, record the graph in Graphs.n/g.size
   #
   file:=fopen(sprintf("%s/g.%d",dir,nops(Vwords)),APPEND):
   fprintf(file, " %a,\n", [Vwords,FlEdge]):
   fclose(file):
   #
   #  Close the loop partitioning an equivalence class into pieces
   #
  end do:
  #
  #  Close the loop over all Equivalence_Classes[n][k]
  #
 end do:
 #
 # Close the loop over all k
 #
end do:
#
for k in Sizes[n] do
 file:=fopen(sprintf("%s/g.%d",dir,k),APPEND):
 fprintf(file, "NULL}:\n"):
 fclose(file):
end do:
#
file:=fopen(statsFile,APPEND):
fprintf(file,"###### Statistics for graphs from chains of length %d. ######\n",n):
nGr:=0:
for k in Sizes[n] do
 read(sprintf("%s/g.%d",dir,k)):
 nGr:=nGr+nops(G):
 fprintf(file," There are %d graphs on %d vertices from chains of length %d.\n",nops(G), k,n):
end do:
fprintf(file,"There are %d graphs from chains of length %d.\n",nGr,n):
fprintf(file,"This computation took %4.2f seconds.\n",time()):
fprintf(file,"########################################################\n"):

time();

quit;

