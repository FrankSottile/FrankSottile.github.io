#
# Procedures for the search of triangles with many common transversals
#
#################################################################################
#
#  Data representation
#
#   Lines here are always given by two points. 
#   (Thus easily transformed into parametrizations).
#   As much as it is possible, everything is parametrized.
#
################################################################################
#
#  Pluecker(Line)            Returns the pluecker vector of a given line
#  Meet(Line1,Line2)         Evaluates the equation for the lines to meet
#  ParameterizeLine(Line,t)  Parameterizes the line with t=0 the first point
#                             and t=1 the second.
#  MakeRegulus(Line1, Line2, Line3, t)   Gives the linked parametrizations of 
#                            Lines 1 and 2 for the regulus defined by the 3 lines
#                            This parametrizes the hyperboloid, returning
#                            `false' if there is some problem with the
#                            parametrization 
#  makeLine(Gamma,t0,a,b)    Makes the line osculating the curve Gamma at the
#                            point t0, extending from a to b in the natural
#                            coordinates where Gamma(t0) = 0 and Gamma(t0) +
#                            normal tangent vector = 1 
#
#
#
#
################################################################################
Pluecker := proc(Line)
#
#  Computes the Pluecker vector of a line
#  Returns [p01, p02, p03, p12, p13, p23]
#
return([Line[2][1]-Line[1][1], Line[2][2]-Line[1][2], Line[2][3]-Line[1][3] 
       ,Line[1][1]*Line[2][2]-Line[1][2]*Line[2][1]
       ,Line[1][1]*Line[2][3]-Line[1][3]*Line[2][1]
       ,Line[1][2]*Line[2][3]-Line[1][3]*Line[2][2]]):
end proc:
################################################################################
Meet := proc(Line1,Line2)
#
#  Evaluates the equation for Line1 to meet Line2 in Pluecker coordinates
#
 local L1, L2:
 L1:=Pluecker(Line1):
 L2:=Pluecker(Line2):
 return(L1[1]*L2[6]-L1[2]*L2[5]+L1[3]*L2[4]
       +L1[4]*L2[3]-L1[5]*L2[2]+L1[6]*L2[1]):
end proc:
################################################################################
ParameterizeLine := proc(Line,t)
#
#  Given a line by two points [ [x1,y1,z1], [x2,y2,z2] ]
#  Parameterizes the line with t=0 the first point and t=1 the second
#  Returns [x(t),y(t),z(t)]
#
 return([Line[1][1]+t*(Line[2][1]-Line[1][1])
        ,Line[1][2]+t*(Line[2][2]-Line[1][2])
        ,Line[1][3]+t*(Line[2][3]-Line[1][3])]):
end proc:
################################################################################
MakeRegulus := proc(Line1,Line2, Line3,t)
#
#  This gives parametrized points on Line1 and Line2 that are collinear with
#  Line 3.  This defines the regulus of lines meeting all three.  It also 
#  serves to parametrize the hyperboloid, via the command
#    ParameterizeLine(MakeRegulus(Line1, Line2, Line3,t), s):
#  Returns the boolean variable `false' if for some reason it cannot
#  make the Regulus.
#
 local Equation:
 Equation:=Meet([ParameterizeLine(Line1,t),ParameterizeLine(Line2,s)],Line3);
 if indets(Equation) = {s,t} then 
   return([ParameterizeLine(Line1,t),
    subs(s=solve(Equation=0,s),ParameterizeLine(Line2,s))]):
  else
   return(evalb(0=1)):
 end if:
end proc:
################################################################################
makeLine := proc(Gamma,t0,a,b)
#
#   Makes the line osculating the curve Gamma at the point
# t0, extending from a to b in the natural coordinates where 
# Gamma(t0) = 0 and Gamma(t0) + normal tangent vector = 1
#
 local L0, Dir, len:
 L0:=subs(t=t0,Gamma);
 Dir:=subs(t=t0,diff(Gamma,t));
 len:=sqrt(sum(Dir[i]^2,i=1..3));
 return([[seq(L0[i]+a*Dir[i]/len, i=1..3)],[seq(L0[i]+b*Dir[i]/len, i=1..3)]])
end proc:
