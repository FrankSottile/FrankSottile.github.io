#
#
#
#
#
#

EasySolve := proc(Eqs)
 local EQS, NSols, Var, Sols, i, eq, SolVar, Value:
 EQS:=[Eqs[]]:
 NSols:=max(map(degree,EQS)[]):
 for Var in indets(EQS) do
  Sols[Var]:=[]:
  for i from 1 to NSols do Sols[Var]:=[Sols[Var][],0]: od:
 od:
 for eq in EQS do
  if degree(eq)=NSols then 
   SolVar:=op(indets(eq)):
   Sols[SolVar]:=[fsolve(eq=0,SolVar)]:
  fi:
  if nops(indets(eq))<>1 and degree(eq)<NSols then
   Var:=op(indets(eq) minus {SolVar}):
   for i from 1 to NSols do
    Value:=Sols[SolVar][i]:
    Sols[Var][i]:=solve(subs(SolVar=Value,eq)=0,Var):
   od:
  fi:
 od:
 eval(Sols)
end:


MakePolys := proc(Ker, EQS)
##################################################################
#
#  Procedure that, given the kernel of the coordinate patch and a 
#  triangular Gr\"obner basis, produces the three polynomials for 
#  all the solutions, sorted by degree from least to greatest
#
##################################################################
 local XYZ, i, Vect, j, Sdeg, Sols, A, B, NSOLS, Polys, Var, xyz:
 ####################################################################
 #  Creates the general solution polynomials given the coordinates  # 
 ####################################################################
 XYZ:=[0,0,0]:
 for i from 1 to 3 do 
  Vect:=op(i,Ker):
  for j from 1 to 6 do
   XYZ[i]:=XYZ[i] + Vect[j]*s^(j-1):
  od;
 od;
 #############################
 #    Sorts by degree        #
 #############################
 Sdeg := (A,B) -> evalb(degree(A,s) < degree(B,s)):
 Sols:=EasySolve(EQS):
 NSOLS:=nops(Sols[op(1,indets(EQS))]):
 Polys:=[]:
 for i from 1 to NSOLS do
  xyz:=[XYZ[]]:
  for Var in indets(EQS) do
   xyz:=subs(Var=Sols[Var][i],xyz):
  od:
  Polys:=[Polys[],sort(xyz,Sdeg)]: 
 od:
 Polys
end:
