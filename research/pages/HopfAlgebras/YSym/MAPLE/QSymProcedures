#QsymProcedures
# 2 May 2001
# Amherst, MA
#
#   This file computes in the algebra of quasi-symmetric functions
#
#####################################################################
#
# Prec, Succ, and Cdot:  Trialgebra operations
# QProd                  The product in the monomial basis
# QCollect                Computes the frequency of a compositon in a list
# SetToComp, CompToSet   Converts sets to compositions and vice versa
# QFtoM, QMtoF           Converts between the two bases for QSym
# QCombine               Adds two expressions in QSym
#
#####################################################################
interface(quiet=true):
Prec := proc(alpha,beta)
local AB,L,la,lb,prec,a,salpha,j:
 la:=nops(alpha):
 lb:=nops(beta):
 prec :=[]:
 if la<>0 then 
  a := alpha[1]:
  salpha:=alpha[2..la]: 
  AB := QProd(salpha,beta):
  for L in AB do 
   prec:=[prec[],[a,L[]]]:
  od:
 fi:
 prec
end:
#######################################################
Succ := proc(alpha,beta)
local  AB,L,la,lb,succ,b,sbeta,j;
 la:=nops(alpha);
 lb:=nops(beta);
 succ :=[]:
 if lb<>0 then 
  b := beta[1]:
  sbeta:=beta[2..lb]: 
  AB := QProd(alpha,sbeta):
  for L in AB do 
   succ:=[succ[],[b,L[]]]:
  od:
 fi:
 succ
end:
######################################################
Cdot := proc(alpha,beta)
local  AB,L,la,lb,cdot,a,salpha,b,sbeta,j;
 la:=nops(alpha);
 lb:=nops(beta);
 cdot :=[]:
 if lb<>0 and la<>0 then 
  a := alpha[1]:
  b := beta[1]:
  salpha:=alpha[2..la]: 
  sbeta := beta[2..lb]: 
  AB := QProd(salpha,sbeta):
  for L in AB do 
   cdot:=[cdot[],[a+b,L[]]]:
  od:
 fi:
 cdot
end:
######################################################
QProd := proc(alpha,beta)
 local prod;
 if nops(alpha)=0 then 
  prod:=[beta]:
 fi:
 if nops(beta)=0 then 
  prod:=[alpha]:
 fi:
 if nops(alpha)<>0 and nops(beta)<>0 then 
  prod:=[Prec(alpha,beta)[],Succ(alpha,beta)[],Cdot(alpha,beta)[]]
 fi:
prod
end:
#################################################################
QMCoprod := proc(Term)
local alpha,coprod,i;
 alpha:=Term[2]:
 coprod:=[]:
 for i from 0 to nops(alpha) do 
  coprod:=[coprod[],[Term[1],alpha[1..i],alpha[i+1..nops(alpha)]]]:
 od:
 coprod
end:
###################################################################
QCollect := proc(L)
local S,COEFFS,comp,collected ;
 S:=convert(L,set):
 for comp in S do 
  COEFFS[comp]:=0:
 od:
 for comp in L do 
  COEFFS[comp]:=COEFFS[comp]+1:
 od:
 collected:=[]:
 for comp in S do
  collected:=[collected[],[COEFFS[comp],comp]]:
 od:
 collected
end:
######################################################
#
#  S is a subset of [n]
#
SetToComp := proc(S,n)
local T,comp,j;
 T := [op(sort(S)),n];
 comp:=[T[1]]:
 for j from 2 to nops(T) do 
  comp := [comp[],T[j]-T[j-1]]:
 od:
 comp
end:
#####################################################
CompToSet := proc(alpha)
local S, n, j;
 S := {}:
 n :=0:
 for j from 1 to nops(alpha)-1 do
  n:= n+ alpha[j]:
  S := S union {n}:
 od:
[S,n+alpha[nops(alpha)]]
end:
####################################################
QFtoM := proc(alpha)
local L,S,n,M,T;
 L := CompToSet(alpha):
 S:=L[1]:
 n:=L[2]:
 M:=[]:
 for T in combinat[powerset](n-1) do 
  if S minus T = {} then 
   M := [M[],[1,SetToComp(T,n)]]:
  fi:
 od:
 M
end:
###################################################
QMtoF := proc(alpha)
local L,S,n,M,T;
 L := CompToSet(alpha):
 S:=L[1]:
 n:=L[2]:
 M:=[]:
 for T in combinat[powerset](n-1) do 
  if S minus T = {} then 
   M := [M[],[(-1)^(nops(T minus S)),SetToComp(T,n)]]:
  fi:
 od:
 M
end:
#########################################################################
#   This will take two lists of coefficients and compositions representing
#  two expressions in QSym and add them
#
QCombine:=proc(L1,L2)
local S,monom,comp,collected,COEFFS;
 S := {}:
 for monom in L1 do 
  S := S union {monom[2]}: 
 od:
 for monom in L2 do  
  S := S union {monom[2]}: 
 od:
 for comp in S do 
  COEFFS[comp]:=0:
 od:
 for monom in L1 do 
  COEFFS[monom[2]]:=COEFFS[monom[2]]+monom[1]:
 od:
 for monom in L2 do 
  COEFFS[monom[2]]:=COEFFS[monom[2]]+monom[1]:
 od:
 collected:=[]:
 for comp in S do
  collected:=[collected[],[COEFFS[comp],comp]]:
 od:
 collected
end:
##########################################################
