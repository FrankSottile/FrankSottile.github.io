interface(quiet=true):
read(procedures):
Digits:=50:


T:=[
[[-10.5000000000, 1., -10.50000000000000], 
 [.56285683454795734703786010, 1., .56285683454795734703786010], 
 [.56285683454726874605620706, .99999999999822994290647247, .56285683454726874605620706]],
[[-10.5000000000, -1., 10.5000000000], 
 [1.39421898947500, -1., -1.39421898947500], 
 [1.3942406911811439954597161, -1.0000237884694881275439271, -1.3942406911811439954597161]],
[[-9.50000000, -9.5000000000, .250000000000], 
 [.685825000, .68582500000000, .250000000], 
 [.69121730616063647303519136, .69121730616063647303519136, .26069756890079842876805653]],
[[9.500000, 0., 0.], 
[-.5110000, 0., 0.], 
[-1.0873912730501133759642956, 0., -.51645811088049333541289247]]]:
#[-1.08739127305011337596429, 0., -.516458110880493335412892]]]:

dot:=proc(v,w)
 return(v[1]*w[1]+v[2]*w[2]+v[3]*w[3])
end proc:

ANGLE:=proc(A,B,C)
 local a,b:
 a:=[B[1]-A[1], B[2]-A[2], B[3]-A[3]]:
 b:=[C[1]-A[1], C[2]-A[2], C[3]-A[3]]:
 return(evalf(180*arccos(dot(a,b)/sqrt(dot(a,a)*dot(b,b)))/Pi))
# return(evalf(arccos(dot(a,b)/sqrt(dot(a,a)*dot(b,b)))))
end proc:

A:=T[1]:

B:=[]:C:=[]:
for A in T do 
 angles:=sort([ANGLE(A[1],A[2],A[3]),ANGLE(A[2],A[1],A[3]),ANGLE(A[3],A[2],A[1])]):
 S:=sum(angles[i],i=1..3):
 printf("%a\n",evalf(angles,5)):
 printf("Sum = %a\n", evalf(S,5)):
 B:=[angles[1],B[]]:
 C:=[sqrt(angles[1]),C[]]:
end do:


#evalf(B,5);
#evalf(C,5);

#quit;



for i from 1 to 4 do
 for j from 1 to 3 do
  for k from 1 to 3 do
   T[i][j][k]:=   trunc(10^26*T[i][j][k])/10^26:
  end do:
 end do:
end do:
T;
numberOfTangents(T);
