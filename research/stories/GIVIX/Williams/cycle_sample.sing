// Caution: Altering this file could cause SchubertStats.py to run into errors or  produce false results. Deleting this file is safe as SchubertStats.py will rewrite it if it can not be found. 

option(redSB); 
LIB "matrix.lib"; 
LIB "linalg.lib"; 
LIB "schubert.lib"; 


// We are in G(m,m+p). The vectors w and v encode the first two Schubert conditions 

int character = 1009;
int m = 4;
int p = 5;
int numsolns = 6;
// trials is the number of cycles we will sample 
int trials = 50;
int badtrial = 0; //used to count number of trials discarded 
int variable= 0; //used to change what variable we reduce to if we encounter too many badtrials 
intvec cycles; 
int cycleplace; 
int randomnumsize = 1000;
intvec w = 1, 2, 6, 7, 3, 4, 5, 8, 9;
intvec v = 1, 2, 4, 8, 3, 5, 6, 7, 9;

// conditions is a list of the vectors of all but the first two Schubert conditions 
list conditions = list( intvec(1, 2, 3, 5, 4, 6, 7, 8, 9), intvec(1, 3, 4, 6, 2, 5, 7, 8, 9), intvec(1, 2, 5, 6, 3, 4, 7, 8, 9) );
int i,ii,j; 
intvec mm = m; 
def R = flagRing(mm,m+p,v,w); 
setring R; 
ideal I; 
def S = myring(nvars(R), string(character)); 
setring(S); 
ideal J,B; 
list L, output; 
poly F; 

for (j=1; j<=trials; j++) { 
  setring R; 
  I= 0; 
  for (ii=1; ii<= size(conditions); ii++) { 
    I = I + randomCondition(conditions[ii], mm, randomnumsize, m+p, v, w); 
  } 
  setring S; 
  J= std(fetch(R,I)); 
  if (mult(J)==numsolns) { 
    B= kbase(J); 
    F= charpoly(coeffs(reduce(var(nvars(R)-variable)*B,J),B), varstr(nvars(R)-variable)); 
    L= factorize(F,2); 
    if (L[2]-1 <> 0 or deg(F) < numsolns) { 
      badtrial++; 
      j++; // this line counts discarded picks against total number of trials 
      if (badtrial > trials/4 & variable < nvars(R)-1) { 
        variable++; // tries next variable 
        list output; // clears output list 
        badtrial= 0; 
        j= 1; // restart counters 
      } 
      continue; 
    } 
    cycles=0; 
    for (i=1; i<=size(L[1]); i++) { 
      cycles[i]= deg(L[1][i]); 
    } 
    if (size(output) == 0) { 
      output= cycles,intvec(1); 
    } 
    else { 
      // we now check if we have already encountered this cycle 
      for (i=1; i<=(size(output) div 2); i++) {
        cycleplace=0; 
        for (ii=1; ii<= size(cycles); ii++) {
          if (cycles[ii] > output[2*i-1][ii]) {
            cycleplace=1; 
          	break; 
          } 
          if (cycles[ii] < output[2*i-1][ii]) {
            cycleplace=2; 
            break; 
          } 
        }
        if (cycleplace == 0) {
          output[2*i][1]= output[2*i][1]+1; 
          break; 
        } 
        if (cycleplace == 1) {
          output= insert(output,intvec(1),2*(i-1)); 
          output= insert(output,cycles,2*(i-1)); 
          break; 
        } 
        if ( i == (size(output) div 2) ) { 
          output= insert(output,cycles,size(output)); 
          output= insert(output,intvec(1),size(output)); 
          break; 
        } 
      } 
    } 
  } 
  else { 
    badtrial++; 
  } 
} 
string pretty_output= "%s | %s"; 
for (i=1; i< (size(output) div 2); i++) { 
  pretty_output= pretty_output + "%n%s | %s"; 
} 
badtrial; 
pretty_output= sprintf(pretty_output,output); 
pretty_output; 
size( sprintf("%s", badtrial)+pretty_output); 
quit; 
