###########################################################################
#52.maple                                                                 #
#                                                                         #
#   This MAPLE code computes a Singular file which computes a             #
#   Degree reverse Lexicographic Groebner basis.                          #
#                                                                         #
#   It treats the enumerative problem of 10 codimension 1 Schubert        #
#   hypersurfaces in G(5,2), each defined by a codimension 2-plane.       # 
#   There are 42 2-planes meeting 10 codimension 2 linear subspaces       #
#   of C^7.                                                               #
#                                                                         #
#   Computing drl Gr\"obner basis  (SINGULAR)   1.45   seconds            #
#                                                                         #
###########################################################################

interface(quiet=true):


Eq := s -> simplify(linalg[det](linalg[matrix]([
              [1,s,s^2, s^3 , s^4 ,   s^5,   s^6],
              [0,1,2*s,3*s^2,4*s^3, 5*s^4, 6*s^5],
              [0,0, 1 , 3*s ,6*s^2,10*s^3,15*s^4],
              [0,0, 0 ,  1  ,4*s  ,10*s^2,20*s^3],
              [0,0, 0 ,  0  ,  1  , 5*s  ,15*s^2],
              [1,0, a ,  c  ,  e  ,   g  ,  x   ],
              [0,1, b ,  d  ,  f  ,   h  ,  y   ]]))):

eqs:=[]:
for i from 1 to 10 do eqs:=[eqs[],Eq(i)]: od:

lprint(`//Execute this with:`);
lprint(`//Singular --ticks-per-sec=100<52.sing`);
lprint(`//`);
lprint(`//ring R= 0, (a,b,c,d,e,f,g,h,x,y), dp;`);
lprint(`//`);
lprint(`timer=1;`);
lprint(`//`);
lprint(`ring R= 0, (a,b,c,d,e,f,g,h,x,y), dp;`);
lprint(`ideal I=`);
for i from 1 to 10 do  
lprint(eqs[i],`,`);  od:
lprint(`0;`);
lprint(`int t=timer;`);
lprint(`ideal G = std(I);`);
lprint(`int s=timer-t;`);
lprint(`print("Time to compute one drl Groebner bases: "); `);
lprint(`s;`);
lprint(`print("Time units, counts per second:");`);
lprint(`system("--ticks-per-sec");`);
lprint(`degree(G);`);
lprint(`ncols(G);`);
lprint(`print(G);`);
lprint(`quit;`);
quit;
