##############################################################
# Lie.maple
#
#   This computes and prints out in a LaTeX file  with all Lie brackets 
#  of the M-functions in SSym indexed by connected poermutations.
#
read(`MalvenutoProcedures`);
####################################################
MakeTerm:=proc(T,X)
local Str, n1, j, n2: 
 Str:= ``: 
 if abs(T[1])>1 then Str:=cat(Str,convert(abs(T[1]),symbol)): fi:
 n1:=nops(T[2]):
 if n1=0 then 
  Str:=cat(Str,`1 `):
 else
  Str:=cat(Str,`\\`,convert(X,symbol),`_{`):
  for j from 1 to n1 do
   Str:=cat(Str,convert(T[2][j],symbol)):
  od:
  Str:=cat(Str,`}`):
 fi:
 Str
end:
################################################################
Format := proc(L,X)
#
#  Given a list L, this makes the formal sum L in TeX
#
local  Str, j:
 Str:=MakeTerm(L[1],X):
 if L[1][1]<0 then Str:=cat(`-`,Str): fi:
 if nops(L)>1 then
  for j from 2 to nops(L) do
   if L[j][1]>0 then 
     Str:=cat(Str,`+`):
   fi:
   if L[j][1]<0 then 
     Str:=cat(Str,`-`):
   fi:
   Str:=cat(Str,MakeTerm(L[j],X)):
   if j=nops(L) then 
     Str:=cat(Str,`$.`): 
   fi:
   if j<>nops(L) then
    if j mod 9 = 0 then  
       Str:=cat(Str,`$\\vspace{-6pt}\n\n      `): 
       Str:=cat(Str,`\\hspace{10pt}\n      $`):
    fi:
    if (j mod 9 <> 0) and (j mod 3 = 0) then Str:=cat(Str,`\n       `): fi:
   fi:
  od:
 fi:
 Str
end:
###############################################################
Connected:=proc(w)
local n,i,connected:
 n:=nops(w):
 connected:=true:
 if n>1 then 
  for i from 2 to nops(w) do
   connected := connected and evalb(max(w[i..n][])<>n+1-i):
  od:
 fi:
 evalb(connected)
end:
################################################################
bracket:=proc(u,v)
local Br,T:
 Br := Prod(u,v):
 for T in Prod(v,u) do
  Br := [Br[],[-T[1],T[2]]]:
 od:
 FtoM(Sort(Combine(Br)))
end:
################################################################

file:=fopen(`Lie.tex`,WRITE):

fprintf(file,`\\documentclass[11pt]{article}\n`):
fprintf(file,`\\usepackage{amssymb}\n`):
fprintf(file,`\\newcommand{\\M}{\\mathcal{M}}\n`):
fprintf(file,`\\newcommand{\\F}{\\mathcal{F}}\n`):
fprintf(file,`\\headheight=8pt \\topmargin=-20pt\n`): 
fprintf(file,`\\textheight=649pt \\textwidth=488pt\n`):
fprintf(file,`\\oddsidemargin=-10pt \\evensidemargin=-10pt\n\n`):

fprintf(file,`\\begin{document}\n`):

fprintf(file,`\\begin{center}\\Large\\bf\n`):
fprintf(file,`Lie bracket of primitive elements in $\\mathfrak{S}\\mathit{Sym}$\n`):
fprintf(file,`\\end{center}\n`):

fprintf(file,`%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`):
fprintf(file,`\n\n`):
for n from 3 to 6 do 
 fprintf(file,cat(`\\hspace{-50pt}{\\bf Lie brackets of total degree $`,n,`$:}\n\n`)):
 for k from 1 to trunc(n/2) do 
  if [k,n]<>[2,4] then
   fprintf(file,cat(`\\hspace{-40pt}Degree $`,k,`$ by degree $`,n-k,`$:\\vspace{-1pt}\n`)):
   fprintf(file,cat(`\\begin{enumerate}\n`)):
   for w in combinat[permute](k) do
    if Connected(w) then
     for v in combinat[permute](n-k) do
      if Connected(v) and w<>v then
       fprintf(file,cat(`\\item[]\\hspace{-50pt}$`)):
       fprintf(file,cat(`[`,MakeTerm([1,w],\M),`,`,MakeTerm([1,v],\M),`] =\n        `)):
       fprintf(file,cat(Format(bracket(w,v),M),`\\vspace{-8pt}\n`)):
      fi:
     od:
    fi:
   od:
   fprintf(file,cat(`\\end{enumerate}\n`)):
   if k<>n-1 then fprintf(file,`\\hspace{-40pt}\\rule{430pt}{1pt}\n\n`): fi:
   fprintf(file,`%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`):
   fprintf(file,` \n`):
  fi:
 od:
 fprintf(file,`\\hspace{-50pt}\\underline{\\rule{430pt}{1pt}}\\medskip\n\n`):
od:

fprintf(file,`\\end{document}\n`):
time();
quit:
