#zetapm.maple
#
#  Computes the even and odd parts of the zeta function for QSym
#
#   Hn  := The zeta function  (The series H_n from NSym)
#   Shm := The antipode applied to the zeta function
#   SH  := These antipodes put into a list for feeding to a procedure
#   pHn := The positive part of the Zeta function
#   mHn := The negative part of the Zeta function
#   SpHn:= The antipode applied to the positive part
#   mmHn:= (mH)*(mH)_n
#   pmHn:= (pH)*(mH)_n (Actually equals H_n, as the Theorem predicts)
#   nun := The nu function  S(bar H)*H
#   chin:= The chi function (bar H)*H
#
interface(quiet=true):
with(combinat, composition):
#
#  Here, an element of NSym is represented as a formal list of pairs
#  [coeff, composition]
#
#
#######################################################################
Stop:=12:   #   Highest degree computed
#######################################################################
#
#   This procedure creates a HTML term  given a pair T.
#
HtmlTerm:=proc(T)
local Str, n1, j, n2:
 if T[1]=1 then Str:= ` `: fi:
 if T[1]=-1 then Str:= ` - `: fi:
 if abs(T[1])<>1 then Str:=cat(` `,convert(T[1],symbol)): fi:
 n1:=nops(T[2]):
 if n1=0 then
  Str:=cat(Str,`1 `):
 else
  Str:=cat(Str,`<I>H</I><SUB>`):
  for j in T[2] do
   if j<10 then Str:=cat(Str,convert(j,symbol)):
   else
    if j=10  then Str:=cat(Str,`a`): fi:
    if j=11  then Str:=cat(Str,`b`): fi:
    if j=12  then Str:=cat(Str,`c`): fi:
    if j=13  then Str:=cat(Str,`d`): fi:
    if j=14  then Str:=cat(Str,`e`): fi:
    if j=15  then Str:=cat(Str,`f`): fi:
    if j=16  then Str:=cat(Str,`g`): fi:
    if j=17  then Str:=cat(Str,`h`): fi:
   fi: 
  od:
  Str:=cat(Str,`</SUB>`):
 fi:
Str
end:
################################################################
LEN := proc(a)
 local l, b:
 l:=0:
 b:=abs(a):
 if a<0 then l:=l+1: fi:
 if type(b,`integer`) then l:=l+1+trunc(log10(b)): fi:
 if type(b,`fraction`) then l:=l+3+trunc(log10(numer(b)))+trunc(log10(denom(b))): fi:
 l
end:

################################################################
HtmlFormat := proc(Li)
#
#  Given a list Li, this makes the formal sum L in HTML
#
local  L, Str, j, len:
 L:=Li:
 len:=0.1:
 if L=[]
   then Str:=cat(`0.<BR>\n       `):
  else
   L:=SORT(L):
   Str:=HtmlTerm(L[1]):
   len:=len+1+0.6*nops(L[1][2])+ LEN(L[1][1]):
   if nops(L)>1 then
    for j from 2 to nops(L) do
     if L[j][1]>0 then
       Str:=cat(Str,` + `):
       len:=len+3:
     fi:
     Str:=cat(Str,HtmlTerm(L[j])):
     len:=len+ 1 + 0.6*nops(L[j][2])+ LEN(L[j][1]):
    if j=nops(L) then
       Str:=cat(Str,`.<BR>\n       `):
     fi:
     if j<>nops(L) then
      if len >60 then  Str:=cat(Str,`<BR> &nbsp; &nbsp;\n`):  len:=0.1: fi:
      if len<=60 and (j mod 2 = 0) then Str:=cat(Str,`\n      `): fi:
     fi:
    od:
   fi:
 fi:
 Str
end:
###############################################################

###########################################################################
sortCompositions := proc(COMPS)
#
#   This procedure lexicographically sorts compositions
#
 local C, SC, biggest, alpha, equal, i:
 C:=convert(COMPS, set):
 SC:=[]:
 while C<>{} do
  biggest := op(1,C):
  for alpha in C do 
   if alpha <> biggest then 
    equal:=evalb(true):
    i:=0:
    while equal do 
     i:=i+1:
     equal:= evalb( biggest[i]=alpha[i] ):
    od:
    if biggest[i]<alpha[i] then 
     biggest := alpha:
    fi:
   fi:
  od:
  SC:=[SC[],biggest]:
  C := C minus {biggest}
 od:
 SC
end:
########################################################################
SORT := proc(L)
#
#   This sorts an expression so that the shorter compositions appear
# first, and the compositions of the same length are in Lexicographic
# order. 
#
local comps, M, T, Terms, alpha, n, j, i:
#
#  Terms will store the coefficients of L
#
 alpha := L[1][2]:
 M:= Combine(L):
 n := 0: for i in alpha do n:=n+i: od:
# initializes Terms := 0:
 for j from 1 to n do 
  comps:=composition(n,j):
  for alpha in comps do Terms[alpha]:=0: od:
 od:
#
 for T in M do 
  Terms[T[2]]:=T[1]:
 od:
 M:=[]:
 for j from 1 to n do 
  comps:=sortCompositions(composition(n,j)):
  for alpha in comps do 
   if Terms[alpha] <> 0 then M:=[M[], [Terms[alpha], alpha]]: fi:
  od:
 od:
 M
end:
########################################################################
Combine := proc(L)
#
#  Combines like terms in a sum
#
local M, Tl, Terms, comps, alpha:
 comps:={seq(L[i][2],i=1..nops(L))}:
 for alpha in comps do 
  Terms[alpha]:=0:
 od:
 for Tl in L do 
  Terms[Tl[2]]:=Terms[Tl[2]]+Tl[1]:
 od:
 M:=[]:
 for alpha in comps do
  if Terms[alpha]<>0 then M:=[M[],[Terms[alpha], alpha]]: fi:
 od:
 M
end:
#
########################################################################
Mult := proc(L,M)
#
#   Computes the product N := L*M of two lists
#
local N, Tl, Tm:
 N:=[]:
 for Tl in L do
  for Tm in M do
    N:=[N[],[Tl[1]*Tm[1], [Tl[2][], Tm[2][]]]]:
  od:
 od:
 Combine(N)
end:
########################################################################
S := proc(Term)
#
#  This computes the antipode S of a term [ c, alpha ].
#  It uses the computation of S(h_i) and that the antipode
#  is an algebra anti-automorphism
#
 local a, term:
 global SH:
 term:=[ [Term[1], []] ]:
 for a in Term[2] do 
  term := Mult( SH[a], term ):
 od:
 term
end:
#
#
makeH:=proc(j)
 local H:
 H:=[1, []]:
 if j<>0 then H:=[1, [j]]: fi:
 [H]
end:

########################################################################
#
#   Makes the image of the H_n under the antipode.
#
SH:=[]:
Sh0:=[[1,[]]]:
for n from 1 to Stop do 
 X:=[]:
 for k from 1 to n do 
  for alpha in composition(n,k) do 
   X:=[X[], [(-1)^k,alpha]]:
  od:
 od:
 Sh||n := X:
 SH:=[SH[],X]:
od:


pH0:=[[1,[]]]:
for n from 1 to Stop do 
 pH||n := Combine([[(-1)^n/2, [n]], Mult([ [-1/2,[]] ], Sh||n )[]]):
 for i from 0 to n-1 do 
  for j from 0 to min(n-i,n-1) do 
   k := n-i-j:
   if k < n then 
    Term:=Mult([ [-1/2,[]] ], pH||i ):
    Term:=Mult( Term, Sh||j ):
    Term:=Mult( Term, pH||k ):
    pH||n := Combine([ pH||n[], Term[]]):
   fi:
  od:
 od:
od:
#
#  Apply the antipode to the positive part of the zeta function
#
SpH0:= [[1, []]]:
for n from 1 to Stop do 
 SpH||n:=[]:
 for Term in pH||n do 
  SpH||n := [SpH||n[], S(Term)[]]:
 od:
 SpH||n := Combine(SpH||n):
od:
#
#   Use this to compute the negative part of the zeta function
#
mH0:= [[1, []]]:
for n from 1 to Stop do 
 mH||n:=[]:
 for j from 0 to n do 
  mH||n := Combine( [mH||n[], Mult(SpH||j, makeH(n-j))[]] ):
 od:
od:
#
#  computes (mH*mH) and (pH*pH)
#
mmH0:= [[1, []]]:
pmH0:= [[1, []]]:
for n from 1 to Stop do 
 mmH||n := []:
 pmH||n:= []:
 for j from 0 to n do 
  mmH||n := Combine( [mmH||n[],  Mult( mH||j, mH||(n-j) )[] ] ):
  pmH||n:= Combine( [pmH||n[], Mult( pH||j, mH||(n-j) )[] ] ):
 od:
od:
#
#  computes nu  := S(bar H)*H
#     and   chi := (bar H)*H
nu0 := [[1, []]]:
chi0:= [[1, []]]:
for n from 1 to Stop do 
 nu||n:= []:
 chi||n:=[]:
 for j from 0 to n do 
  nu||n:= Combine( [ nu||n[], 
             Mult( Mult( [[(-1)^j,[]]], Sh||j ),makeH(n-j))[]] ):
  chi||n:= Combine( [ chi||n[], Mult( [[(-1)^j,[j]]],makeH(n-j))[]] ):
 od:
od:

###########################################################################
#
#   Now we make the output .html file
#
###########################################################################
file:=fopen(`Q-zeta.html`,WRITE):

fprintf(file,"<HTML>\n"):
fprintf(file,"<HEAD>\n"):
fprintf(file,"   <TITLE>Characters associated to the canonical character of QSym</TITLE>\n"):
fprintf(file,"</HEAD>\n"):
fprintf(file,"<BODY BGCOLOR=\"#FFFFFF\">\n\n"):

fprintf(file,"<H1>Characters associated to the canonical character"):
fprintf(file," of <B>Q</B><I>Sym</I></H1>\n\n"):
fprintf(file,"<A HREF=\"http://www.math.tamu.edu/~maguiar\">Marcelo Aguiar</A><BR>\n\n"):
fprintf(file,"<A HREF=\"http://www.math.yorku.ca/Who/Faculty/Bergeron\">Nantel"):
fprintf(file," Bergeron</A><BR>\n\n"):
fprintf(file,"<A HREF=\"http://www.math.umass.edu/~sottile\">Frank Sottile</A>\n"):
fprintf(file,"<HR COLOR=\"#0000FF\" size=2 noshade>\n\n"):


fprintf(file,"<!------------------------------------------------------------>\n\n"):

fprintf(file,"<P> We write all of these characters as elements of the algebra\n"):
fprintf(file,"<B>N</B><I>Sym</I> of noncommutative symmetric finctions. \n"):
fprintf(file," This is the free associative algebra generated by elements\n"):
fprintf(file,"<I>H<SUB>n</SUB></I> for nonnegative integers <I>n</I>, with\n"):
fprintf(file,"<I>H</I><SUB>0</SUB></I>=1, the multiplicative identity.\n"):
fprintf(file,"Each of the characters is the infinite sum of its homogeneous\n"):
fprintf(file,"pieces and we exhibit these homogeneous pieces for each character\n"):
fprintf(file,"up to degree %d.\n",Stop):
fprintf(file,"\n"):
fprintf(file,"<P> The canonical character <I>H</I> is just the sum of the \n"):
fprintf(file,"homogeneous generators <I>H<SUB>n</SUB></I> of <B>N</B><I>Sym</I>.\n"):
fprintf(file,"We compute its image <I>S</I>(<I>H<SUB>n</SUB></I>) under the\n"):
fprintf(file," antipode <I>S</I>\n"):
fprintf(file,"It has an even and odd part, represented respectively as \n"):
fprintf(file,"<I>E</I> and <I>O</I>, and is the product of the two.\n"):
fprintf(file,"\n"):
fprintf(file,"\n"):
fprintf(file,"\n"):

fprintf(file,"<HR COLOR=\"#0000FF\" size=2 noshade>\n\n"):

fprintf(file,"<!------------------------------------------------------------>\n\n"):

fprintf(file,"<FONT SIZE=+1 COLOR=\"#FF0000\"><B>Antipode of the canonical"):
fprintf(file," character of <B>Q</B><I>Sym</I></B></FONT><BR>\n\n"):
fprintf(file,"<TABLE>\n"):
for n from 1 to 7 do 
 fprintf(file,"   <TR VALIGN=TOP><TD><I>S</I>(<I>H</I><SUB>%d</SUB>)",n):
 fprintf(file," &nbsp; =</TD>\n   <TD>&nbsp; &nbsp; "):
 fprintf(file,HtmlFormat(Sh||n)):
 fprintf(file,"</TD></TR>\n"):
od:
fprintf(file,"</TABLE>\n"):
fprintf(file,"<HR COLOR=\"#0000FF\" size=2 noshade>\n\n"):

fprintf(file,"<!------------------------------------------------------------>\n\n"):

fprintf(file,"<FONT SIZE=+1 COLOR=\"#FF0000\"><B>Even part of the canonical"):
fprintf(file," character of <B>Q</B><I>Sym</I></B></FONT><BR>\n\n"):
fprintf(file,"<TABLE>\n"):
for n from 1 to Stop do 
 fprintf(file,"   <TR VALIGN=TOP><TD><I>E</I><SUB>%d</SUB>",n):
 fprintf(file," &nbsp; =</TD>\n   <TD>&nbsp; &nbsp; "):
 fprintf(file,HtmlFormat(pH||n)):
 fprintf(file,"</TD></TR>\n"):
od:
fprintf(file,"</TABLE>\n"):
fprintf(file,"<HR COLOR=\"#0000FF\" size=2 noshade>\n\n"):

fprintf(file,"<!------------------------------------------------------------>\n\n"):

fprintf(file,"<FONT SIZE=+1 COLOR=\"#FF0000\"><B>Odd part of the canonical"):
fprintf(file," character of <B>Q</B><I>Sym</I></B></FONT><BR>\n\n"):
fprintf(file,"<TABLE>\n"):
for n from 1 to Stop do 
 fprintf(file,"   <TR VALIGN=TOP><TD><I>O</I><SUB>%d</SUB>",n):
 fprintf(file," &nbsp; =</TD>\n   <TD>&nbsp; &nbsp; "):
 fprintf(file,HtmlFormat(mH||n)):
 fprintf(file,"</TD></TR>\n"):
od:
fprintf(file,"</TABLE>\n"):
fprintf(file,"<HR COLOR=\"#0000FF\" size=2 noshade>\n\n"):

fprintf(file,"<!------------------------------------------------------------>\n\n"):

fprintf(file,"<FONT SIZE=+1 COLOR=\"#FF0000\"><B>The Euler "):
fprintf(file," character of <B>Q</B><I>Sym</I></B></FONT><BR>\n\n"):
fprintf(file,"<TABLE>\n"):
for n from 1 to Stop do 
 fprintf(file,"   <TR VALIGN=TOP><TD><I>chi</I><SUB>%d</SUB>",n):
 fprintf(file," &nbsp; =</TD>\n   <TD>&nbsp; &nbsp; "):
 fprintf(file,HtmlFormat(chi||n)):
 fprintf(file,"</TD></TR>\n"):
od:
fprintf(file,"</TABLE>\n"):
fprintf(file,"<HR COLOR=\"#0000FF\" size=2 noshade>\n\n"):

fprintf(file,"<!------------------------------------------------------------>\n\n"):

fprintf(file,"<FONT SIZE=+1 COLOR=\"#FF0000\"><B>The Odd "):
fprintf(file," character of <B>Q</B><I>Sym</I></B></FONT><BR>\n\n"):
fprintf(file,"<TABLE>\n"):
for n from 1 to 7 do 
 fprintf(file,"   <TR VALIGN=TOP><TD><I>nu</I><SUB>%d</SUB>",n):
 fprintf(file," &nbsp; =</TD>\n   <TD>&nbsp; &nbsp; "):
 fprintf(file,HtmlFormat(nu||n)):
 fprintf(file,"</TD></TR>\n"):
od:
fprintf(file,"</TABLE>\n"):
fprintf(file,"<HR COLOR=\"#0000FF\" size=2 noshade>\n\n"):

fprintf(file,"<!------------------------------------------------------------>\n\n"):

fprintf(file,"<HR COLOR=\"#0000FF\" size=2 noshade>\n\n"):
fprintf(file,"<I><FONT COLOR=\"#BB00FF\">Created 22 July 2003 by \n"):
fprintf(file,"<A HREF=\"http://www.math.umass.edu/~sottile\">Frank Sottile</A></FONT>\n"):
fprintf(file,"</BODY>\n</HTML>\n"):
fclose(file):

time();

quit;