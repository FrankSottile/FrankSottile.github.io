#coproduct.maple
#
#  This prints out a file of the coproduct in the M-basis of the 
#  Malvenuto-Reutenauer algebra
#
read(`MalvenutoProcedures`);

#
#   This procedure creates a TeX-ed term of the coproduct, 
#   given a triple T and a symbol X for the variables
#
Term:=proc(T,X)
local Str, n1, j, n2; 
 if T[1]=1 then Str:= ``: fi:
 if T[1]=-1 then Str:= `-`: fi:
 if abs(T[1])<>1 then Str:=convert(T[1],symbol): fi:
 n1:=nops(T[2]):
 if n1=0 then 
  Str:=cat(Str,`1\\otimes `):
 else
  Str:=cat(Str,`\\`,convert(X,symbol),`_{`):
  for j from 1 to n1 do
   Str:=cat(Str,convert(T[2][j],symbol)):
  od:
  Str:=cat(Str,`}\\otimes `):
 fi:
 n2:=nops(T[3]):
 if n2=0 then 
  Str:=cat(Str,`1`):
 else
  Str:=cat(Str,`\\`,convert(X,symbol),`_{`):
  for j from 1 to n2 do
   Str:=cat(Str,convert(T[3][j],symbol)):
  od:
  Str:=cat(Str,`}`):
 fi:
Str
end:
###################################################################
#
# Takes a list of triples and writes it as a sum of tensors, formated for TeX.
#
Format := proc(L,X)
local Str, i, triple;
 Str:=Term(L[1],X):
 for i from 2 to nops(L) do
  if L[i][1]>0 then Str:=cat(Str,`+`): fi:
  Str := cat(Str,Term(L[i],X)):
 od:
cat(Str,`$`);
end:
#############################################################

for n from 1 to 5 do 
 for w in combinat[permute](n) do 
  Str:=`\\item[]\\hspace{-50pt}$\\Delta\\RM_{`:
  for i from 1 to nops(w) do 
   Str:=cat(Str,convert(w[i],symbol)):
  od:
  Str:=cat(Str,`}=`);
  lprint(cat(Str,Format(Coproduct(w),RM)));
 od:
od:
quit;



for w in combinat[permute](4) do 
 Format(Coproduct([1,2,3]),RM);
od:


time();