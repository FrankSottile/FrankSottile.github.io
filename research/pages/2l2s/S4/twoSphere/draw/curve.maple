#curve.maple
#
# Attempt to find the curve of quadrics tangent to the envelope of lines
# transversal to two lines and tangent to a sphere.
#
interface(quiet=true):
with(plots):
plotsetup(x11,plotoptions=`width=3in,height=2.5in`):
############################################
#
Sphere := (a,b,c,r) ->
  linalg[matrix]([
   [a^2+b^2+c^2-r^2, -a, -b, -c],
   [      -a     , 1 , 0 , 0 ],
   [      -b     , 0 , 1 , 0 ],
   [      -c     , 0 , 0 , 1 ]]):

Quadric := (a,b,c,d,e,f,g,h,x,y) ->
  linalg[matrix]([
   [ a , b , c , d ],
   [ b , e , f , g ],
   [ c , f , h , x ],
   [ d , g , x , y ]]):

Wedge := proc(Sph)
local Pairs, i, j, wedge:
 wedge := linalg[matrix](6, 6, 0):
 Pairs := combinat[choose]([1,2,3,4],2):
 for i from 1 to 6 do
  for j from 1 to 6 do
   wedge[i,j] := linalg[det](linalg[submatrix](Sph,Pairs[i],Pairs[j])):
  od:
 od:
 evalm(wedge)
end:

Equation := proc(a,b,c,r)
local  plucker:
 plucker:=linalg[vector]([p01,p02,p03,p12,p13,p23]):
 linalg[innerprod](plucker,Wedge(Sphere(a,b,c,r)),plucker)
end:

plucker:=linalg[vector]([p01,p02,p03,p12,p13,p23]):

##################################################################
#   (a,0,0,r) : two lines, each double!
#x:=0: y:=2: z:=0: r:=5^(1/2):  #  This is a degenerate case
#####################################################################

coords:=linalg[vector]([1,x,y,z]):
linalg[innerprod](coords,Sphere(0,2,0,sqrt(5)),coords);

#Sph := linalg[innerprod](plucker,Wedge(Quadric(11,-8,-8,-8,5,4,4,5,4,4)),plucker):
#Sph := linalg[innerprod](plucker,Wedge(Sphere(0,1,0,1)),plucker):
#Sph := linalg[innerprod](plucker,Wedge(Quadric(-1,0,-1,0,1,0,0,1,0,-1)),plucker):

Sph := linalg[innerprod](plucker,Wedge(Sphere(0,2,0,sqrt(5))),plucker):

F:=subs(p02=X*A,p03=Y*A,p12=X*B,p13=Y*B,p01=0,p23=0,Sph);

#
#  Here is the universal 2,2-curve (up to equivalence)
#
#F:=(2-s)*X^2*A^2 + s*X^2*A*B + X*Y*A*B + t*Y^2*A*B + (2-t)*Y^2*B^2;

Quad:=linalg[innerprod](plucker,Wedge(Quadric(a,b,c,d,e,f,g,h,x,y)),plucker):
G:=subs(p02=X*A,p03=Y*A,p12=X*B,p13=Y*B,p01=0,p23=0,Quad);

CF:=[coeff(coeff(F,X^2),A^2),
     coeff(coeff(coeff(F,X^2),A),B),
     coeff(coeff(F,X^2),B^2),
     coeff(coeff(F,Y^2),A^2),
     coeff(coeff(coeff(F,Y^2),A),B),
     coeff(coeff(F,Y^2),B^2) ,
     subs(B=1,Y=1,coeff(coeff(F,X),A)),
     subs(A=1,B=0,coeff(coeff(F,X),Y)),
     subs(A=0,B=1,coeff(coeff(F,X),Y))]:
CG:=[coeff(coeff(G,X^2),A^2),
     coeff(coeff(coeff(G,X^2),A),B),
     coeff(coeff(G,X^2),B^2),
     coeff(coeff(G,Y^2),A^2),
     coeff(coeff(coeff(G,Y^2),A),B),
     coeff(coeff(G,Y^2),B^2) ,
     subs(B=1,Y=1,coeff(coeff(G,X),A)),
     subs(A=1,B=0,coeff(coeff(G,X),Y)),
     subs(A=0,B=1,coeff(coeff(G,X),Y))]:
M := matrix([CF,CG]):
Eqs:={}:
for i from 1 to 8 do 
 for j from i+1 to 9 do
  Eqs:= Eqs union {primpart(M[1,i]*M[2,j]-M[1,j]*M[2,i])}:
od;od;

for eq in Eqs do 
 lprint(eq,`,`);
od;









