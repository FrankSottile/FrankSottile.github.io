##############################################################
# M-products.maple
#
#   This computes and prints out a LaTeX file of the products of 
#  the M-functions of SSym.
#
read(`MalvenutoProcedures`);
####################################################
MakeTerm:=proc(T,X)
local Str, n1, j, n2: 
 Str:= ``: 
 if T[1]>1 then Str:=cat(Str,convert(T[1],symbol)): fi:
 n1:=nops(T[2]):
 if n1=0 then 
  Str:=cat(Str,`1 `):
 else
  Str:=cat(Str,`\\`,convert(X,symbol),`_{`):
  for j from 1 to n1 do
   Str:=cat(Str,convert(T[2][j],symbol)):
  od:
  Str:=cat(Str,`}`):
 fi:
Str
end:
################################################################
Format := proc(L,X)
#
#  Given a list L, this makes the formal sum L in TeX
#
local  Str, j:
 Str:=MakeTerm(L[1],X):
 if nops(L)>1 then
  for j from 2 to nops(L) do
   if L[j][1]>0 then 
     Str:=cat(Str,`+`):
   fi:
   Str:=cat(Str,MakeTerm(L[j],X)):
   if j=nops(L) then 
     Str:=cat(Str,`$.`): 
   fi:
   if j<>nops(L) then
    if j mod 8 = 0 then  
       Str:=cat(Str,`$\\vspace{-6pt}\n\n      `): 
       Str:=cat(Str,`\\hspace{10pt}\n      $`):
    fi:
    if (j mod 8 <> 0) and (j mod 4 = 0) then Str:=cat(Str,`\n       `): fi:
   fi:
  od:
 fi:
 Str
end:
###############################################################

file:=fopen(`M-Product.tex`,WRITE):

fprintf(file,`\\documentclass[12pt]{article}\n`):
fprintf(file,`\\usepackage{amssymb}\n`):
fprintf(file,`\\newcommand{\\M}{\\mathcal{M}}\n`):
fprintf(file,`\\newcommand{\\F}{\\mathcal{F}}\n`):
fprintf(file,`\\headheight=8pt \\topmargin=-20pt\n`): 
fprintf(file,`\\textheight=649pt \\textwidth=432pt\n`):
fprintf(file,`\\oddsidemargin=18pt \\evensidemargin=18pt\n\n`):

fprintf(file,`\\begin{document}\n`):

fprintf(file,`\\begin{center}\\Large\\bf\n`):
fprintf(file,`Products of the Monomial functions of $\\mathfrak{S}\\mathit{Sym}$\n`):
fprintf(file,`\\end{center}\n`):


fprintf(file,`%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`):
fprintf(file,`\n\n`):
for n from 2 to 5 do 
fprintf(file,cat(`\\hspace{-50pt}{\\bf Products of total degree $`,n,`$:}\n\n`)):
for k from 1 to n-1 do 
fprintf(file,cat(`\\hspace{-40pt}Degree $`,k,`$ by degree $`,n-k,`$:\\vspace{-1pt}\n`)):
fprintf(file,cat(`\\begin{enumerate}\n`)):
for w in combinat[permute](k) do
for v in combinat[permute](n-k) do
fprintf(file,cat(`\\item[]\\hspace{-50pt}$`)):
fprintf(file,cat(MakeTerm([1,w],\M),`\\cdot`,MakeTerm([1,v],\M),`=\n        `)):
fprintf(file,cat(Format(FtoM(Prod(w,v)),M),`\\vspace{-8pt}\n`)):
od:od:
fprintf(file,cat(`\\end{enumerate}\n`)):
if k<>n-1 then fprintf(file,`\\hspace{-40pt}\\rule{430pt}{1pt}\n\n`): fi:
fprintf(file,`%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`):
fprintf(file,` \n`):
od:
fprintf(file,`\\hspace{-50pt}\\underline{\\rule{430pt}{1pt}}\\medskip\n\n`):
od:

fprintf(file,`\\end{document}\n`):

quit:
