//Derksen.sing
//
// Frank Sottile
// 31 January 2020
//
// This studies the reality in a particularly interesting Schubert problem.
////////////////////////////////////////////////////////////////
LIB "random.lib";
LIB "matrix.lib"; 
LIB "linalg.lib"; 
LIB "rootsur.lib";

//
// Singular command to compute the number of real solutions to an ideal
//  that is assumed to satisfy the shape lemma.  The second line is 
//  an efficient way to compute an eliminant which will be covered
//  when we discuss using eigenvalue methods.
//
proc NReal(ideal II) {
 B= kbase(II); 
 F= charpoly(coeffs(reduce(var(nvars(R))*B,II),B), varstr(nvars(R)));
 return(nrroots(F))
}

option(redSB);

ring R = 0, (x(1..8)), dp;
int ii,j;
ideal  I, B;
matrix L, M;
poly F;

// This is local coordinates for the set of 4-planes that meet
//  the coordinate 4-planes e_1,...,e_4  and e_5,...,e_8 each 
//  in a 2-plane.
//
matrix Coords[8][4]= 1  , 0  , 0  , 0  ,
                     0  , 1  , 0  , 0  ,  
                    x(1),x(2), 0  , 0  , 
                    x(3),x(4), 0  , 0  ,
	             0  , 0  , 1  , 0  , 
                     0  , 0  , 0  , 1  ,
		     0  , 0  ,x(5),x(6), 
                     0  , 0  ,x(7),x(8);

print(Coords);

L = random(8,8,4);
M = random(8,8,4);
//
// The condition that the column span of Coords meets the column span of L 
//  in a linear subspace of dimension at least 2 is that the column space 
//  [Coords | L] have dimension at most 6, and thus its rank is at most 6
//  and thus that its 7x7 minors all vanish.
//
I = std( minor(concat(Coords,L),7) + minor(concat(Coords,M),7));
//
//  We check the dimension expected to be 0 and degree expected to be 6
//
dim(I), mult(I);

//quit;

//
//  Let us do 10 of these and look at the numbers of real solutions
//
for (ii=1; ii<=10; ii=ii+1) {
 L = random(8,8,4);
 M = random(8,8,4);
 I = std( minor(concat(Coords,L),7) + minor(concat(Coords,M),7));
 NReal(I);
}

//quit;
//
//  Now let us do 100 and record the results in a feequency vector NROOTS
//

intvec NROOTS=0,0,0,0,0,0,0;

for (ii=1; ii<=100; ii=ii+1) {
 L = random(8,8,4);
 M = random(8,8,4);
 I = std( minor(concat(Coords,L),7) + minor(concat(Coords,M),7));
 j =  NReal(I);
 NROOTS[j+1] = NROOTS[j+1]+1;
}

NROOTS;

//
quit;
