#checkConjectures.maple
#
#   This looks at how often the conjecture was tested
#
#[  212    ,    378  ,   202  ]
#[132919238, 25524241, 7223660]
#[ 3.5717  ,  1.4662 , 0.77344]
#checkConjectures.maple

##############################################################
interface(quiet=true):
read("Data/HTML_Procedures.maple"): 
##############################################################
read("Data/ListOfFiles"):
read("Data/Directories"):
#############################################################
Desc:=proc(Problem)
#
#  This procedure returns the list of descent sets 
#  for the given EnumerativeProblem.
#
local DES, w, i, Dw:
 DES:=[]:
 for w in Problem do
  Dw:={}:
  for i from 1 to nops(w)-1 do 
   if w[i]>w[i+1] then Dw := Dw union {i}: end if:
  end do:
  DES:=[DES[],Dw]:
 end do:
 return(DES)
end proc:
###########################################################
makeList:=proc(Des, K)
#
#  Applies the permutation encoded in the necklace to 
#    the set of descents
#
local L, i, j;
 L:=Des:
 for i from 1 to nops(K) do 
  L[K[i]+1]:=Des[i+1]:
 end do:
 return(L)
end proc:
###########################################################
isDown:=proc(Descents)
#
#  This tries to see if the list of Descents is monotone Down
# Returns
#   True:  If the list of descents is monotone Down
#   False: At the first non-descent
#
local i:
 for i from 1 to nops(Descents)-1 do 
  if min(op(Descents[i]))<max(op(Descents[i+1])) then 
   return(evalb(false))
  end if:
 end do:
 return(evalb(true))
end proc:
###########################################################
Rotate:=proc(L)
#
#  cyclically shifts L
#
 local i,M:
 M:=[]:
 for i from 2 to nops(L) do 
  M:=[M[],L[i]]:
 end do:
 M:=[M[],L[1]]:
 return(M):
end proc:
###########################################################
isMonotone:=proc(Descents)
#
#  Returns true if the necklace is monotone
#          false if it is not.
#
#  Checks first for Down, then Up, then starts cycling through
#
#  This naive algorithm fails for {1,3}, {2}, {2}, {2}, {3}
#
#
#
 local monotone, L, R, i:
  L:=Descents:
  monotone:=isDown(L):
#lprint(monotone, L);
  if monotone then return(monotone) end if:
  R:=[]: for i in L do R:=[i,R[]]: end do:
  monotone:=isDown(R):
  if monotone then return(monotone) end if:
  for i from 1 to nops(L)-1 do 
   L:=Rotate(L):
   monotone:=isDown(L):
# lprint(monotone, L);
   if monotone then return(monotone) end if:
   R:=Rotate(R):
   monotone:=isDown(R):
   if monotone then return(monotone) end if:
  end do:  
 return(evalb(false))
end proc:
###########################################################
NewDescents:= proc(Des)
global FlagVariety:
local ND, NA, a, k, A, j:
 # 
 # First find a descent set A containing alpha_1 and alpha_max, and 
 #  then find the maximum j such that alpha_j is in A.
 # This will be used to shift the descent set around
 #
 for A in Des do 
  if ({FlagVariety[1],FlagVariety[nops(FlagVariety)-1]} subset A ) then 
   j:=0:
   while member(FlagVariety[j+1],A) do
    j:=j+1:
   end do:
  end if:
 end do:
 ND:=[]:
 for A in Descents do
  NA:={}:
  for a in A do
   if a<=FlagVariety[j] then
    for k from 1 to j do
     if a=FlagVariety[k] then 
      a:=FlagVariety[nops(FlagVariety)]+k:
     end if:
    end do:
   end if:
   NA:=NA union {a}:
  end do:
  ND:=[ND[],NA]:
 end do:
 return(ND):
end proc:



#############################################################################
#
# The first coordinate is for the pure Grassmannian problems
# The second coordinate is for the pure first monotone conjecture problems
# The third coordinate is for the refined monotone conjecture problem
#
NumberProblems:=[0,0,0]:
NumberSolved:=[0,0,0]:
TotGHZ_Years:=[0,0,0]:

#
#
for dim from 4 to 8 do 

 for flagMan in Directories[dim] do
  directory:=convert(flagMan,string):
  for NAME in Data[flagMan] do 
   if NAME<>NULL then 

    read(sprintf("Data/%s/%s.data",directory,NAME)):
#lprint(directory,NAME);
#    read(sprintf("Data/F12345/A2135e2Xe3Ye3.12.data")):
    fixMachine():
    iterations:= sum(Table[1][ll],ll=1..nops(Table[1])):

    ############################################################################# 
    #
    #  Check for a Grassmannain Variety
    #
    if nops(FlagVariety)=2 then  
      NumberProblems[1]:=NumberProblems[1]+1:
      NumberSolved[1]:=NumberSolved[1]+iterations*nops(Necklaces):
      Time  :=(PreTime+GroebnerTime+RealTime):
      TotGHZ_Years[1]:=TotGHZ_Years[1] + Time*SPEED[Machine]/1000./3600/24/365.25:
     else

     #############################################################################
     #
     #  Makes the set of descents.
     #  Checks to see if the problem is a Grassmannian Schubert Problem
     #  Checks to see if there is a condition with descent set containing
     #    { alpha_1, alpha_k }.   These cases are difficult to recognize
     #    monotone necklaces, so the descent set is `fixed' to ND
     # 
     Descents:=Desc(EnumerativeProblem):
     FixD:=false:
     Grassmann:=true:
     for A in Descents do 
      Grassmann:=Grassmann and evalb(nops(A)=1):
      FixD:= FixD or 
            evalb({FlagVariety[1],FlagVariety[nops(FlagVariety)-1]} subset A ):
     end do:
     ED:=Descents:
     if FixD then ED:=NewDescents(Descents): end if:

     Good_Montone_Necklaces:=false:
     MN:=[]:
     ##############################################################################
     for i from 1 to nops(Necklaces) do
      Des:=makeList(Descents,Necklaces[i]):
      EDes:=makeList(ED,Necklaces[i]): 
 
      if isMonotone(EDes) then 
       if sum(Table[i][ij],ij=1..nops(Table[i])) <> Table[i][nops(Table[i])] then
         lprint("Holy Cow!", sprintf("Data/%s/%s.data",directory,NAME));
         quit;
       end if:
       Good_Montone_Necklaces:=true:
       MN:=[MN[],Des]:
      end if:

     end do:
     #################################################################################
     Time  :=(PreTime+GroebnerTime+RealTime)*nops(MN)/nops(Necklaces):
     if MN<>[] then 
      if Grassmann then 
        NumberProblems[2]:=NumberProblems[2]+1:
        NumberSolved[2]:=NumberSolved[2]+iterations*nops(MN):
        TotGHZ_Years[2]:=TotGHZ_Years[2] + Time*SPEED[Machine]/1000./3600/24/365.25:
       else
        NumberProblems[3]:=NumberProblems[3]+1:
        NumberSolved[3]:=NumberSolved[3]+iterations*nops(MN):
        TotGHZ_Years[3]:=TotGHZ_Years[3] + Time*SPEED[Machine]/1000./3600/24/365.25:
      end if:
     end if:

    end if:
   end if:
  end do:
 end do:
end do:
###########################################################################


lprint(NumberProblems);
lprint(NumberSolved);
lprint(TotGHZ_Years);



quit;
