#Qsym.maple
# 2 May 2001
# Amherst, MA
#
#   This file computes in the algebra of quasi-symmetric functions
#
#####################################################################
#
# Prec, Succ, and Cdot:  Trialgebra operations
# Collect                Computes the frequency of a composiiton in a list
# SetToComp, CompToSet   Converts sets to compositions and vice versa
# FtoM, MtoF             Converts between the two bases for QSym
#
#####################################################################
Prec := proc(alpha,beta)
local AB,L,la,lb,prec,a,salpha,j:
 la:=nops(alpha):
 lb:=nops(beta):
 prec :=[]:
 if la<>0 then 
  a := alpha[1]:
  salpha:=alpha[2..la]: 
  AB := Prod(salpha,beta):
  for L in AB do 
   prec:=[prec[],[a,L[]]]:
  od:
 fi:
 prec
end:
############################################
Succ := proc(alpha,beta)
local  AB,L,la,lb,succ,b,sbeta,j;
 la:=nops(alpha);
 lb:=nops(beta);
 succ :=[]:
 if lb<>0 then 
  b := beta[1]:
  sbeta:=beta[2..lb]: 
  AB := Prod(alpha,sbeta):
  for L in AB do 
   succ:=[succ[],[b,L[]]]:
  od:
 fi:
 succ
end:
############################################
Cdot := proc(alpha,beta)
local  AB,L,la,lb,cdot,a,salpha,b,sbeta,j;
 la:=nops(alpha);
 lb:=nops(beta);
 cdot :=[]:
 if lb<>0 and la<>0 then 
  a := alpha[1]:
  b := beta[1]:
  salpha:=alpha[2..la]: 
  sbeta := beta[2..lb]: 
  AB := Prod(salpha,sbeta):
  for L in AB do 
   cdot:=[cdot[],[a+b,L[]]]:
  od:
 fi:
 cdot
end:
##########################################
Prod := proc(alpha,beta)
 local prod;
 if nops(alpha)=0 then 
  prod:=[beta]:
 fi:
 if nops(beta)=0 then 
  prod:=[alpha]:
 fi:
 if nops(alpha)<>0 and nops(beta)<>0 then 
  prod:=[Prec(alpha,beta)[],Succ(alpha,beta)[],Cdot(alpha,beta)[]]
 fi:
prod
end:
####################################################
Collect := proc(L)
local S,COEFFS,comp,collected ;
 S:=convert(L,set):
 for comp in S do 
  COEFFS[comp]:=0:
 od:
 for comp in L do 
  COEFFS[comp]:=COEFFS[comp]+1:
 od:
 collected:=[]:
 for comp in S do
  collected:=[collected[],[COEFFS[comp],comp]]:
 od:
 collected
end:
######################################################
#
#  S is a subset of [n]
#
SetToComp := proc(S,n)
local T,comp,j;
 T := [op(sort(S)),n];
 comp:=[T[1]]:
 for j from 2 to nops(T) do 
  comp := [comp[],T[j]-T[j-1]]:
 od:
 comp
end:
############################################
CompToSet := proc(alpha)
local S, n, j;
 S := {}:
 n :=0:
 for j from 1 to nops(alpha)-1 do
  n:= n+ alpha[j]:
  S := S union {n}:
 od:
[S,n+alpha[nops(alpha)]]
end:
############################################
FtoM := proc(alpha)
local L,S,n,M,T;
 L := CompToSet(alpha):
 S:=L[1]:
 n:=L[2]:
 M:=[]:
 for T in combinat[powerset](n-1) do 
  if S minus T = {} then 
   M := [M[],[1,SetToComp(T,n)]]:
  fi:
 od:
 M
end:
###################################################
MtoF := proc(alpha)
local L,S,n,M,T;
 L := CompToSet(alpha):
 S:=L[1]:
 n:=L[2]:
 M:=[]:
 for T in combinat[powerset](n-1) do 
  if S minus T = {} then 
   M := [M[],[(-1)^(nops(T minus S)),SetToComp(T,n)]]:
  fi:
 od:
 M
end:

#   This will take two lists of coefficients and compositions representing
#  two expressions in QSym and add them
#
Combine:=proc(L1,L2)
local S,monom,comp,collected,COEFFS;
 S := {}:
 for monom in L1 do 
  S := S union {monom[2]}: 
 od:
 for monom in L2 do  
  S := S union {monom[2]}: 
 od:
 for comp in S do 
  COEFFS[comp]:=0:
 od:
 for monom in L1 do 
  COEFFS[monom[2]]:=COEFFS[monom[2]]+monom[1]:
 od:
 for monom in L2 do 
  COEFFS[monom[2]]:=COEFFS[monom[2]]+monom[1]:
 od:
 collected:=[]:
 for comp in S do
  collected:=[collected[],[COEFFS[comp],comp]]:
 od:
 collected
end:

Prec([1,1],[1]);
Succ([1,1],[1]);
Cdot([1,1],[1]);




quit;


alpha:=[1,2,1]:
beta:=[1,1,3]:

MProd:=[]:
Malpha:=FtoM(alpha):
Mbeta:=FtoM(beta):
for ma in Malpha do
 for mb in Mbeta do
  al:=ma[2]:
  be:=mb[2]:
  L:=Collect(Prod(al,be)):
  for i from 1 to nops(L) do
   L[i][1]:=L[i][1]*ma[1]*mb[1]:
  od:
  MProd := Combine(MProd,L):
 od:
od:
FProd:=[]:
for monom in MProd do
 L:=MtoF(monom[2]):
 for j from 1 to nops(L) do
  L[j][1]:=L[j][1]*monom[1]:
 od:
 FProd:=Combine(FProd,L):
od:


Prec([1],[1]);
Succ([1],[1]);
Cdot([1],[1]);




quit;

CompToSet([1,3,1,4]);
SetToComp({1,4,5},9);




AL:=[2,1]:
BE:=[1,1]:

Prec(AL,BE);
Collect(Prec(AL,BE));

