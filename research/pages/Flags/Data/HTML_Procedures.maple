#HTML_Procedures.maple
#
#   Procedurees for creating the .html pages for the RSSS project
#
###############################################################
COLOURS:=[[purple, blue, red]
         ,[purple, blue, green, red]
         ,[purple, blue, green, orange, red]
         ,[purple, blue, green, orange, red, magenta]
         ,[purple, blue, green, yellow, orange, red, magenta]
]:
Color[black]  :="#000000": 
Color[purple] :="#6600aa":
Color[blue]   :="#0000ff":
Color[green]  :="#00aa00": 
Color[yellow] :="#ffff00": 
Color[orange] :="#ff6600": 
Color[red]    :="#ff0000": 
Color[magenta]:="#ff00ff":
###############################################################
SPEED["TAMU"]      :=3000:
SPEED["Ananke"]    :=2400:
SPEED["Calypso"]   :=2000:
SPEED["Cataldi"]   := 993:
SPEED["Chevalley"] :=1300:
SPEED["Clavius"]   := 993:
SPEED["Fermat"]    :=2175:
SPEED["Hodge"]     := 933: 
SPEED["Noether"]   := 745:
SPEED["Phoebe"]    :=2000:
SPEED["Pieri"]     := 800:
SPEED["Praxis"]    := 730:
SPEED["Rota"]      := 993:
SPEED["rcf1422-1"] := 448:
SPEED["rcf1422-2"] := 448:
SPEED["rcf1422-3"] := 930:
SPEED["rcf1422-4"] := 930:
SPEED["rcf1422-5"] := 398:
SPEED["rcf1537-3"] := 700:
SPEED["rcf1537-8"] := 930:
SPEED["rcf1537-9"] := 930:
SPEED["rcf1537-10"]:= 930:
SPEED["Schubert"]  := 645:
SPEED["Schur"]     :=1794:
SPEED["Witherlin"] := 665:
SPEED["GHz"]       :=1000: 
#############
SPEED["Butterfly"] := 530: #
SPEED["MSRI 730M"] := 730:
SPEED["MSRI 1.2G"] :=1200: #
SPEED["MSRI 1.4G"] :=1400: #
SPEED["MSRI 2.4G"] :=2400: #
###############################################################
fixMachine :=proc()
global Machine:
 if Machine="Calypso.Math.Umass.Edu" then Machine:="Calypso": end if:
 if Machine="Clavius.Math.Umass.Edu" then Machine:="Clavius": end if:
 if Machine="chevalley" then Machine:="Chevalley": fi:
 if Machine="fermat" then Machine:="Fermat": fi:
 if Machine="Fermat.Math.Umass.Edu" then Machine:="Fermat": fi:
 if Machine="rota" then Machine:="Rota": fi:
 if Machine="hodge" then Machine:="Hodge": fi:
 if Machine="Cataldi.Math.Umass.Edu" then Machine:="Cataldi" end if:
 if Machine="Phoebe.Math.Umass.Edu" then Machine:="Phoebe" end if:
 if Machine="Rcf1422-1" then Machine:="rcf1422-1": fi:
 if Machine="Rcf1537-8" then Machine:="rcf1537-8": fi:
 if Machine="Rcf1422-1.Math.Umass.Edu" then Machine:="rcf1422-1": fi:
 if Machine="Rcf1422-2.Math.Umass.Edu" then Machine:="rcf1422-2": fi:
 if Machine="Rcf1422-3.Math.Umass.Edu" then Machine:="rcf1422-3": fi:
 if Machine="Rcf1422-4.Math.Umass.Edu" then Machine:="rcf1422-4": fi:
 if Machine="Rcf1422-5.Math.Umass.Edu" then Machine:="rcf1422-5": fi:
 if Machine="Rcf1537-3.Math.Umass.Edu" then Machine:="rcf1537-3": fi:
 if Machine="Rcf1537-8.Math.Umass.Edu" then Machine:="rcf1537-8": fi:
 if Machine="Rcf1537-9.Math.Umass.Edu" then Machine:="rcf1537-9": fi:
 if Machine="Rcf1537-10.Math.Umass.Edu" then Machine:="rcf1537-10": fi:

 if Machine="Farallon" then Machine:="MSRI 730M" fi:
 if Machine="Newton" then Machine:="MSRI 730M" fi:

 if Machine="Draco" then Machine:="MSRI 1.2G" fi:
 if Machine="Pisces" then Machine:="MSRI 1.2G" fi:
 if Machine="Amazon" then Machine:="MSRI 1.2G" fi:
 if Machine="Serpens" then Machine:="MSRI 1.2G" fi:
 if Machine="Carmel" then Machine:="MSRI 1.2G" fi:
 if Machine="Condor" then Machine:="MSRI 1.2G" fi:
 if Machine="Crux" then Machine:="MSRI 1.2G" fi:
 if Machine="Sequoia" then Machine:="MSRI 1.2G" fi:
 if Machine="Shiloh" then Machine:="MSRI 1.2G" fi:

 if Machine="Croix" then Machine:="MSRI 1.4G" fi:
 if Machine="Catalina" then Machine:="MSRI 1.4G" fi:
 if Machine="Biblios" then Machine:="MSRI 1.4G" fi:

 if Machine="Harley" then Machine:="MSRI 2.4G" fi:
 if Machine="Spin" then Machine:="MSRI 2.4G" fi:

end proc:
###############################################################
TimeString:=proc(Time,Machine)
#
#  Gives the time of computation in relative (GHz) units
# 
 local speed, String, GHZTime:
 global SPEED:

 speed:=SPEED[Machine]:
 if not type(speed,numeric) then 
  printf(" Do not have CPU speed for %s\n",Machine):
  quit:
 fi:
 GHZTime:=Time*speed/1000.:
 String:=sprintf(" Total time of computation: %s GHz-seconds",parseNumber(GHZTime)):
 if GHZTime <3600 and GHZTime >= 60 then 
   String:=sprintf("%s or %3.2f GHz-minutes",String,GHZTime/60):
 fi:
 if GHZTime <3600*24  and GHZTime >= 3600 then 
  String:=sprintf("%s or %3.2f GHz-hours",String,GHZTime/3600):
 fi:
 if  GHZTime >=3600*24 then
   String:=sprintf("%s or %s GHz-days",String,parseNumber(evalf(GHZTime/3600/24))):
 fi:
 return(String):
end proc:
##############################################################
parseNumber := proc(N)
#
#  Writes numbers with spaces every 10^3
#
 local parsed,rdigits,tmp,M,i:
 
 parsed:="":
 rdigits:=[]:

 if type(N,integer) then
  M:=N:
  for i from 1 to ceil(log10(N+1)) do
   rdigits:=[rdigits[],M mod 10]:
   M:=trunc(M/10):
  end do:
  for i from 1 to nops(rdigits) do 
   parsed:=sprintf("%d%s",rdigits[i],parsed):
   if i mod 3 = 0 then 
    parsed:=sprintf(" %s",parsed):
   end if:
  end do:
  return(parsed):
 end if:


 if type(N,float) then
  if trunc(frac(N)*100)<1 then 
    parsed:=sprintf("%s.00",parseNumber(floor(N)),0):
   else  
    if trunc(frac(N)*100)<10  then
      parsed:=sprintf("%s.0%1d",parseNumber(floor(N)),trunc(frac(N)*100)):
     else 
      parsed:=sprintf("%s.%2d",parseNumber(floor(N)),trunc(frac(N)*100)):
     end if:
   end if:
   return(parsed):
 end if:
   
end proc:
##############################################################
parseNumberHTML := proc(N)
#
#  Writes numbers with &nbsp; every 10^3
#
 local parsed,rdigits,M,i:
 
 parsed:="":
 rdigits:=[]:

 if type(N,integer) then
  M:=N:
  for i from 1 to ceil(log10(N+1)) do
   rdigits:=[rdigits[],M mod 10]:
   M:=trunc(M/10):
  end do:
 for i from 1 to nops(rdigits) do 
   parsed:=sprintf("%d%s",rdigits[i],parsed):
   if i mod 3 = 0 then 
    parsed:=sprintf("&nbsp;%s",parsed):
   end if:
  end do:
 return(parsed):
 end if:

 if type(N,float) then
  parsed:=sprintf("%s%3.2f",parseNumber(floor(N)),trunc(frac(N)*100)/100.):
 return(parsed):
 end if:
   
end proc:
###############################################################
AgtB := proc(A,B)
#
#  This compares two lists lexicographically, returning
#  `true` if A >= B
#  `false` if A < B
#
 local AeqB, i:
 AeqB:=true:
 i:=0:
 while ( AeqB and i<nops(A) ) do 
  i:=i+1:
  AeqB := AeqB and evalb(A[i]=B[i]):
 od:
evalb(A[i]>B[i]) or evalb(A=B) 
end:
###############################################################
inOrder:=proc(Necklaces, Table)
#
#   This implements the bubble sort on the data in the Table,
# returning a pointer, Sort
#
 local Sort, i, j, A, Agti:

 Sort:=[1]:
 for i from 2 to nops(Necklaces) do 
  A:=Table[i]:
  Agti := true:
  j := 0:
  while Agti and (j<i-1) do 
   j:=j+1:  
   Agti := Agti and AgtB(A,Table[Sort[j]]):
  od:
  if j=i-1 and Agti then 
    Sort:=[Sort[],i]:
   else
    Sort:=[Sort[1..(j-1)][],i,Sort[j..(i-1)][]]:
  fi:
 od:
 Sort
end:
###############################################################
flagType:=proc(FlagVariety)
#
# TYPE:       The type of the flag variety.  e.g. FL(2,3;5)
#
 local TYPE, i:
 ####################################################################
 TYPE:=convert(FlagVariety[1],string): 
 for i from 2 to nops(FlagVariety)-1 do
  TYPE:=cat(TYPE, ",", convert(FlagVariety[i],string)): 

 od:
 TYPE:=cat(TYPE, ";", convert(FlagVariety[nops(FlagVariety)],string)): 
 ####################################################################
 return(TYPE):
end:
###############################################################
ProblemString := proc(Size,FlagVariety,EnumerativeProblem)
#
#   This creates string identifying the enumerative Problem
#
#  Size is one of "Big" or "Small" (for the .gif file size)
#
 global COLOURS, Color:
 local str, i, HtmlConditions, C, Freq, condition, Key, colour,
       k, SortedConditions, w, Problem:
 ####################################################################
 SortedConditions:=SortConditions(FlagVariety,EnumerativeProblem):
 HtmlConditions:=htmlConditions(Size,FlagVariety,EnumerativeProblem):
#
#   HtmlConditions is a table of strings typesetting the conditions in html
#
 C:=[]:
 for k in SortedConditions[0] do
  for w in SortedConditions[k] do
   C:=[C[],w]:
  od:
 od:
 Freq:=[seq(0,i=1..nops(C))]:
 for i from 1 to nops(C) do 
  for condition in EnumerativeProblem do
   if condition=C[i] then Freq[i]:=Freq[i]+1: fi:
  od:
 od:

 Problem:="": 
 for i from 1 to nops(C) do 
  if Descents(C[i])>1 then 
    colour:="#000000"
   else
    colour:=Color[COLOURS[FlagVariety[nops(FlagVariety)]-3][LastDescent(C[i])]]:
  fi:
  if Freq[i]=1 then 
    Problem:=sprintf("%s<font color=%s>%s</font>",Problem,colour,HtmlConditions[C[i]]):
   else
    Problem:=sprintf("%s<font color=%s>(%s)",Problem,colour,HtmlConditions[C[i]]):
    Problem:=sprintf("%s<SUP>%d</SUP></font>",Problem,Freq[i]):
  fi:
 od:
 return(Problem):
end:
#
###############################################################
htmlConditions:=proc(Size,FlagVariety,EnumerativeProblem)
#
#  Makes a table of strings typesetting the conditions in .html
#
global up, COLORS, Color:
local Grass, w, Conditions, i, k, n, descents, Condition, lambdaFile, color, j:
#
# Symbols used for Grassmannian conditions
#
 Grass:=["Z", "Y", "X", "W", "V", "U", "T", "S"]:
 n:=FlagVariety[nops(FlagVariety)]:
 for w in convert(EnumerativeProblem,set) do
 descents:= Descents(w):
 k:=LastDescent(w):
 #
 #  Checks whether it is a Grassmannian condition
 #
  if descents>1 then
    Condition:="A<SUB>":
    for i from 1 to FlagVariety[nops(FlagVariety)-1] do 
     Condition:=cat(Condition, convert(w[i],string)): 
    od:
    Condition:=cat(Condition, "</SUB>"): 
   else
    lambdaFile:=sprintf("%sTableau/%s",up,convert(w[k]-k,string)):
    i:=2:
    while k+1-i>0 and w[k+1-i]>k+1-i do
     lambdaFile:=sprintf("%s%s",lambdaFile,convert(w[k+1-i]-(k+1-i),string)):
     i:=i+1:
    od:
    color:=COLOURS[n-3][k]:
    Condition:=sprintf("%s",Grass[n-k]):
    for j from 2 to i do 
     Condition:=sprintf("%s<SUB>",Condition):
    od:
    Condition:=sprintf("%s<IMG SRC=""%s.%a.%s.gif"">",Condition,lambdaFile,color,Size):
    for j from 2 to i do 
     Condition:=sprintf("%s</SUB>",Condition):
    od:
   fi:
  Conditions[w]:=Condition:
 od:
 return(Conditions):
end proc:
######################################################
Descents:=proc(w)
#
#  Returns:  descents:= number of descents of w
#
 local i, descents;
 descents:=0:
 for i from 1 to nops(w)-1 do 
  if w[i]>w[i+1] then 
   descents:=descents+1:
  fi:
 od:
 return(descents):
end proc:
######################################################
LastDescent:=proc(w)
#
#  Returns:  k:= last descent of w
#
 local i, k;
 k:=0:
 for i from 1 to nops(w)-1 do 
  if w[i]>w[i+1] then   k:=i:   fi:
 od:
 return(k):
end:
######################################################
Length:=proc(w)
#
#  Returns the length of the permutation w
#
 local i, j, len:
 len:=0:
 for i from 1 to nops(w)-1 do 
  for j from i+1 to nops(w) do
   if (w[i]>w[j]) then len:=len+1: fi:
  od:
 od:
 return(len)
end proc:
################################################################################

SortConditions := proc(FlagVariety, EnumerativeProblem)
################################################################################
# 
#   Returns a table Sorted Conditions:
#
#  SortedConditions[0]:  [n, k_1, k_2, ..., k_s], where
#                         the variety is Fl(k_1, ..., k_s; n)
#  SortedConditions[k]:  Grassmannian conditions with descent k, listed
#                          in order of length
#  SortedConditions[n]:  Non-Grassmannian conditions,  in order of length
#
 local AugmentedConditions, w, n, C, AC, SortedConditions, k, V, W:

 AugmentedConditions:=[]:
 for w in convert(EnumerativeProblem,set) do
  AugmentedConditions:=[AugmentedConditions[],[w,Descents(w),LastDescent(w),Length(w)]]:
 od:
 for n in FlagVariety do
  C[n]:={}:
 od:
#
#  n is now the dimension of the space
#
 for AC in AugmentedConditions do
  if AC[2]>1 then C[n]:=C[n] union {AC}: 
   else
   C[AC[3]] := C[AC[3]] union {AC}:
  fi:
 od:
 SortedConditions[0]:=[n,FlagVariety[1..nops(FlagVariety)-1][]]:
 for k in SortedConditions[0] do
  SortedConditions[k]:=[]:
  while C[k]<>{} do
   W:=op(1,C[k]):
   C[k] := C[k]:
   for V in C[k] do
    if V[4]<W[4] then W:=V: fi:
   od:
   C[k] := C[k] minus {W}:
   SortedConditions[k]:=[SortedConditions[k][],W[1]]:
  od:
 od:
 return(SortedConditions)
end proc:
################################################################################
makeNecklaceSymbols:=proc()
#
#  This is a table of coloured symbols representing the conditions 
#  for making the necklaces more visible
#
 local Alphabet, alphabet, n, necklaceSymbols, i, w, k:
 global FlagVariety, SortedConditions, COLOURS, Color:

 Alphabet:=["A", "B", "C", "D", "E", "F"]:
 alphabet:=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]:

 n:=FlagVariety[nops(FlagVariety)]:
 for i from 1 to nops(SortedConditions[n]) do
  necklaceSymbols[SortedConditions[n][i]]:=
           sprintf("<font color=black><b>%s</b></font>", Alphabet[i]):
 od:
 i:=1:
 for k in FlagVariety[1..nops(FlagVariety)-1] do
  for w in SortedConditions[k] do
   necklaceSymbols[w]:=
           sprintf("<font color=%s><b>%s</b></font>",Color[COLOURS[n-3][k]],alphabet[i]):
   i:=i+1:
  od:
 od:
 return(necklaceSymbols)
end proc:
############################################################
Directory := proc(FlagVariety)

local directory, i:

 directory:="F":
 for i in FlagVariety do 
  directory := sprintf("%s%d",directory,i):
 od:
 return(directory):
end proc:
############################################################
titleString := proc(SPC,FlagVariety,EnumerativeProblem,NumberOfSolutions)
#
# Makes the title string, both for the file name and 
# for the title in the data file.
#
local Grass, i, SortedConditions, w, Freq, TitleString, n, LastFlag, condition,
   j, k:

 n:=FlagVariety[nops(FlagVariety)]:
 LastFlag:=FlagVariety[nops(FlagVariety)-1]:
 
 Grass:=["Z", "Y", "X", "W", "V", "U", "T", "S"]:
 SortedConditions:=SortConditions(FlagVariety,EnumerativeProblem):

 for w in convert(EnumerativeProblem, set) do 
  Freq[w]:=0:
  for condition in EnumerativeProblem do
   if condition=w then Freq[w]:=Freq[w]+1: fi:
  od:
 od:

 TitleString:=SPC:
 for w in SortedConditions[n] do
  TitleString := sprintf("%sA",TitleString): 
  for i from 1 to LastFlag do 
   TitleString := sprintf("%s%d",TitleString,w[i]): 
  od:
  if Freq[w]>1 then 
   TitleString := sprintf("%se%d",TitleString,Freq[w]): 
  fi:
 od:

 for j from 1 to nops(FlagVariety)-1 do 
  k:=FlagVariety[j]:
  for w in SortedConditions[k] do 
   TitleString := sprintf("%s%s%s",TitleString,SPC,Grass[n-k]): 
   if Length(w) > 1 then 
    TitleString := sprintf("%s%d",TitleString,w[k]-k):
    i:=2:
    while k+1-i>0 and w[k+1-i]>k+1-i do
     TitleString := sprintf("%s%d",TitleString,w[k+1-i]-(k+1-i)):
     i:=i+1:
    od:
   fi:
   if Freq[w]>1 then 
    TitleString := sprintf("%se%d",TitleString,Freq[w]): 
   fi:
  od:
 od:
 if SPC = "" and type(NumberOfSolutions, integer) then 
  TitleString  := sprintf("%s.%d",TitleString,NumberOfSolutions):
 fi:
 return(TitleString):
end proc:
###############################################################################

Projections := proc(FlagVariety, EnumerativeProblem)

local N, n, a, A, j, Type, NewFlagVariety, ExtType, dimension, w, Projections,
       i, NewEnumerativeProblem, wp:

 N:=nops(FlagVariety)-1:
 n:=FlagVariety[N+1]:

 Projections :=[]:
 for a from 1 to N-1 do 
  for A in combinat[choose]([seq(j, j=1..N)],a) do 
   Type:=[seq(FlagVariety[A[j]], j=1..nops(A))]:
   NewFlagVariety:=[Type[],n]:
   ExtType:=[0, NewFlagVariety[]]:
 
   dimension :=0:
   for i from 1 to nops(A) do 
    dimension := dimension + 
        NewFlagVariety[i]*(NewFlagVariety[i+1]-NewFlagVariety[i]):
   od:

   NewEnumerativeProblem:=[]:
   for w in EnumerativeProblem do
    wp:=[seq(sort([w[ExtType[j]+1..ExtType[j+1]]][])[], j=1..nops(NewFlagVariety))]:
    if Length(wp)<>0 then 
      NewEnumerativeProblem:=[NewEnumerativeProblem[],wp]:
    fi:
   od:

   for w in NewEnumerativeProblem do 
     dimension:=dimension - Length(w):
   od:

   if dimension=0 then
    Projections :=[Projections[],[NewFlagVariety, NewEnumerativeProblem]]:
   fi:
  od:
 od:

 return(Projections):
 
 end proc:
########################################################################################
FM := proc(flagvar)
 local S, i:
 S:=convert(flagvar,string):
 return([seq(convert(S[i],symbol), i=2..length(S))]):
end proc:
###################################################################################
fixGrassmannianName := proc(NewName)
 if NewName="XX11e2X2e2" then return("XX2e2X11e2.2"):
  elif NewName="Xe2X11X2X21"  then return("Xe2X2X11X21"):
  else return(NewName):
 end if:
end proc:
##############################################################
Flagtype:=proc(DIR)
 local dir, Ftype, i:
 dir:=convert(DIR,string);
 Ftype:=sprintf("Fl(%s",substring(dir,2)):
 for i from 3 to length(dir)-1 do
  Ftype:=sprintf("%s,%s",Ftype,substring(dir,i)):
 od:
 return(sprintf("%s;%s)",Ftype,substring(dir,length(dir)))):
end proc:
##############################################################
