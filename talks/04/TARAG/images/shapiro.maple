#shapiro.maple
#
# Frank Sottile
# Amherst, MA
# 14 September 2003
# 
###########################################################################
#
# This file will create a movie illustrating Shapiro's conjecture
# for the Grassmannian of lines in 3-space.   It will use the hyperboloid
# of one sheet:  X^2 + Y^2 - Z^2 = 1, and then find a rational normal curve that
# meets it tangentially at three determined points.   The animation will show
# how the tangent line to every point of the rational normal curve meets the 
# hyperboloid in 2 points.  
#
###########################################################################
interface(quiet=true):
read(`procedures.maple`):
with(plots):
with(plottools):
plotsetup(x11,plotoptions=`width=3in,height=2.5in`):

#
#   Draws a line given by L := [ Point, UnitDirection ]
#
drawLine := proc(L,a,b,COLOR,WIDTH)
 return(spacecurve([L[1][1]+t*L[2][1],
                    L[1][2]+t*L[2][2],
                    L[1][3]+t*L[2][3]], t=a..b, 
                    color=COLOR, thickness=WIDTH,numpoints=2))
end proc:
###########################################################################
#
#  Not only rotates, but also expands
#
ROT := proc(L,th)
  local TH, FACTOR:
  FACTOR:=0.75:
  TH:=th*Pi/180:
  return([cos(TH)*L[1]+sin(TH)*L[2]*FACTOR, 
         -sin(TH)*L[1]+cos(TH)*L[2]*FACTOR, L[3]])
end proc:

###########################################################################
#
#  Here is a general rational normal curve
#

Curve:=simplify([a*t^3+b*t^2+c*t+d, 
                 e*t^3+f*t^2+g*t+h,
                 i*t^3+j*t^2+k*t+l]):
tCurve:=diff(Curve,t):
#
#  One of the families of lines on the hyperboloid of one sheet 
#                   X^2 - Y^2 + Z^2 = 1 
#  is:
#L := th ->  [  r*cos(th) - sin(th), r, r*sin(th) + cos(th) ]:
#
#  The three lines in this family we want are when th (theta) is 
#  0, \pi, and \pi/2.   Parametrically, these are
#
#  [ r, r,  1 ]    t:=1
#  [-r, r, -1 ]    t:=-1
#  [-1, r,  r ]    t:=0
A:=subs(t= 1, Curve): tA:=subs(t= 1, tCurve):  
B:=subs(t=-1, Curve): tB:=subs(t=-1, tCurve):
C:=subs(t= 0, Curve): tC:=subs(t= 0, tCurve):

EA:={A[1]= A[2], A[3]= 1, tA[3]=0, tA[1]= tA[2]}:
EB:={B[1]=-B[2], B[3]=-1, tB[3]=0, tB[1]=-tB[2]}:
EC:={C[2]= C[3], C[1]=-1, tC[1]=0, tC[2]= tC[3]}:

ABC:=solve(EA union (EB union EC),{a,b,c,d,e,f,g,h,i,j,k,l}):
Curve:=subs(op(ABC),Curve):
tCurve:=diff(Curve,t):

#len:=sqrt(tCurve[1]^2+tCurve[2]^2+tCurve[3]^2);
#tCurve:=[tCurve[1]/len, tCurve[2]/len, tCurve[3]/len]:

T0:=
[solve(subs(x=Curve[1]+T*tCurve[1],
            y=Curve[2]+T*tCurve[2],
            z=Curve[3]+T*tCurve[3], x^2-y^2+z^2-1)=0,T)]:

P1:=[Curve[1]+T0[1]*tCurve[1],Curve[2]+T0[1]*tCurve[2],Curve[3]+T0[1]*tCurve[3]]:
P2:=[Curve[1]+T0[2]*tCurve[1],Curve[2]+T0[2]*tCurve[2],Curve[3]+T0[2]*tCurve[3]]:
#quit;
#factor(simplify(Curve[1]^2-Curve[2]^2+Curve[3]^2-1));

#A:=subs(t= 1, Curve); tA:=subs(t= 1, tCurve);  
#B:=subs(t=-1, Curve); tB:=subs(t=-1, tCurve);
#C:=subs(t= 0, Curve); tC:=subs(t= 0, tCurve);

R := [  r*cos(th) - sin(th), r, r*sin(th) + cos(th) ]: 

###############################################################################

L1:=[subs(t= 1, Curve), [ 1, 1, 0 ] ]:
L2:=[subs(t=-1, Curve), [-1, 1, 0 ] ]:
L3:=[subs(t= 0, Curve), [ 0, 1, 1 ] ]:

#  [ r, r,  1 ]    t:=1
#  [-r, r, -1 ]    t:=-1
#  [-1, r,  r ]    t:=0

##########################################################################
DSeq:=[]:

H1:=display3d(plot3d(R, th=-Pi..Pi, r=-2..10,color=yellow,grid=[33,30]   )):
E1:=display3d(spacecurve(subs(r= 10.05,R), th=-Pi..Pi,color=orange,thickness=4,numpoints=33)):
C:=display3d(spacecurve(Curve,t=-1.7..1.7,color=blue, thickness=2)):
l1 :=drawLine(L1,-15,5,red,4):
l2 :=drawLine(L2,-5,15,green,4):
l3 :=drawLine(L3,-10,10,magenta,4):
t1:=sphere(subs(t=1,Curve),0.15,color=red,style=PATCHNOGRID,grid=[10,10]):
t2:=sphere(subs(t=0,Curve),0.15,color=magenta,style=PATCHNOGRID,grid=[10,10]):


#for T from -0.96 to 0.96 by 0.015 do 
for T from -0.96 to 0.96 by 0.03 do 
#for T from -0.96 to 0.96 by 0.24 do 
 tau:=0.06+T^2:
# lprint(tau);
 p1:=subs(t=tau,P1):
 p2:=subs(t=tau,P2):
 l4:=line(p1, p2, color=brown,thickness=4):
 s1:=sphere(p1,0.25,color=brown,grid=[13,13],style=patchnogrid):
 s2:=sphere(p2,0.25,color=brown,grid=[13,13],style=patchnogrid):
 s3:=sphere(subs(t=tau,Curve),0.1,color=blue,grid=[9,9],style=patchnogrid):
 DSeq:=[op(DSeq),[l1, l2, l3, C, H1, E1, t1, t2, l4,s1,s2,s3]]:
od:

#plotsetup(gif,plotoutput="movie.gif",plotoptions=`height=550,width=550`):
plotsetup(gif,plotoutput="movie.gif",plotoptions=`height=800,width=800`):
 
display(seq(display(op(DSeq[k]),scaling=CONSTRAINED,orientation=[80,82]),
       k=1..nops(DSeq)),scaling=CONSTRAINED,insequence=true,
       view=[-3.1..13, -2..13, -3..11.1] );
#        view=[-2..8.5, -2..11.2, -1.5..7.5] );
#        view=[-1.5..7, -2..11.2, -1.5..6.5] );  # Big one





