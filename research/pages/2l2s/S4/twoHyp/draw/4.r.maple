#4.r.maple
#
#  Draws hyperbolae from the fourth ideal
#
interface(quiet=true):
with(plots):
plotsetup(x11,plotoptions=`width=3in,height=2.5in`):

############################################
#
Sphere := (a,b,c,r) ->
  linalg[matrix]([
   [a^2+b^2+c^2-r^2, -a, -b, -c],
   [      -a     , 1 , 0 , 0 ],
   [      -b     , 0 , 1 , 0 ],
   [      -c     , 0 , 0 , 1 ]]):

Wedge := proc(Sph)
local Pairs, i, j, wedge:
 wedge := linalg[matrix](6, 6, 0):
 Pairs := combinat[choose]([1,2,3,4],2):
 for i from 1 to 6 do
  for j from 1 to 6 do
   wedge[i,j] := linalg[det](linalg[submatrix](Sph,Pairs[i],Pairs[j])):
  od:
 od:
 evalm(wedge)
end:

Equation := proc(a,b,c,r)
local  plucker:
 plucker:=linalg[vector]([p01,p02,p03,p12,p13,p23]):
 linalg[innerprod](plucker,Wedge(Sphere(a,b,c,r)),plucker)
end:

Quadric := (a,b,c,d,e,f,g,h,x,y) ->
  linalg[matrix]([
   [ a , b , c , d ],
   [ b , e , f , g ],
   [ c , f , h , x ],
   [ d , g , x , y ]]):

##########################################
#  We assume that A = b = 1.
#  a is the function a(B) stored in aSOLS
#
TanPoint := proc(Q,B,a)
local Point, plugin, touch:
 Point:=linalg[vector]([1,B,t*a,t]):
 plugin:=linalg[innerprod](Point,Q,Point):
 touch:= expand(-coeff(plugin,t)/2/coeff(plugin,t^2)):
 [B, simplify(touch*a), touch]
end:
# [1,B,1,b]
#  B is the function B(b) stored in aSOLS
TanPointb := proc(Q,B,b)
local Point, plugin, touch:
 Point:=linalg[vector]([1,B,t,t*b]):
 plugin:=linalg[innerprod](Point,Q,Point):
 touch:= expand(-coeff(plugin,t)/2/coeff(plugin,t^2)):
 [B, simplify(touch), simplify(touch*b)]
end:

Coords:=linalg[vector]([1,X,Y,Z]):
plucker:=linalg[vector]([p01,p02,p03,p12,p13,p23]):

s2:=2^(1/2):

F:=subs(p02=a*A,p03=b*A,p12=a*B,p13=b*B,p01=0,p23=0,
    linalg[innerprod](plucker,Wedge(Quadric(-1,0,-1,0,1,0,0,1,0,-1)),plucker)):
aSOLS:=[solve(subs(b=1,A=1,F)=0,a)]:
bSOLS:=[solve(subs(a=1,A=1,F)=0,B)]: 
#########################################################
# Initial hyperbola
#
Hyp:=plot3d([s2*cos(th)+t*sin(th),
              (-s2*sin(th)+t*cos(th)-1),t]
              ,t=-8..8,th=-Pi..Pi,color=coral):

#########################################################
#Ideal4:= [x,h+2*y,f,e*y+g^2,d,c,b,a+2*e]:
Family4:=Quadric(-2,0,0,0,1,0,g,2*g^2,0,-g^2):
#F;g:=1:
#simplify(subs(p02=a*A,p03=b*A,p12=a*B,p13=b*B,p01=0,p23=0,
#    linalg[innerprod](plucker,Wedge(Family4),plucker))/2);quit;

linalg[innerprod](Coords,Family4,Coords)-
expand((X+g*Z)^2+(g*Y*s2)^2-(s2*g*Z)^2-2):
simplify(subs(X=s2*cos(th)+t*sin(th)+t/s2,
              Y=(-s2*sin(th)+t*cos(th))/g/s2,Z=-t/g/s2,
(X+g*Z)^2+(g*Y*s2)^2-(s2*g*Z)^2-2)):
g:=2/3:
######################################################################
NFR:=180:

Eps:=0.08:

tC1:=TanPoint(Family4,B,aSOLS[1]):
tC2:=TanPoint(Family4,B,aSOLS[2]):
tC1[1]:=tC1[1]+Eps*sin(th):
tC2[1]:=tC2[1]+Eps*sin(th):
tC1[2]:=tC1[2]+Eps*cos(th):
tC2[2]:=tC2[2]+Eps*cos(th):

TC1:=[tC1[1]*cos(T) + tC1[2]*sin(T), 
      tC1[2]*cos(T) - tC1[1]*sin(T), tC1[3]]:
TC2:=[tC2[1]*cos(T) + tC2[2]*sin(T), 
      tC2[2]*cos(T) - tC2[1]*sin(T), tC2[3]]:
######################################################
eps:=0.08: 
Axis:=[X*cos(ph) + eps*cos(th)*sin(ph),
       eps*cos(th)*cos(ph) - X*sin(ph), eps*sin(th)]:

plotsetup(gif,plotoutput=`4.r.gif`,plotoptions=`height=240,width=280`):
display([
animate3d([TC1[]],B=-1..-0.1,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC1[]],B=0.1..1,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC1[]],B=s2..5,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC1[]],B=-5..-s2,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC2[]],B=-1..-0.1,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC2[]],B=0.1..1,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC2[]],B=s2..5,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
animate3d([TC2[]],B=-5..-s2,th=-Pi..Pi,T=-Pi..Pi,color=blue,grid=[50,5],frames=NFR),
#  X-axis
animate3d(Axis,X=-8..8,th=-Pi..Pi,ph=-Pi..Pi,color=magenta,grid=[2,5],frames=NFR)
,animate3d([(s2*cos(th)+t*sin(th)+t/s2)*cos(T)+sin(T)*(-s2*sin(th)+t*cos(th))/g/s2,
             -(s2*cos(th)+t*sin(th)+t/s2)*sin(T)+cos(T)*(-s2*sin(th)+t*cos(th))/g/s2,
              -t/g/s2]
              ,t=-8*abs(g)..8*abs(g),th=-Pi..Pi,T=-Pi..Pi,
              color=tan,grid=[30,40],frames=NFR)
], insequence=false, view=[-9..9,-9..9.5,-5..5],
  orientation=[0,75],scaling = CONSTRAINED);

