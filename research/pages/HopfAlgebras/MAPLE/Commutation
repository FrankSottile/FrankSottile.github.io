#Commutation
#
# This file attempts to determine the dimension of the 
# commutative quotient of the Malvenuto-Reutenauer
# Hopf algebra
interface(quiet=true):
read(MalvenutoProcedures):


Commutator := proc(u,v)
#
#  Computes the commutator of u and v
#
local UV, VU, Cuv, w, cf:
 UV:=Shuffle(u,v);
 VU:=Shuffle(v,u);
 Cuv:=[]:
 for w in (convert(UV,set) union convert(VU,set)) do
  cf:=0:
  if member(w, UV) then cf:=cf+1: fi:
  if member(w, VU) then cf:=cf-1: fi:
  if cf <> 0 then Cuv:=[Cuv[],[cf,w]]: fi:
 od:
 Cuv
end:

makeVect := proc(X,Sn,n)
 local V, i, Pair:
 V:=array(1..n!):
 for i from 1 to n! do 
  V[i]:=0:
  for Pair in X do 
   if Sn[i] = Pair[2] then V[i]:=Pair[1]: fi:
  od:
 od:
 V
end:


#################################################
n:=3:
Sn:=combinat[permute](n):
Comm:=[]:
for u in combinat[permute](1) do 
 for v in combinat[permute](2) do
  X:=Commutator(u,v):
  V:=makeVect(X,Sn,n):

  Comm:=[Comm[],eval(V)]:
 od:
od:

M:=linalg[matrix](Comm):
lprint(`Dimension of the Commutator ideal for n =`,n,`is `,linalg[rank](M));

time();
#########################################################################
n:=4:
Sn:=combinat[permute](n):
Comm:=[]:

CList:=[[1,3],[2,2]]:
for pair in CList do 
 for u in combinat[permute](pair[1]) do 
  for v in combinat[permute](pair[2]) do
   if  u<>v then 
    X:=Commutator(u,v):
    V:=makeVect(X,Sn,n):
    Comm:=[Comm[],eval(V)]:
   fi:
  od:
 od:
od:
M:=linalg[matrix](Comm):
lprint(`Dimension of the Fake Commutator ideal for n =`,n,`is `,linalg[rank](M));

IList:=[[1,2,1]]:
for triple in IList do 
 for u in combinat[permute](triple[1]) do 
  for v in combinat[permute](triple[2]) do
   X:=Commutator(u,v):
   for w in combinat[permute](triple[3]) do 
    wX:=[]:
    Xw:=[]:
    for P in X do 
     for x in Shuffle(w,P[2]) do 
      wX:=[wX[],[P[1],x]]:
     od:
     for x in Shuffle(P[2],w) do 
      Xw:=[Xw[],[P[1],x]]:
     od:
    od:
    V:=makeVect(Combine(Xw),Sn,n):
    Comm:=[Comm[],eval(V)]:
    V:=makeVect(Combine(wX),Sn,n):
    Comm:=[Comm[],eval(V)]:
   od:
  od:
 od:
od:

M:=linalg[matrix](Comm):
lprint(`Dimension of the Commutator ideal for n =`,n,`is `,linalg[rank](M));
###################################################################

n:=5:
Sn:=combinat[permute](n):
Comm:=[]:

CList:=[[1,4],[2,3]]:
for pair in CList do 
 for u in combinat[permute](pair[1]) do 
  for v in combinat[permute](pair[2]) do
   if  u<>v then 
    X:=Commutator(u,v):
    V:=makeVect(X,Sn,n):
    Comm:=[Comm[],eval(V)]:
   fi:
  od:
 od:
od:
M:=linalg[matrix](Comm):
lprint(`Dimension of the Fake Commutator ideal for n =`,n,`is `,linalg[rank](M));

IList:=[[1,2,2],[1,3,1],[2,2,1]]:
for triple in IList do 
 for u in combinat[permute](triple[1]) do 
  for v in combinat[permute](triple[2]) do
   X:=Commutator(u,v):
   for w in combinat[permute](triple[3]) do 
    wX:=[]:
    Xw:=[]:
    for P in X do 
     for x in Shuffle(w,P[2]) do 
      wX:=[wX[],[P[1],x]]:
     od:
     for x in Shuffle(P[2],w) do 
      Xw:=[Xw[],[P[1],x]]:
     od:
    od:
    V:=makeVect(Combine(Xw),Sn,n):
    Comm:=[Comm[],eval(V)]:
    V:=makeVect(Combine(wX),Sn,n):
    Comm:=[Comm[],eval(V)]:
   od:
  od:
 od:
od:

M:=linalg[matrix](Comm):
lprint(`Dimension of the Commutator ideal for n =`,n,`is `,linalg[rank](M));
###################################################################

n:=6:
Sn:=combinat[permute](n):
Comm:=[]:

CList:=[[1,5],[2,4],[3,3]]:
for pair in CList do 
 for u in combinat[permute](pair[1]) do 
  for v in combinat[permute](pair[2]) do
   if  u<>v then 
    X:=Commutator(u,v):
    V:=makeVect(X,Sn,n):
    Comm:=[Comm[],eval(V)]:
   fi:
  od:
 od:
od:
M:=linalg[matrix](Comm):
lprint(`Dimension of the Fake Commutator ideal for n =`,n,`is `,linalg[rank](M));

IList:=[[1,2,3],[1,3,2],[1,4,1],[2,2,2],[2,3,1]]:
for triple in IList do 
 for u in combinat[permute](triple[1]) do 
  for v in combinat[permute](triple[2]) do
   X:=Commutator(u,v):
   for w in combinat[permute](triple[3]) do 
    wX:=[]:
    Xw:=[]:
    for P in X do 
     for x in Shuffle(w,P[2]) do 
      wX:=[wX[],[P[1],x]]:
     od:
     for x in Shuffle(P[2],w) do 
      Xw:=[Xw[],[P[1],x]]:
     od:
    od:
    V:=makeVect(Combine(Xw),Sn,n):
    Comm:=[Comm[],eval(V)]:
    V:=makeVect(Combine(wX),Sn,n):
    Comm:=[Comm[],eval(V)]:
   od:
  od:
 od:
od:

M:=linalg[matrix](Comm):
lprint(`Dimension of the Commutator ideal for n =`,n,`is `,linalg[rank](M));
###################################################################


quit;

