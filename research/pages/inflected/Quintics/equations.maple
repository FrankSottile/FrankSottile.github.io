#
#  Here are procedures for computing the equations
#
#1  [1,0, 0 , a   ,  d  ,  g   ],
#2  [0,1, 0 , b   ,  e  ,  h   ],
#3  [0,0, 1 , c   ,  f  ,  i   ],
#4  [1,s,s^2,  s^3,s^4  ,   s^5],
#5  [0,1,2*s,3*s^2,4*s^3, 5*s^4],
#6  [0,0, 1 ,3*s  ,6*s^2,10*s^3],
#7  [0,0, 0 , 1   ,4*s  ,10*s^2],
#8  [0,0, 0 , 0   , 1   , 5*s  ]]):    
#

Flex := proc(M,x)
#
#  Computes the equation of codimension 1, a flex
#
 primpart(subs(s=x,linalg[det](linalg[submatrix](M,[1,2,3,4,5,6],[1,2,3,4,5,6]))))
end:

###############################################

Cusp := proc(M,x)
#
#  Computes the equation of type 11, cusp
#  Takes a matrix with 7 rows
#
 local L, EQS, COLS:
 EQS:=[]:
 for COLS in combinat[choose]([1,2,3,4,5,6],5) do
  EQS:=[EQS[],
      primpart(subs(s=x,linalg[det](linalg[submatrix](M,[1,2,3,4,5],COLS))))]:
 od:
 convert(convert(EQS,set),list)
end:

#########################################################
Planar := proc(M,x)
#
#  Computes the equation of type 2, a planar point
#
 local EQS, ROWS:
 EQS:=[]:
 for ROWS in combinat[choose]([1,2,3,4,5,6,7],6) do
  EQS:=[EQS[],
      primpart(subs(s=x,linalg[det](linalg[submatrix](M,ROWS,[1,2,3,4,5,6]))))]:
 od:
 convert(convert(EQS,set),list)
end:

##########################################################

Claw := proc(M,x)
#
#  Computes the equation of type 21, a claw
#
 [Planar(M,x)[],Cusp(M,x)[]]
end:

FlFl := proc(BM,x)
#
#  Computes the equation of type 3  (flat flex)
#
#
 local EQS, ROWS:
 EQS:=[]:
 for ROWS in combinat[choose]([1,2,3,4,5,6,7,8],6) do
  EQS:=[EQS[],
      primpart(subs(s=x,linalg[det](linalg[submatrix](BM,ROWS,[1,2,3,4,5,6]))))]:
 od:
 convert(convert(EQS,set),list)
end:

########################################################################
Box := proc(BM,x)
#
#  Computes the equation of type 22  (box flex)
#
 local EQS, ROWS, COLS:
 EQS:=[]:
 for ROWS in combinat[choose]([1,2,3,4,5,6],5) do
 for COLS in combinat[choose]([1,2,3,4,5,6],5) do
  EQS:=[EQS[],
      primpart(subs(s=x,linalg[det](linalg[submatrix](BM,ROWS,COLS))))]:
 od: od:
 convert(convert(EQS,set),list)
end:

##########################################
Double := proc(x,y,z)
#
#  Computes the double points, given the parameterization
#
 local G;
 G:=Groebner[gbasis]([
 simplify((subs(t=1,x)*subs(s=t,subs(t=1,y))-
           subs(t=1,y)*subs(s=t,subs(t=1,x)))/(s-t)), 
 simplify((subs(t=1,x)*subs(s=t,subs(t=1,z))-
           subs(t=1,z)*subs(s=t,subs(t=1,x)))/(s-t)),
 simplify((subs(t=1,z)*subs(s=t,subs(t=1,y))-
           subs(t=1,y)*subs(s=t,subs(t=1,z)))/(s-t))
 ],plex(s,t));
 [fsolve(G[1]=0,t,complex)]
end:


 factor(primpart(simplify((subs(t=1,x)*subs(s=t,subs(t=1,y))-
           subs(t=1,y)*subs(s=t,subs(t=1,x)))/(s-t)))), 
 factor(primpart(simplify((subs(t=1,x)*subs(s=t,subs(t=1,z))-
           subs(t=1,z)*subs(s=t,subs(t=1,x)))/(s-t)))),
 factor(primpart(simplify((subs(t=1,z)*subs(s=t,subs(t=1,y))-
           subs(t=1,y)*subs(s=t,subs(t=1,z)))/(s-t))));

