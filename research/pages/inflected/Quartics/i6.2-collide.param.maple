with(plots):           
plotsetup(x11,plotoptions=`width=3in,height=2.5in`):
#
# This file will find a polynomial  approximation to the
# solutions of the problem with parameters
#
#
interface(quiet=true):
with(plots):
with(stats):
plotsetup(x11,plotoptions=`width=3in,height=2.5in`):
Digits:=30:

RatNorm:=linalg[vector]([t^4,t^3*s,t^2*s^2,t*s^3,s^4]):
Ifl:=[-3,-1,1,S]:

############################################################################
#  Inflection points at 0 and infinity
#
A:=256*a^5+(-256*s+768)*a^4+(64*s^2-672*s+480)*a^3+(144*s^2-368*s-192)*a^2+(73*s^2+90*s-63)*a+(-3*s^2+6*s+9):
B:=(144*s+48)*b^5+(-32*s^2+240*s-288)*b^4+(-48*s^3+56*s^2-408*s-144)*b^3+(-24*s^3+72*s^2-216*s)*b^2+(81*s^3+27*s^2)*b+(27*s^3):
C:=6*c^5+(-48*s+144)*c^4+(48*s^2-360*s+408)*c^3+(-16*s^3+288*s^2-824*s+312)*c^2+(-72*s^3+497*s^2-510*s-135)*c+(-81*s^3+207*s^2+105*s+9):
DD:=d^5+(9*s+3)*d^4+(-8*s^2+24*s-72)*d^3+(-48*s^3+56*s^2-408*s-144)*d^2+(-96*s^3+720*s^2-864*s)*d+(1296*s^3+432*s^2):
AB:=(9*s+3)*b-64*a^4+(32*s-96)*a^3+(36*s+12)*a^2+(-4*s+12)*a+(3*s):
AC:=c+2*a+(-s+3):
AD:=d-16*a^2+(8*s-24)*a+(9*s+3):
#
#
#plotsetup(gif,plotoutput=`d.vs.s-inv.gif`,plotoptions=`height=400,width=400`):
#F:=simplify(c^5*t^3*subs(d=1/c,s=1/t,G[1]));
#implicitplot(G[1],s=-4..4,d=-15..10,grid=[50,50],axes=boxed);
#implicitplot(F,t=-2/5..3/5,c=-2..3/10,grid=[200,200],axes=boxed);

#
#  This part sorts the solutions for s from -4 .. 4
#

epsilon:=.00001:
Steps:=20:
Dsols:=[]:Csols:=[]:Bsols:=[]:Asols:=[]:
for S from -85 to 85 do 
 F:=sort([fsolve(subs(s=S/Steps+epsilon,DD)=0,d)]):
 if (S<=0) then   DS:=F: fi:
 if (S>0) and (S/Steps<1/3) then 
   DS:=[F[1],F[2],F[4],F[3],F[5]]:
 fi:
 if (S/Steps>=1/3) and (S/Steps<3) then 
    DS:=[F[1],F[3],F[4],F[2],F[5]]:
 fi:
 if (S/Steps>=3) then 
    DS:=[F[1],F[2],F[5],F[3],F[4]]:
 fi:
 CS:=[]:BS:=[]:AS:=[]:
# for i from 1 to 5 do
#  CS:=[CS[],solve(subs(s=S/Steps+epsilon,d=DS[i],G[2])=0,c)]:
#  BS:=[BS[],solve(subs(s=S/Steps+epsilon,d=DS[i],G[3])=0,b)]:
#  AS:=[AS[],solve(subs(s=S/Steps+epsilon,d=DS[i],G[4])=0,a)]:
# od:
 Dsols:=[Dsols[],[S/Steps,DS]]:
# Csols:=[Csols[],[S/Steps,CS]]:
# Bsols:=[Bsols[],[S/Steps,BS]]:
# Asols:=[Asols[],[S/Steps,AS]]:
od:


Sol:=[[],[],[],[],[]]: points:=[[],[],[],[],[]]:
Var:=[]:
for Sext in Dsols do
 Var:=[Var[],Sext[1]]:
 for i from 1 to 5 do
  Sol[i]:=[Sol[i][],Sext[2][i]]:
  points[i]:=[points[i][],[Sext[1],Sext[2][i]]]:
 od:
od:

i:=1:

#EqA[i]:=op(2,fit[leastsquare[[s,y],y=a+b*s+c*s^2+d*s^3+e*s^4+f*s^5+g*s^6+h*s^7+k*s^8+l*s^9+m*s^10+aa*s^11+bb*s^12+cc*s^13+dd*s^14+ee*s^15+ff*s^16+gg*s^17]]([Var,Sol[i]])):
#EqB[i]:=op(2,fit[leastsquare[[s,y],y=a+b*s+c*s^2+d*s^3+e*s^4+f*s^5+g*s^6+h*s^7+k*s^8+l*s^9+m*s^10+aa*s^11+bb*s^12+cc*s^13+dd*s^14+ee*s^15+ff*s^16+gg*s^17+hh*s^18]]([Var,Sol[i]])):
EqA[i]:=op(2,fit[leastsquare[[s,y],y=a+b*s+c*s^2+d*s^3+e*s^4+f*s^5+g*s^6+h*s^7+k*s^8+l*s^9+m*s^10+aa*s^11+bb*s^12+cc*s^13+dd*s^14+ee*s^15+ff*s^16+gg*s^17+hh*s^18+ii*s^19+jj*s^20+kk*s^21+ll*s^22+mm*s^23+nn*s^24+oo*s^25]]([Var,Sol[i]])):
EqB[i]:=op(2,fit[leastsquare[[s,y],y=a+b*s+c*s^2+d*s^3+e*s^4+f*s^5+g*s^6+h*s^7+k*s^8+l*s^9+m*s^10+aa*s^11+bb*s^12+cc*s^13+dd*s^14+ee*s^15+ff*s^16+gg*s^17+hh*s^18+ii*s^19+jj*s^20+kk*s^21+ll*s^22+mm*s^23+psnn*s^24+oo*s^25+pp*s^26]]([Var,Sol[i]])):


#lprint(`DD[`,i,`]:=`,Eq25[i],`;`);
#lprint(`C[`,i,`]:=`,Eq25[i],`;`);
#lprint(`B[`,i,`]:=`,Eq25[i],`;`);
#lprint(`A[`,i,`]:=`,Eq25[i],`;`);


Q[i]:=plot({[s,EqB[i]-EqA[i],s=-4.2..4.2]}):
PP:=[]:    for x in points[i] do
 PP:=[PP[],[x[1],x[2]-subs(s=x[1],EqA[i])]]:   od:
P[i]:=pointplot({PP[]},symbol=circle,color=black):
display(Q[i],P[i]);
 

time();
